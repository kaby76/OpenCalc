//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from calculator.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class calculatorLexer : Lexer {
	public const int
		COS=1, SIN=2, TAN=3, ACOS=4, ASIN=5, ATAN=6, LN=7, LOG=8, LPAREN=9, RPAREN=10, 
		PLUS=11, MINUS=12, TIMES=13, DIV=14, GT=15, LT=16, EQ=17, POINT=18, E=19, 
		POW=20, LETTER=21, DIGIT=22, WS=23;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "LPAREN", "RPAREN", 
		"PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "POINT", "E", "POW", 
		"LETTER", "DIGIT", "WS"
	};


	public calculatorLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'cos'", "'sin'", "'tan'", "'acos'", "'asin'", "'atan'", "'ln'", 
		"'log'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", 
		"'.'", null, "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "LPAREN", 
		"RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "GT", "LT", "EQ", "POINT", 
		"E", "POW", "LETTER", "DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x19");
		sb.Append("w\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3");
		sb.Append("\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11");
		sb.Append("\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3");
		sb.Append("\x15\x3\x16\x5\x16m\n\x16\x3\x17\x3\x17\x3\x18\x6\x18r\n\x18");
		sb.Append("\r\x18\xE\x18s\x3\x18\x3\x18\x2\x2\x19\x3\x3\x5\x4\a\x5\t\x6");
		sb.Append("\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10");
		sb.Append("\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x3\x2\x5\x4");
		sb.Append("\x2GGgg\x4\x2\x43\\\x63|\x5\x2\v\f\xF\xF\"\"w\x2\x3\x3\x2\x2");
		sb.Append("\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v");
		sb.Append("\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2");
		sb.Append("\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2");
		sb.Append("\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2");
		sb.Append("\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2");
		sb.Append("\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-");
		sb.Append("\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x3\x31\x3\x2\x2\x2\x5\x35\x3\x2");
		sb.Append("\x2\x2\a\x39\x3\x2\x2\x2\t=\x3\x2\x2\x2\v\x42\x3\x2\x2\x2\r");
		sb.Append("G\x3\x2\x2\x2\xFL\x3\x2\x2\x2\x11O\x3\x2\x2\x2\x13S\x3\x2\x2");
		sb.Append("\x2\x15U\x3\x2\x2\x2\x17W\x3\x2\x2\x2\x19Y\x3\x2\x2\x2\x1B[");
		sb.Append("\x3\x2\x2\x2\x1D]\x3\x2\x2\x2\x1F_\x3\x2\x2\x2!\x61\x3\x2\x2");
		sb.Append("\x2#\x63\x3\x2\x2\x2%\x65\x3\x2\x2\x2\'g\x3\x2\x2\x2)i\x3\x2");
		sb.Append("\x2\x2+l\x3\x2\x2\x2-n\x3\x2\x2\x2/q\x3\x2\x2\x2\x31\x32\a\x65");
		sb.Append("\x2\x2\x32\x33\aq\x2\x2\x33\x34\au\x2\x2\x34\x4\x3\x2\x2\x2");
		sb.Append("\x35\x36\au\x2\x2\x36\x37\ak\x2\x2\x37\x38\ap\x2\x2\x38\x6\x3");
		sb.Append("\x2\x2\x2\x39:\av\x2\x2:;\a\x63\x2\x2;<\ap\x2\x2<\b\x3\x2\x2");
		sb.Append("\x2=>\a\x63\x2\x2>?\a\x65\x2\x2?@\aq\x2\x2@\x41\au\x2\x2\x41");
		sb.Append("\n\x3\x2\x2\x2\x42\x43\a\x63\x2\x2\x43\x44\au\x2\x2\x44\x45");
		sb.Append("\ak\x2\x2\x45\x46\ap\x2\x2\x46\f\x3\x2\x2\x2GH\a\x63\x2\x2H");
		sb.Append("I\av\x2\x2IJ\a\x63\x2\x2JK\ap\x2\x2K\xE\x3\x2\x2\x2LM\an\x2");
		sb.Append("\x2MN\ap\x2\x2N\x10\x3\x2\x2\x2OP\an\x2\x2PQ\aq\x2\x2QR\ai\x2");
		sb.Append("\x2R\x12\x3\x2\x2\x2ST\a*\x2\x2T\x14\x3\x2\x2\x2UV\a+\x2\x2");
		sb.Append("V\x16\x3\x2\x2\x2WX\a-\x2\x2X\x18\x3\x2\x2\x2YZ\a/\x2\x2Z\x1A");
		sb.Append("\x3\x2\x2\x2[\\\a,\x2\x2\\\x1C\x3\x2\x2\x2]^\a\x31\x2\x2^\x1E");
		sb.Append("\x3\x2\x2\x2_`\a@\x2\x2` \x3\x2\x2\x2\x61\x62\a>\x2\x2\x62\"");
		sb.Append("\x3\x2\x2\x2\x63\x64\a?\x2\x2\x64$\x3\x2\x2\x2\x65\x66\a\x30");
		sb.Append("\x2\x2\x66&\x3\x2\x2\x2gh\t\x2\x2\x2h(\x3\x2\x2\x2ij\a`\x2\x2");
		sb.Append("j*\x3\x2\x2\x2km\t\x3\x2\x2lk\x3\x2\x2\x2m,\x3\x2\x2\x2no\x4");
		sb.Append("\x32;\x2o.\x3\x2\x2\x2pr\t\x4\x2\x2qp\x3\x2\x2\x2rs\x3\x2\x2");
		sb.Append("\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uv\b\x18\x2\x2");
		sb.Append("v\x30\x3\x2\x2\x2\x5\x2ls\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
