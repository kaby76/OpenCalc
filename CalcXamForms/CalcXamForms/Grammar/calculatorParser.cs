//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from calculator.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class calculatorParser : Parser {
	public const int
		Pp_directive=1, BYTE_ORDER_MARK=2, SINGLE_LINE_DOC_COMMENT=3, DELIMITED_DOC_COMMENT=4, 
		NEW_LINE=5, SINGLE_LINE_COMMENT=6, DELIMITED_COMMENT=7, WHITESPACE=8, 
		ABSTRACT=9, ADD=10, ALIAS=11, ARGLIST=12, AS=13, ASCENDING=14, BASE=15, 
		BOOL=16, BREAK=17, BY=18, BYTE=19, CASE=20, CATCH=21, CHAR=22, CHECKED=23, 
		CLASS=24, CONST=25, CONTINUE=26, DECIMAL=27, DEFAULT=28, DELEGATE=29, 
		DESCENDING=30, DO=31, DOUBLE=32, DYNAMIC=33, ELSE=34, ENUM=35, EQUALS=36, 
		EVENT=37, EXPLICIT=38, EXTERN=39, FALSE=40, FINALLY=41, FIXED=42, FLOAT=43, 
		FOR=44, FOREACH=45, FROM=46, GET=47, GOTO=48, GROUP=49, IF=50, IMPLICIT=51, 
		IN=52, INT=53, INTERFACE=54, INTERNAL=55, INTO=56, IS=57, JOIN=58, LET=59, 
		LOCK=60, LONG=61, NAMESPACE=62, NEW=63, NULL=64, OBJECT=65, ON=66, OPERATOR=67, 
		ORDERBY=68, OUT=69, OVERRIDE=70, PARAMS=71, PARTIAL=72, PRIVATE=73, PROTECTED=74, 
		PUBLIC=75, READONLY=76, REF=77, REMOVE=78, RETURN=79, SBYTE=80, SEALED=81, 
		SELECT=82, SET=83, SHORT=84, SIZEOF=85, STACKALLOC=86, STATIC=87, STRING=88, 
		STRUCT=89, SWITCH=90, THIS=91, THROW=92, TRUE=93, TRY=94, TYPEOF=95, UINT=96, 
		ULONG=97, UNCHECKED=98, UNSAFE=99, USHORT=100, USING=101, VIRTUAL=102, 
		VOID=103, VOLATILE=104, WHERE=105, WHILE=106, YIELD=107, IDENTIFIER=108, 
		INTEGER_LITERAL=109, LiteralAccess=110, REAL_LITERAL=111, CHARACTER_LITERAL=112, 
		STRING_LITERAL=113, OPEN_BRACE=114, CLOSE_BRACE=115, OPEN_BRACKET=116, 
		CLOSE_BRACKET=117, OPEN_PARENS=118, CLOSE_PARENS=119, DOT=120, COMMA=121, 
		COLON=122, SEMICOLON=123, PLUS=124, MINUS=125, STAR=126, DIV=127, PERCENT=128, 
		AMP=129, BITWISE_OR=130, CARET=131, BANG=132, TILDE=133, ASSIGNMENT=134, 
		LT=135, GT=136, INTERR=137, DOUBLE_COLON=138, OP_COALESCING=139, OP_INC=140, 
		OP_DEC=141, OP_AND=142, OP_OR=143, OP_PTR=144, OP_EQ=145, OP_NE=146, OP_LE=147, 
		OP_GE=148, OP_ADD_ASSIGNMENT=149, OP_SUB_ASSIGNMENT=150, OP_MULT_ASSIGNMENT=151, 
		OP_DIV_ASSIGNMENT=152, OP_MOD_ASSIGNMENT=153, OP_AND_ASSIGNMENT=154, OP_OR_ASSIGNMENT=155, 
		OP_XOR_ASSIGNMENT=156, OP_LEFT_SHIFT=157, OP_LEFT_SHIFT_ASSIGNMENT=158, 
		QUOTE=159, DOUBLE_QUOTE=160, BACK_SLASH=161, DOUBLE_BACK_SLASH=162, SHARP=163;
	public const int
		RULE_expressionResult = 0, RULE_namespace_name = 1, RULE_type_name = 2, 
		RULE_identifier = 3, RULE_namespace_or_type_name = 4, RULE_type_argument_list_opt = 5, 
		RULE_type = 6, RULE_base_type = 7, RULE_simple_type = 8, RULE_numeric_type = 9, 
		RULE_integral_type = 10, RULE_floating_point_type = 11, RULE_nullable_type = 12, 
		RULE_non_nullable_value_type = 13, RULE_reference_type = 14, RULE_class_type = 15, 
		RULE_interface_type = 16, RULE_delegate_type = 17, RULE_type_argument_list = 18, 
		RULE_type_arguments = 19, RULE_type_argument = 20, RULE_type_void = 21, 
		RULE_variable_reference = 22, RULE_argument_list = 23, RULE_argument = 24, 
		RULE_argument_name = 25, RULE_argument_value = 26, RULE_primary_expression = 27, 
		RULE_primary_expression_start = 28, RULE_bracket_expression = 29, RULE_simple_name = 30, 
		RULE_parenthesized_expression = 31, RULE_member_access = 32, RULE_predefined_type = 33, 
		RULE_expression_list = 34, RULE_this_access = 35, RULE_base_access = 36, 
		RULE_object_creation_expression = 37, RULE_object_or_collection_initializer = 38, 
		RULE_object_initializer = 39, RULE_member_initializer_list = 40, RULE_member_initializer = 41, 
		RULE_initializer_value = 42, RULE_collection_initializer = 43, RULE_element_initializer_list = 44, 
		RULE_element_initializer = 45, RULE_array_creation_expression = 46, RULE_delegate_creation_expression = 47, 
		RULE_anonymous_object_creation_expression = 48, RULE_anonymous_object_initializer = 49, 
		RULE_member_declarator_list = 50, RULE_member_declarator = 51, RULE_typeof_expression = 52, 
		RULE_unbound_type_name = 53, RULE_generic_dimension_specifier = 54, RULE_commas = 55, 
		RULE_checked_expression = 56, RULE_unchecked_expression = 57, RULE_default_value_expression = 58, 
		RULE_unary_expression = 59, RULE_scan_for_cast_generic_precedence = 60, 
		RULE_cast_disambiguation_token = 61, RULE_pre_increment_expression = 62, 
		RULE_pre_decrement_expression = 63, RULE_cast_expression = 64, RULE_multiplicative_expression = 65, 
		RULE_additive_expression = 66, RULE_shift_expression = 67, RULE_relational_expression = 68, 
		RULE_scan_for_shift_generic_precedence = 69, RULE_shift_disambiguation_token = 70, 
		RULE_isType = 71, RULE_is_disambiguation_token = 72, RULE_equality_expression = 73, 
		RULE_and_expression = 74, RULE_exclusive_or_expression = 75, RULE_inclusive_or_expression = 76, 
		RULE_conditional_and_expression = 77, RULE_conditional_or_expression = 78, 
		RULE_null_coalescing_expression = 79, RULE_conditional_expression = 80, 
		RULE_lambda_expression = 81, RULE_anonymous_method_expression = 82, RULE_anonymous_function_signature = 83, 
		RULE_explicit_anonymous_function_signature = 84, RULE_explicit_anonymous_function_parameter_list = 85, 
		RULE_explicit_anonymous_function_parameter = 86, RULE_anonymous_function_parameter_modifier = 87, 
		RULE_implicit_anonymous_function_signature = 88, RULE_implicit_anonymous_function_parameter_list = 89, 
		RULE_implicit_anonymous_function_parameter = 90, RULE_anonymous_function_body = 91, 
		RULE_query_expression = 92, RULE_from_clause = 93, RULE_query_body = 94, 
		RULE_query_body_clauses = 95, RULE_query_body_clause = 96, RULE_let_clause = 97, 
		RULE_where_clause = 98, RULE_join_clause = 99, RULE_join_into_clause = 100, 
		RULE_combined_join_clause = 101, RULE_orderby_clause = 102, RULE_orderings = 103, 
		RULE_ordering = 104, RULE_ordering_direction = 105, RULE_select_or_group_clause = 106, 
		RULE_select_clause = 107, RULE_group_clause = 108, RULE_query_continuation = 109, 
		RULE_assignment = 110, RULE_assignment_operator = 111, RULE_expression = 112, 
		RULE_non_assignment_expression = 113, RULE_constant_expression = 114, 
		RULE_boolean_expression = 115, RULE_statement = 116, RULE_embedded_statement = 117, 
		RULE_simple_embedded_statement = 118, RULE_block = 119, RULE_statement_list = 120, 
		RULE_empty_statement = 121, RULE_labeled_statement = 122, RULE_declaration_statement = 123, 
		RULE_local_variable_declaration = 124, RULE_local_variable_type = 125, 
		RULE_local_variable_declarators = 126, RULE_local_variable_declarator = 127, 
		RULE_local_variable_initializer = 128, RULE_local_constant_declaration = 129, 
		RULE_expression_statement = 130, RULE_statement_expression = 131, RULE_selection_statement = 132, 
		RULE_if_body = 133, RULE_if_statement = 134, RULE_switch_statement = 135, 
		RULE_switch_block = 136, RULE_switch_sections = 137, RULE_switch_section = 138, 
		RULE_switch_labels = 139, RULE_switch_label = 140, RULE_iteration_statement = 141, 
		RULE_while_statement = 142, RULE_do_statement = 143, RULE_for_statement = 144, 
		RULE_for_initializer = 145, RULE_for_condition = 146, RULE_for_iterator = 147, 
		RULE_statement_expression_list = 148, RULE_foreach_statement = 149, RULE_jump_statement = 150, 
		RULE_break_statement = 151, RULE_continue_statement = 152, RULE_goto_statement = 153, 
		RULE_return_statement = 154, RULE_throw_statement = 155, RULE_try_statement = 156, 
		RULE_catch_clauses = 157, RULE_specific_catch_clauses = 158, RULE_specific_catch_clause = 159, 
		RULE_general_catch_clause = 160, RULE_finally_clause = 161, RULE_checked_statement = 162, 
		RULE_unchecked_statement = 163, RULE_lock_statement = 164, RULE_using_statement = 165, 
		RULE_resource_acquisition = 166, RULE_yield_statement = 167, RULE_compilation_unit = 168, 
		RULE_namespace_declaration = 169, RULE_qualified_identifier = 170, RULE_namespace_body = 171, 
		RULE_extern_alias_directives = 172, RULE_extern_alias_directive = 173, 
		RULE_using_directives = 174, RULE_using_directive = 175, RULE_using_alias_directive = 176, 
		RULE_using_namespace_directive = 177, RULE_namespace_member_declarations = 178, 
		RULE_namespace_member_declaration = 179, RULE_type_declaration = 180, 
		RULE_qualified_alias_member = 181, RULE_class_declaration = 182, RULE_class_modifiers = 183, 
		RULE_class_modifier = 184, RULE_type_parameter_list = 185, RULE_type_parameters = 186, 
		RULE_type_parameter = 187, RULE_class_base = 188, RULE_interface_type_list = 189, 
		RULE_type_parameter_constraints_clauses = 190, RULE_type_parameter_constraints_clause = 191, 
		RULE_type_parameter_constraints = 192, RULE_primary_constraint = 193, 
		RULE_secondary_constraints = 194, RULE_constructor_constraint = 195, RULE_class_body = 196, 
		RULE_class_member_declarations = 197, RULE_class_member_declaration = 198, 
		RULE_all_member_modifiers = 199, RULE_all_member_modifier = 200, RULE_common_member_declaration = 201, 
		RULE_typed_member_declaration = 202, RULE_constant_declarators = 203, 
		RULE_constant_declarator = 204, RULE_variable_declarators = 205, RULE_variable_declarator = 206, 
		RULE_variable_initializer = 207, RULE_method_declaration = 208, RULE_method_header = 209, 
		RULE_method_modifiers = 210, RULE_method_modifier = 211, RULE_return_type = 212, 
		RULE_member_name = 213, RULE_method_body = 214, RULE_formal_parameter_list = 215, 
		RULE_fixed_parameters = 216, RULE_fixed_parameter = 217, RULE_default_argument = 218, 
		RULE_parameter_modifier = 219, RULE_parameter_array = 220, RULE_property_declaration = 221, 
		RULE_property_modifiers = 222, RULE_property_modifier = 223, RULE_accessor_declarations = 224, 
		RULE_get_accessor_declaration = 225, RULE_set_accessor_declaration = 226, 
		RULE_accessor_modifier = 227, RULE_accessor_body = 228, RULE_event_declaration = 229, 
		RULE_event_modifiers = 230, RULE_event_modifier = 231, RULE_event_accessor_declarations = 232, 
		RULE_add_accessor_declaration = 233, RULE_remove_accessor_declaration = 234, 
		RULE_indexer_declaration = 235, RULE_indexer_modifiers = 236, RULE_indexer_modifier = 237, 
		RULE_indexer_declarator = 238, RULE_operator_declaration = 239, RULE_operator_modifiers = 240, 
		RULE_operator_modifier = 241, RULE_operator_declarator = 242, RULE_unary_operator_declarator = 243, 
		RULE_overloadable_unary_operator = 244, RULE_binary_operator_declarator = 245, 
		RULE_overloadable_binary_operator = 246, RULE_overloadable_operator = 247, 
		RULE_conversion_operator_declarator = 248, RULE_operator_body = 249, RULE_constructor_declaration = 250, 
		RULE_constructor_modifiers = 251, RULE_constructor_modifier = 252, RULE_constructor_declarator = 253, 
		RULE_constructor_initializer = 254, RULE_constructor_body = 255, RULE_static_constructor_declaration = 256, 
		RULE_static_constructor_modifiers = 257, RULE_static_constructor_body = 258, 
		RULE_destructor_declaration = 259, RULE_destructor_body = 260, RULE_body = 261, 
		RULE_struct_declaration = 262, RULE_struct_modifiers = 263, RULE_struct_modifier = 264, 
		RULE_struct_interfaces = 265, RULE_struct_body = 266, RULE_struct_member_declarations = 267, 
		RULE_struct_member_declaration = 268, RULE_array_type = 269, RULE_non_array_type = 270, 
		RULE_rank_specifiers = 271, RULE_rank_specifier = 272, RULE_dim_separators = 273, 
		RULE_array_initializer = 274, RULE_variable_initializer_list = 275, RULE_interface_declaration = 276, 
		RULE_interface_modifiers = 277, RULE_interface_modifier = 278, RULE_variant_type_parameter_list = 279, 
		RULE_variant_type_parameters = 280, RULE_variance_annotation = 281, RULE_interface_base = 282, 
		RULE_interface_body = 283, RULE_interface_member_declarations = 284, RULE_interface_member_declaration = 285, 
		RULE_interface_method_declaration = 286, RULE_interface_property_declaration = 287, 
		RULE_interface_accessors = 288, RULE_interface_event_declaration = 289, 
		RULE_interface_indexer_declaration = 290, RULE_enum_declaration = 291, 
		RULE_enum_base = 292, RULE_enum_body = 293, RULE_enum_modifiers = 294, 
		RULE_enum_modifier = 295, RULE_enum_member_declarations = 296, RULE_enum_member_declaration = 297, 
		RULE_delegate_declaration = 298, RULE_delegate_modifiers = 299, RULE_delegate_modifier = 300, 
		RULE_global_attributes = 301, RULE_global_attribute_sections = 302, RULE_global_attribute_section = 303, 
		RULE_global_attribute_target_specifier = 304, RULE_global_attribute_target = 305, 
		RULE_attributes = 306, RULE_attribute_sections = 307, RULE_attribute_section = 308, 
		RULE_attribute_target_specifier = 309, RULE_attribute_target = 310, RULE_attribute_list = 311, 
		RULE_attribute = 312, RULE_attribute_name = 313, RULE_attribute_arguments = 314, 
		RULE_positional_argument_list = 315, RULE_positional_argument = 316, RULE_named_argument_list = 317, 
		RULE_named_argument = 318, RULE_attribute_argument_expression = 319, RULE_class_modifier_unsafe = 320, 
		RULE_struct_modifier_unsafe = 321, RULE_interface_modifier_unsafe = 322, 
		RULE_delegate_modifier_unsafe = 323, RULE_field_modifier_unsafe = 324, 
		RULE_method_modifier_unsafe = 325, RULE_property_modifier_unsafe = 326, 
		RULE_event_modifier_unsafe = 327, RULE_indexer_modifier_unsafe = 328, 
		RULE_operator_modifier_unsafe = 329, RULE_constructor_modifier_unsafe = 330, 
		RULE_destructor_declaration_unsafe = 331, RULE_static_constructor_modifiers_unsafe = 332, 
		RULE_embedded_statement_unsafe = 333, RULE_unsafe_statement = 334, RULE_type_unsafe = 335, 
		RULE_pointer_type = 336, RULE_unmanaged_type = 337, RULE_primary_no_array_creation_expression_unsafe = 338, 
		RULE_unary_expression_unsafe = 339, RULE_pointer_indirection_expression = 340, 
		RULE_addressof_expression = 341, RULE_sizeof_expression = 342, RULE_fixed_statement = 343, 
		RULE_fixed_pointer_declarators = 344, RULE_fixed_pointer_declarator = 345, 
		RULE_fixed_pointer_initializer = 346, RULE_struct_member_declaration_unsafe = 347, 
		RULE_fixed_size_buffer_declaration = 348, RULE_fixed_size_buffer_modifiers = 349, 
		RULE_fixed_size_buffer_modifier = 350, RULE_buffer_element_type = 351, 
		RULE_fixed_size_buffer_declarators = 352, RULE_fixed_size_buffer_declarator = 353, 
		RULE_local_variable_initializer_unsafe = 354, RULE_stackalloc_initializer = 355, 
		RULE_from_contextual_keyword = 356, RULE_let_contextual_keyword = 357, 
		RULE_where_contextual_keyword = 358, RULE_join_contextual_keyword = 359, 
		RULE_on_contextual_keyword = 360, RULE_equals_contextual_keyword = 361, 
		RULE_into_contextual_keyword = 362, RULE_orderby_contextual_keyword = 363, 
		RULE_ascending_contextual_keyword = 364, RULE_descending_contextual_keyword = 365, 
		RULE_select_contextual_keyword = 366, RULE_group_contextual_keyword = 367, 
		RULE_by_contextual_keyword = 368, RULE_partial_contextual_keyword = 369, 
		RULE_alias_contextual_keyword = 370, RULE_yield_contextual_keyword = 371, 
		RULE_get_contextual_keyword = 372, RULE_set_contextual_keyword = 373, 
		RULE_add_contextual_keyword = 374, RULE_remove_contextual_keyword = 375, 
		RULE_dynamic_contextual_keyword = 376, RULE_arglist = 377, RULE_right_arrow = 378, 
		RULE_right_shift = 379, RULE_right_shift_assignment = 380, RULE_literal = 381, 
		RULE_boolean_literal = 382, RULE_keyword = 383, RULE_class_definition = 384, 
		RULE_struct_definition = 385, RULE_interface_definition = 386, RULE_enum_definition = 387, 
		RULE_delegate_definition = 388, RULE_event_declaration2 = 389, RULE_field_declaration2 = 390, 
		RULE_property_declaration2 = 391, RULE_constant_declaration2 = 392, RULE_indexer_declaration2 = 393, 
		RULE_destructor_definition = 394, RULE_constructor_declaration2 = 395, 
		RULE_method_declaration2 = 396, RULE_method_member_name = 397, RULE_method_member_name2 = 398, 
		RULE_operator_declaration2 = 399, RULE_interface_method_declaration2 = 400, 
		RULE_interface_property_declaration2 = 401, RULE_interface_event_declaration2 = 402, 
		RULE_interface_indexer_declaration2 = 403, RULE_member_access2 = 404, 
		RULE_method_invocation2 = 405, RULE_object_creation_expression2 = 406;
	public static readonly string[] ruleNames = {
		"expressionResult", "namespace_name", "type_name", "identifier", "namespace_or_type_name", 
		"type_argument_list_opt", "type", "base_type", "simple_type", "numeric_type", 
		"integral_type", "floating_point_type", "nullable_type", "non_nullable_value_type", 
		"reference_type", "class_type", "interface_type", "delegate_type", "type_argument_list", 
		"type_arguments", "type_argument", "type_void", "variable_reference", 
		"argument_list", "argument", "argument_name", "argument_value", "primary_expression", 
		"primary_expression_start", "bracket_expression", "simple_name", "parenthesized_expression", 
		"member_access", "predefined_type", "expression_list", "this_access", 
		"base_access", "object_creation_expression", "object_or_collection_initializer", 
		"object_initializer", "member_initializer_list", "member_initializer", 
		"initializer_value", "collection_initializer", "element_initializer_list", 
		"element_initializer", "array_creation_expression", "delegate_creation_expression", 
		"anonymous_object_creation_expression", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "typeof_expression", "unbound_type_name", 
		"generic_dimension_specifier", "commas", "checked_expression", "unchecked_expression", 
		"default_value_expression", "unary_expression", "scan_for_cast_generic_precedence", 
		"cast_disambiguation_token", "pre_increment_expression", "pre_decrement_expression", 
		"cast_expression", "multiplicative_expression", "additive_expression", 
		"shift_expression", "relational_expression", "scan_for_shift_generic_precedence", 
		"shift_disambiguation_token", "isType", "is_disambiguation_token", "equality_expression", 
		"and_expression", "exclusive_or_expression", "inclusive_or_expression", 
		"conditional_and_expression", "conditional_or_expression", "null_coalescing_expression", 
		"conditional_expression", "lambda_expression", "anonymous_method_expression", 
		"anonymous_function_signature", "explicit_anonymous_function_signature", 
		"explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
		"anonymous_function_parameter_modifier", "implicit_anonymous_function_signature", 
		"implicit_anonymous_function_parameter_list", "implicit_anonymous_function_parameter", 
		"anonymous_function_body", "query_expression", "from_clause", "query_body", 
		"query_body_clauses", "query_body_clause", "let_clause", "where_clause", 
		"join_clause", "join_into_clause", "combined_join_clause", "orderby_clause", 
		"orderings", "ordering", "ordering_direction", "select_or_group_clause", 
		"select_clause", "group_clause", "query_continuation", "assignment", "assignment_operator", 
		"expression", "non_assignment_expression", "constant_expression", "boolean_expression", 
		"statement", "embedded_statement", "simple_embedded_statement", "block", 
		"statement_list", "empty_statement", "labeled_statement", "declaration_statement", 
		"local_variable_declaration", "local_variable_type", "local_variable_declarators", 
		"local_variable_declarator", "local_variable_initializer", "local_constant_declaration", 
		"expression_statement", "statement_expression", "selection_statement", 
		"if_body", "if_statement", "switch_statement", "switch_block", "switch_sections", 
		"switch_section", "switch_labels", "switch_label", "iteration_statement", 
		"while_statement", "do_statement", "for_statement", "for_initializer", 
		"for_condition", "for_iterator", "statement_expression_list", "foreach_statement", 
		"jump_statement", "break_statement", "continue_statement", "goto_statement", 
		"return_statement", "throw_statement", "try_statement", "catch_clauses", 
		"specific_catch_clauses", "specific_catch_clause", "general_catch_clause", 
		"finally_clause", "checked_statement", "unchecked_statement", "lock_statement", 
		"using_statement", "resource_acquisition", "yield_statement", "compilation_unit", 
		"namespace_declaration", "qualified_identifier", "namespace_body", "extern_alias_directives", 
		"extern_alias_directive", "using_directives", "using_directive", "using_alias_directive", 
		"using_namespace_directive", "namespace_member_declarations", "namespace_member_declaration", 
		"type_declaration", "qualified_alias_member", "class_declaration", "class_modifiers", 
		"class_modifier", "type_parameter_list", "type_parameters", "type_parameter", 
		"class_base", "interface_type_list", "type_parameter_constraints_clauses", 
		"type_parameter_constraints_clause", "type_parameter_constraints", "primary_constraint", 
		"secondary_constraints", "constructor_constraint", "class_body", "class_member_declarations", 
		"class_member_declaration", "all_member_modifiers", "all_member_modifier", 
		"common_member_declaration", "typed_member_declaration", "constant_declarators", 
		"constant_declarator", "variable_declarators", "variable_declarator", 
		"variable_initializer", "method_declaration", "method_header", "method_modifiers", 
		"method_modifier", "return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "default_argument", "parameter_modifier", 
		"parameter_array", "property_declaration", "property_modifiers", "property_modifier", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_declaration", "event_modifiers", 
		"event_modifier", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "indexer_declaration", "indexer_modifiers", 
		"indexer_modifier", "indexer_declarator", "operator_declaration", "operator_modifiers", 
		"operator_modifier", "operator_declarator", "unary_operator_declarator", 
		"overloadable_unary_operator", "binary_operator_declarator", "overloadable_binary_operator", 
		"overloadable_operator", "conversion_operator_declarator", "operator_body", 
		"constructor_declaration", "constructor_modifiers", "constructor_modifier", 
		"constructor_declarator", "constructor_initializer", "constructor_body", 
		"static_constructor_declaration", "static_constructor_modifiers", "static_constructor_body", 
		"destructor_declaration", "destructor_body", "body", "struct_declaration", 
		"struct_modifiers", "struct_modifier", "struct_interfaces", "struct_body", 
		"struct_member_declarations", "struct_member_declaration", "array_type", 
		"non_array_type", "rank_specifiers", "rank_specifier", "dim_separators", 
		"array_initializer", "variable_initializer_list", "interface_declaration", 
		"interface_modifiers", "interface_modifier", "variant_type_parameter_list", 
		"variant_type_parameters", "variance_annotation", "interface_base", "interface_body", 
		"interface_member_declarations", "interface_member_declaration", "interface_method_declaration", 
		"interface_property_declaration", "interface_accessors", "interface_event_declaration", 
		"interface_indexer_declaration", "enum_declaration", "enum_base", "enum_body", 
		"enum_modifiers", "enum_modifier", "enum_member_declarations", "enum_member_declaration", 
		"delegate_declaration", "delegate_modifiers", "delegate_modifier", "global_attributes", 
		"global_attribute_sections", "global_attribute_section", "global_attribute_target_specifier", 
		"global_attribute_target", "attributes", "attribute_sections", "attribute_section", 
		"attribute_target_specifier", "attribute_target", "attribute_list", "attribute", 
		"attribute_name", "attribute_arguments", "positional_argument_list", "positional_argument", 
		"named_argument_list", "named_argument", "attribute_argument_expression", 
		"class_modifier_unsafe", "struct_modifier_unsafe", "interface_modifier_unsafe", 
		"delegate_modifier_unsafe", "field_modifier_unsafe", "method_modifier_unsafe", 
		"property_modifier_unsafe", "event_modifier_unsafe", "indexer_modifier_unsafe", 
		"operator_modifier_unsafe", "constructor_modifier_unsafe", "destructor_declaration_unsafe", 
		"static_constructor_modifiers_unsafe", "embedded_statement_unsafe", "unsafe_statement", 
		"type_unsafe", "pointer_type", "unmanaged_type", "primary_no_array_creation_expression_unsafe", 
		"unary_expression_unsafe", "pointer_indirection_expression", "addressof_expression", 
		"sizeof_expression", "fixed_statement", "fixed_pointer_declarators", "fixed_pointer_declarator", 
		"fixed_pointer_initializer", "struct_member_declaration_unsafe", "fixed_size_buffer_declaration", 
		"fixed_size_buffer_modifiers", "fixed_size_buffer_modifier", "buffer_element_type", 
		"fixed_size_buffer_declarators", "fixed_size_buffer_declarator", "local_variable_initializer_unsafe", 
		"stackalloc_initializer", "from_contextual_keyword", "let_contextual_keyword", 
		"where_contextual_keyword", "join_contextual_keyword", "on_contextual_keyword", 
		"equals_contextual_keyword", "into_contextual_keyword", "orderby_contextual_keyword", 
		"ascending_contextual_keyword", "descending_contextual_keyword", "select_contextual_keyword", 
		"group_contextual_keyword", "by_contextual_keyword", "partial_contextual_keyword", 
		"alias_contextual_keyword", "yield_contextual_keyword", "get_contextual_keyword", 
		"set_contextual_keyword", "add_contextual_keyword", "remove_contextual_keyword", 
		"dynamic_contextual_keyword", "arglist", "right_arrow", "right_shift", 
		"right_shift_assignment", "literal", "boolean_literal", "keyword", "class_definition", 
		"struct_definition", "interface_definition", "enum_definition", "delegate_definition", 
		"event_declaration2", "field_declaration2", "property_declaration2", "constant_declaration2", 
		"indexer_declaration2", "destructor_definition", "constructor_declaration2", 
		"method_declaration2", "method_member_name", "method_member_name2", "operator_declaration2", 
		"interface_method_declaration2", "interface_property_declaration2", "interface_event_declaration2", 
		"interface_indexer_declaration2", "member_access2", "method_invocation2", 
		"object_creation_expression2"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\\u00EF\\u00BB\\u00BF'", null, null, null, null, null, null, 
		"'abstract'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
		"'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
		"'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", 
		"'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
		"'else'", "'enum'", "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
		"'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", 
		"'goto'", "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
		"'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
		"'namespace'", "'new'", "'null'", "'object'", "'on'", "'operator'", "'orderby'", 
		"'out'", "'override'", "'params'", "'partial'", "'private'", "'protected'", 
		"'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
		"'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", 
		"'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
		"'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", 
		"'using'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", 
		"'yield'", null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
		"'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<'", "'<<='", "'''", "'\"'", "'\\'", "'\\\\'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Pp_directive", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"NEW_LINE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACE", 
		"ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "BASE", "BOOL", 
		"BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", "CONST", 
		"CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", "DOUBLE", 
		"DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", "FALSE", 
		"FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", "GOTO", 
		"GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", "INTO", 
		"IS", "JOIN", "LET", "LOCK", "LONG", "NAMESPACE", "NEW", "NULL", "OBJECT", 
		"ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
		"PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", "RETURN", "SBYTE", 
		"SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", "STATIC", 
		"STRING", "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
		"UINT", "ULONG", "UNCHECKED", "UNSAFE", "USHORT", "USING", "VIRTUAL", 
		"VOID", "VOLATILE", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "INTEGER_LITERAL", 
		"LiteralAccess", "REAL_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "QUOTE", "DOUBLE_QUOTE", 
		"BACK_SLASH", "DOUBLE_BACK_SLASH", "SHARP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public calculatorParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExpressionResultContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(calculatorParser.Eof, 0); }
		public ExpressionResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionResult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExpressionResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExpressionResult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionResultContext expressionResult() {
		ExpressionResultContext _localctx = new ExpressionResultContext(Context, State);
		EnterRule(_localctx, 0, RULE_expressionResult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814; expression();
			State = 815; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(calculatorParser.IDENTIFIER, 0); }
		public ITerminalNode FROM() { return GetToken(calculatorParser.FROM, 0); }
		public ITerminalNode LET() { return GetToken(calculatorParser.LET, 0); }
		public ITerminalNode WHERE() { return GetToken(calculatorParser.WHERE, 0); }
		public ITerminalNode JOIN() { return GetToken(calculatorParser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(calculatorParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(calculatorParser.EQUALS, 0); }
		public ITerminalNode INTO() { return GetToken(calculatorParser.INTO, 0); }
		public ITerminalNode ORDERBY() { return GetToken(calculatorParser.ORDERBY, 0); }
		public ITerminalNode ASCENDING() { return GetToken(calculatorParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(calculatorParser.DESCENDING, 0); }
		public ITerminalNode SELECT() { return GetToken(calculatorParser.SELECT, 0); }
		public ITerminalNode GROUP() { return GetToken(calculatorParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(calculatorParser.BY, 0); }
		public ITerminalNode PARTIAL() { return GetToken(calculatorParser.PARTIAL, 0); }
		public ITerminalNode ALIAS() { return GetToken(calculatorParser.ALIAS, 0); }
		public ITerminalNode YIELD() { return GetToken(calculatorParser.YIELD, 0); }
		public ITerminalNode GET() { return GetToken(calculatorParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(calculatorParser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(calculatorParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(calculatorParser.REMOVE, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(calculatorParser.DYNAMIC, 0); }
		public ITerminalNode ARGLIST() { return GetToken(calculatorParser.ARGLIST, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_list_optContext[] type_argument_list_opt() {
			return GetRuleContexts<Type_argument_list_optContext>();
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return GetRuleContext<Type_argument_list_optContext>(i);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(calculatorParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(calculatorParser.DOT, i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespace_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 823; identifier();
				State = 824; type_argument_list_opt();
				}
				break;
			case 2:
				{
				State = 826; qualified_alias_member();
				}
				break;
			}
			State = 835;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 829; Match(DOT);
					State = 830; identifier();
					State = 831; type_argument_list_opt();
					}
					} 
				}
				State = 837;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_list_optContext : ParserRuleContext {
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Type_argument_list_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list_opt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_argument_list_opt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_argument_list_opt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_list_optContext type_argument_list_opt() {
		Type_argument_list_optContext _localctx = new Type_argument_list_optContext(Context, State);
		EnterRule(_localctx, 10, RULE_type_argument_list_opt);
		try {
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 838; type_argument_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public ITerminalNode[] INTERR() { return GetTokens(calculatorParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(calculatorParser.INTERR, i);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(calculatorParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(calculatorParser.STAR, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; base_type();
			State = 848;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 846;
					switch (TokenStream.La(1)) {
					case INTERR:
						{
						State = 843; Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 844; rank_specifier();
						}
						break;
					case STAR:
						{
						State = 845; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 850;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public ITerminalNode STAR() { return GetToken(calculatorParser.STAR, 0); }
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_base_type);
		try {
			State = 855;
			switch (TokenStream.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 851; simple_type();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 852; class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 853; Match(VOID);
				State = 854; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(calculatorParser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_simple_type);
		try {
			State = 859;
			switch (TokenStream.La(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 857; numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 858; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(calculatorParser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_numeric_type);
		try {
			State = 864;
			switch (TokenStream.La(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861; integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 862; floating_point_type();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 863; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode SBYTE() { return GetToken(calculatorParser.SBYTE, 0); }
		public ITerminalNode BYTE() { return GetToken(calculatorParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(calculatorParser.SHORT, 0); }
		public ITerminalNode USHORT() { return GetToken(calculatorParser.USHORT, 0); }
		public ITerminalNode INT() { return GetToken(calculatorParser.INT, 0); }
		public ITerminalNode UINT() { return GetToken(calculatorParser.UINT, 0); }
		public ITerminalNode LONG() { return GetToken(calculatorParser.LONG, 0); }
		public ITerminalNode ULONG() { return GetToken(calculatorParser.ULONG, 0); }
		public ITerminalNode CHAR() { return GetToken(calculatorParser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (SBYTE - 80)) | (1L << (SHORT - 80)) | (1L << (UINT - 80)) | (1L << (ULONG - 80)) | (1L << (USHORT - 80)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(calculatorParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(calculatorParser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			_la = TokenStream.La(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nullable_typeContext : ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return GetRuleContext<Non_nullable_value_typeContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(calculatorParser.INTERR, 0); }
		public Nullable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNullable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNullable_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nullable_typeContext nullable_type() {
		Nullable_typeContext _localctx = new Nullable_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_nullable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870; non_nullable_value_type();
			State = 871; Match(INTERR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_nullable_value_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(calculatorParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(calculatorParser.STAR, i);
		}
		public Non_nullable_value_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_nullable_value_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNon_nullable_value_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNon_nullable_value_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_nullable_value_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_nullable_value_typeContext non_nullable_value_type() {
		Non_nullable_value_typeContext _localctx = new Non_nullable_value_typeContext(Context, State);
		EnterRule(_localctx, 26, RULE_non_nullable_value_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873; base_type();
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPEN_BRACKET || _la==STAR) {
				{
				State = 876;
				switch (TokenStream.La(1)) {
				case OPEN_BRACKET:
					{
					State = 874; rank_specifier();
					}
					break;
				case STAR:
					{
					State = 875; Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 880;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(calculatorParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(calculatorParser.STAR, i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(calculatorParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(calculatorParser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public Reference_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterReference_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitReference_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_typeContext reference_type() {
		Reference_typeContext _localctx = new Reference_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_reference_type);
		int _la;
		try {
			int _alt;
			State = 936;
			switch (TokenStream.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 881; simple_type();
				State = 891;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 885;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							State = 882;
							_la = TokenStream.La(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
							    Consume();
							}
							}
							}
							State = 887;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 888; rank_specifier();
						}
						} 
					}
					State = 893;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 894;
					_la = TokenStream.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					State = 899;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 900; rank_specifier();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 902; class_type();
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (OPEN_BRACKET - 116)) | (1L << (STAR - 116)) | (1L << (INTERR - 116)))) != 0)) {
					{
					{
					State = 906;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==STAR || _la==INTERR) {
						{
						{
						State = 903;
						_la = TokenStream.La(1);
						if ( !(_la==STAR || _la==INTERR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						}
						State = 908;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 909; rank_specifier();
					}
					}
					State = 914;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 915; Match(VOID);
				State = 916; Match(STAR);
				State = 926;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 920;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							State = 917;
							_la = TokenStream.La(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
							    Consume();
							}
							}
							}
							State = 922;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 923; rank_specifier();
						}
						} 
					}
					State = 928;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 932;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 929;
					_la = TokenStream.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					State = 934;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 935; rank_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(calculatorParser.OBJECT, 0); }
		public Dynamic_contextual_keywordContext dynamic_contextual_keyword() {
			return GetRuleContext<Dynamic_contextual_keywordContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(calculatorParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_class_type);
		try {
			State = 942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 938; type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 939; Match(OBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 940; dynamic_contextual_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 941; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Interface_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_typeContext interface_type() {
		Interface_typeContext _localctx = new Interface_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_interface_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Delegate_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDelegate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDelegate_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_typeContext delegate_type() {
		Delegate_typeContext _localctx = new Delegate_typeContext(Context, State);
		EnterRule(_localctx, 34, RULE_delegate_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public Type_argumentsContext type_arguments() {
			return GetRuleContext<Type_argumentsContext>(0);
		}
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 36, RULE_type_argument_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948; Match(LT);
			State = 949; type_arguments();
			State = 950; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentsContext : ParserRuleContext {
		public Type_argumentContext[] type_argument() {
			return GetRuleContexts<Type_argumentContext>();
		}
		public Type_argumentContext type_argument(int i) {
			return GetRuleContext<Type_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Type_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentsContext type_arguments() {
		Type_argumentsContext _localctx = new Type_argumentsContext(Context, State);
		EnterRule(_localctx, 38, RULE_type_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; type_argument();
			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 953; Match(COMMA);
				State = 954; type_argument();
				}
				}
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Type_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentContext type_argument() {
		Type_argumentContext _localctx = new Type_argumentContext(Context, State);
		EnterRule(_localctx, 40, RULE_type_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_voidContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public Type_voidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_void; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_void(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_void(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_void(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_voidContext type_void() {
		Type_voidContext _localctx = new Type_voidContext(Context, State);
		EnterRule(_localctx, 42, RULE_type_void);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(VOID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_referenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_referenceContext variable_reference() {
		Variable_referenceContext _localctx = new Variable_referenceContext(Context, State);
		EnterRule(_localctx, 44, RULE_variable_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966; argument();
			State = 971;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 967; Match(COMMA);
				State = 968; argument();
				}
				}
				State = 973;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public Argument_valueContext argument_value() {
			return GetRuleContext<Argument_valueContext>(0);
		}
		public Argument_nameContext argument_name() {
			return GetRuleContext<Argument_nameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 48, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 974; argument_name();
				}
				break;
			}
			State = 977; argument_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Argument_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArgument_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArgument_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_nameContext argument_name() {
		Argument_nameContext _localctx = new Argument_nameContext(Context, State);
		EnterRule(_localctx, 50, RULE_argument_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; identifier();
			State = 980; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(calculatorParser.REF, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(calculatorParser.OUT, 0); }
		public Argument_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArgument_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArgument_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_valueContext argument_value() {
		Argument_valueContext _localctx = new Argument_valueContext(Context, State);
		EnterRule(_localctx, 52, RULE_argument_value);
		try {
			State = 987;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 982; expression();
				}
				break;
			case REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 983; Match(REF);
				State = 984; variable_reference();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 985; Match(OUT);
				State = 986; variable_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Member_access2Context[] member_access2() {
			return GetRuleContexts<Member_access2Context>();
		}
		public Member_access2Context member_access2(int i) {
			return GetRuleContext<Member_access2Context>(i);
		}
		public Method_invocation2Context[] method_invocation2() {
			return GetRuleContexts<Method_invocation2Context>();
		}
		public Method_invocation2Context method_invocation2(int i) {
			return GetRuleContext<Method_invocation2Context>(i);
		}
		public ITerminalNode[] OP_INC() { return GetTokens(calculatorParser.OP_INC); }
		public ITerminalNode OP_INC(int i) {
			return GetToken(calculatorParser.OP_INC, i);
		}
		public ITerminalNode[] OP_DEC() { return GetTokens(calculatorParser.OP_DEC); }
		public ITerminalNode OP_DEC(int i) {
			return GetToken(calculatorParser.OP_DEC, i);
		}
		public ITerminalNode[] OP_PTR() { return GetTokens(calculatorParser.OP_PTR); }
		public ITerminalNode OP_PTR(int i) {
			return GetToken(calculatorParser.OP_PTR, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_primary_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; _localctx.pe = primary_expression_start();
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 990; bracket_expression();
				}
				}
				State = 995;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1012;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1002;
					switch (TokenStream.La(1)) {
					case DOT:
						{
						State = 996; member_access2();
						}
						break;
					case ADD:
					case ALIAS:
					case ARGLIST:
					case ASCENDING:
					case BASE:
					case BOOL:
					case BY:
					case BYTE:
					case CHAR:
					case CHECKED:
					case DECIMAL:
					case DEFAULT:
					case DELEGATE:
					case DESCENDING:
					case DOUBLE:
					case DYNAMIC:
					case EQUALS:
					case FALSE:
					case FLOAT:
					case FROM:
					case GET:
					case GROUP:
					case INT:
					case INTO:
					case JOIN:
					case LET:
					case LONG:
					case NEW:
					case NULL:
					case OBJECT:
					case ON:
					case ORDERBY:
					case PARTIAL:
					case REMOVE:
					case SBYTE:
					case SELECT:
					case SET:
					case SHORT:
					case SIZEOF:
					case STRING:
					case THIS:
					case TRUE:
					case TYPEOF:
					case UINT:
					case ULONG:
					case UNCHECKED:
					case USHORT:
					case WHERE:
					case YIELD:
					case IDENTIFIER:
					case INTEGER_LITERAL:
					case REAL_LITERAL:
					case CHARACTER_LITERAL:
					case STRING_LITERAL:
					case OPEN_PARENS:
						{
						State = 997; method_invocation2();
						}
						break;
					case OP_INC:
						{
						State = 998; Match(OP_INC);
						}
						break;
					case OP_DEC:
						{
						State = 999; Match(OP_DEC);
						}
						break;
					case OP_PTR:
						{
						State = 1000; Match(OP_PTR);
						State = 1001; identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1007;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==OPEN_BRACKET) {
						{
						{
						State = 1004; bracket_expression();
						}
						}
						State = 1009;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					} 
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public This_accessContext this_access() {
			return GetRuleContext<This_accessContext>(0);
		}
		public Base_accessContext base_access() {
			return GetRuleContext<Base_accessContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Rank_specifierContext rank_specifier() {
			return GetRuleContext<Rank_specifierContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Object_creation_expression2Context object_creation_expression2() {
			return GetRuleContext<Object_creation_expression2Context>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Rank_specifiersContext rank_specifiers() {
			return GetRuleContext<Rank_specifiersContext>(0);
		}
		public Typeof_expressionContext typeof_expression() {
			return GetRuleContext<Typeof_expressionContext>(0);
		}
		public Checked_expressionContext checked_expression() {
			return GetRuleContext<Checked_expressionContext>(0);
		}
		public Unchecked_expressionContext unchecked_expression() {
			return GetRuleContext<Unchecked_expressionContext>(0);
		}
		public Default_value_expressionContext default_value_expression() {
			return GetRuleContext<Default_value_expressionContext>(0);
		}
		public Anonymous_method_expressionContext anonymous_method_expression() {
			return GetRuleContext<Anonymous_method_expressionContext>(0);
		}
		public Sizeof_expressionContext sizeof_expression() {
			return GetRuleContext<Sizeof_expressionContext>(0);
		}
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPrimary_expression_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPrimary_expression_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 56, RULE_primary_expression_start);
		int _la;
		try {
			State = 1052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1015; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1016; simple_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1017; parenthesized_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1018; predefined_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1019; qualified_alias_member();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1020; this_access();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1021; base_access();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1022; Match(NEW);
				State = 1044;
				switch (TokenStream.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1023; type();
					State = 1038;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						State = 1024; object_creation_expression2();
						}
						break;
					case 2:
						{
						State = 1025; object_or_collection_initializer();
						}
						break;
					case 3:
						{
						State = 1026; Match(OPEN_BRACKET);
						State = 1027; expression_list();
						State = 1028; Match(CLOSE_BRACKET);
						State = 1030;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
						case 1:
							{
							State = 1029; rank_specifiers();
							}
							break;
						}
						State = 1033;
						_la = TokenStream.La(1);
						if (_la==OPEN_BRACE) {
							{
							State = 1032; array_initializer();
							}
						}

						}
						break;
					case 4:
						{
						State = 1035; rank_specifiers();
						State = 1036; array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 1040; anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 1041; rank_specifier();
					State = 1042; array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1046; typeof_expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1047; checked_expression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1048; unchecked_expression();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1049; default_value_expression();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1050; anonymous_method_expression();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1051; sizeof_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_bracket_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054; Match(OPEN_BRACKET);
			State = 1055; expression_list();
			State = 1056; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(Context, State);
		EnterRule(_localctx, 60, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058; identifier();
			State = 1059; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061; Match(OPEN_PARENS);
			State = 1062; expression();
			State = 1063; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 64, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065; primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(calculatorParser.BOOL, 0); }
		public ITerminalNode BYTE() { return GetToken(calculatorParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(calculatorParser.CHAR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(calculatorParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(calculatorParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(calculatorParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(calculatorParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(calculatorParser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(calculatorParser.OBJECT, 0); }
		public ITerminalNode SBYTE() { return GetToken(calculatorParser.SBYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(calculatorParser.SHORT, 0); }
		public ITerminalNode STRING() { return GetToken(calculatorParser.STRING, 0); }
		public ITerminalNode UINT() { return GetToken(calculatorParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(calculatorParser.ULONG, 0); }
		public ITerminalNode USHORT() { return GetToken(calculatorParser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(Context, State);
		EnterRule(_localctx, 66, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (SBYTE - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 68, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069; expression();
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1070; Match(COMMA);
				State = 1071; expression();
				}
				}
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_accessContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public This_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterThis_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitThis_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_accessContext this_access() {
		This_accessContext _localctx = new This_accessContext(Context, State);
		EnterRule(_localctx, 70, RULE_this_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_accessContext : ParserRuleContext {
		public ITerminalNode BASE() { return GetToken(calculatorParser.BASE, 0); }
		public ITerminalNode DOT() { return GetToken(calculatorParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Base_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBase_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBase_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_accessContext base_access() {
		Base_accessContext _localctx = new Base_accessContext(Context, State);
		EnterRule(_localctx, 72, RULE_base_access);
		try {
			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1079; Match(BASE);
				State = 1080; Match(DOT);
				State = 1081; identifier();
				State = 1082; type_argument_list_opt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1084; Match(BASE);
				State = 1085; Match(OPEN_BRACKET);
				State = 1086; expression_list();
				State = 1087; Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091; Match(NEW);
			State = 1092; type();
			State = 1102;
			switch (TokenStream.La(1)) {
			case OPEN_PARENS:
				{
				State = 1093; Match(OPEN_PARENS);
				State = 1095;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 1094; argument_list();
					}
				}

				State = 1097; Match(CLOSE_PARENS);
				State = 1099;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACE) {
					{
					State = 1098; object_or_collection_initializer();
					}
				}

				}
				break;
			case OPEN_BRACE:
				{
				State = 1101; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_or_collection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 76, RULE_object_or_collection_initializer);
		try {
			State = 1106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1104; object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1105; collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 78, RULE_object_initializer);
		int _la;
		try {
			State = 1117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108; Match(OPEN_BRACE);
				State = 1109; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1110; Match(OPEN_BRACE);
				State = 1111; member_initializer_list();
				State = 1113;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 1112; Match(COMMA);
					}
				}

				State = 1115; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(Context, State);
		EnterRule(_localctx, 80, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119; member_initializer();
			State = 1124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1120; Match(COMMA);
					State = 1121; member_initializer();
					}
					} 
				}
				State = 1126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 82, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127; identifier();
			State = 1128; Match(ASSIGNMENT);
			State = 1129; initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(Context, State);
		EnterRule(_localctx, 84, RULE_initializer_value);
		try {
			State = 1133;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1131; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1132; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Element_initializer_listContext element_initializer_list() {
			return GetRuleContext<Element_initializer_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 86, RULE_collection_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135; Match(OPEN_BRACE);
			State = 1136; element_initializer_list();
			State = 1138;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1137; Match(COMMA);
				}
			}

			State = 1140; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializer_listContext : ParserRuleContext {
		public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Element_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterElement_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitElement_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializer_listContext element_initializer_list() {
		Element_initializer_listContext _localctx = new Element_initializer_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_element_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142; element_initializer();
			State = 1147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1143; Match(COMMA);
					State = 1144; element_initializer();
					}
					} 
				}
				State = 1149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 90, RULE_element_initializer);
		try {
			State = 1155;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1150; non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1151; Match(OPEN_BRACE);
				State = 1152; expression_list();
				State = 1153; Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Non_array_typeContext non_array_type() {
			return GetRuleContext<Non_array_typeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Rank_specifierContext rank_specifier() {
			return GetRuleContext<Rank_specifierContext>(0);
		}
		public Rank_specifiersContext rank_specifiers() {
			return GetRuleContext<Rank_specifiersContext>(0);
		}
		public Array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArray_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArray_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_creation_expressionContext array_creation_expression() {
		Array_creation_expressionContext _localctx = new Array_creation_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_array_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157; Match(NEW);
			State = 1174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 1158; array_type();
				State = 1159; array_initializer();
				}
				break;
			case 2:
				{
				State = 1161; non_array_type();
				State = 1162; Match(OPEN_BRACKET);
				State = 1163; expression_list();
				State = 1164; Match(CLOSE_BRACKET);
				State = 1166;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1165; rank_specifiers();
					}
				}

				State = 1169;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACE) {
					{
					State = 1168; array_initializer();
					}
				}

				}
				break;
			case 3:
				{
				State = 1171; rank_specifier();
				State = 1172; array_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public Delegate_typeContext delegate_type() {
			return GetRuleContext<Delegate_typeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Delegate_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDelegate_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDelegate_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_creation_expressionContext delegate_creation_expression() {
		Delegate_creation_expressionContext _localctx = new Delegate_creation_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_delegate_creation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176; Match(NEW);
			State = 1177; delegate_type();
			State = 1178; Match(OPEN_PARENS);
			State = 1179; expression();
			State = 1180; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Anonymous_object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_creation_expressionContext anonymous_object_creation_expression() {
		Anonymous_object_creation_expressionContext _localctx = new Anonymous_object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_anonymous_object_creation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182; Match(NEW);
			State = 1183; anonymous_object_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 98, RULE_anonymous_object_initializer);
		int _la;
		try {
			State = 1194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1185; Match(OPEN_BRACE);
				State = 1186; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1187; Match(OPEN_BRACE);
				State = 1188; member_declarator_list();
				State = 1190;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 1189; Match(COMMA);
					}
				}

				State = 1192; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(Context, State);
		EnterRule(_localctx, 100, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196; member_declarator();
			State = 1201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1197; Match(COMMA);
					State = 1198; member_declarator();
					}
					} 
				}
				State = 1203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(Context, State);
		EnterRule(_localctx, 102, RULE_member_declarator);
		try {
			State = 1209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1204; primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1205; identifier();
				State = 1206; Match(ASSIGNMENT);
				State = 1207; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typeof_expressionContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(calculatorParser.TYPEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public Typeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typeof_expressionContext typeof_expression() {
		Typeof_expressionContext _localctx = new Typeof_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211; Match(TYPEOF);
			State = 1212; Match(OPEN_PARENS);
			State = 1221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 1213; unbound_type_name();
				State = 1214; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				State = 1216; type();
				State = 1217; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				{
				State = 1219; Match(VOID);
				State = 1220; Match(CLOSE_PARENS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(calculatorParser.DOUBLE_COLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(calculatorParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(calculatorParser.DOT, i);
		}
		public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnbound_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(Context, State);
		EnterRule(_localctx, 106, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1223; identifier();
			State = 1232;
			switch (TokenStream.La(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 1225;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 1224; generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 1227; Match(DOUBLE_COLON);
				State = 1228; identifier();
				State = 1230;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 1229; generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1241;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 1234; Match(DOT);
				State = 1235; identifier();
				State = 1237;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 1236; generic_dimension_specifier();
					}
				}

				}
				}
				State = 1243;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public CommasContext commas() {
			return GetRuleContext<CommasContext>(0);
		}
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_dimension_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(Context, State);
		EnterRule(_localctx, 108, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244; Match(LT);
			State = 1246;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1245; commas();
				}
			}

			State = 1248; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommasContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public CommasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commas; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCommas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCommas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommasContext commas() {
		CommasContext _localctx = new CommasContext(Context, State);
		EnterRule(_localctx, 110, RULE_commas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; Match(COMMA);
			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1251; Match(COMMA);
				}
				}
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_expressionContext : ParserRuleContext {
		public ITerminalNode CHECKED() { return GetToken(calculatorParser.CHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Checked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterChecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitChecked_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecked_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checked_expressionContext checked_expression() {
		Checked_expressionContext _localctx = new Checked_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_checked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257; Match(CHECKED);
			State = 1258; Match(OPEN_PARENS);
			State = 1259; expression();
			State = 1260; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_expressionContext : ParserRuleContext {
		public ITerminalNode UNCHECKED() { return GetToken(calculatorParser.UNCHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Unchecked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnchecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnchecked_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnchecked_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_expressionContext unchecked_expression() {
		Unchecked_expressionContext _localctx = new Unchecked_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_unchecked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262; Match(UNCHECKED);
			State = 1263; Match(OPEN_PARENS);
			State = 1264; expression();
			State = 1265; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(calculatorParser.DEFAULT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Default_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDefault_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDefault_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_expressionContext default_value_expression() {
		Default_value_expressionContext _localctx = new Default_value_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_default_value_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267; Match(DEFAULT);
			State = 1268; Match(OPEN_PARENS);
			State = 1269; type();
			State = 1270; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(calculatorParser.PLUS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(calculatorParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(calculatorParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(calculatorParser.TILDE, 0); }
		public Pre_increment_expressionContext pre_increment_expression() {
			return GetRuleContext<Pre_increment_expressionContext>(0);
		}
		public Pre_decrement_expressionContext pre_decrement_expression() {
			return GetRuleContext<Pre_decrement_expressionContext>(0);
		}
		public Unary_expression_unsafeContext unary_expression_unsafe() {
			return GetRuleContext<Unary_expression_unsafeContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_unary_expression);
		try {
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1272; cast_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1273; primary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1274; Match(PLUS);
				State = 1275; unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1276; Match(MINUS);
				State = 1277; unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1278; Match(BANG);
				State = 1279; unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1280; Match(TILDE);
				State = 1281; unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1282; pre_increment_expression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1283; pre_decrement_expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1284; unary_expression_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_for_cast_generic_precedenceContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Cast_disambiguation_tokenContext cast_disambiguation_token() {
			return GetRuleContext<Cast_disambiguation_tokenContext>(0);
		}
		public Scan_for_cast_generic_precedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_for_cast_generic_precedence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterScan_for_cast_generic_precedence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitScan_for_cast_generic_precedence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScan_for_cast_generic_precedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scan_for_cast_generic_precedenceContext scan_for_cast_generic_precedence() {
		Scan_for_cast_generic_precedenceContext _localctx = new Scan_for_cast_generic_precedenceContext(Context, State);
		EnterRule(_localctx, 120, RULE_scan_for_cast_generic_precedence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287; Match(OPEN_PARENS);
			State = 1288; type();
			State = 1289; Match(CLOSE_PARENS);
			State = 1290; cast_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(calculatorParser.TILDE, 0); }
		public ITerminalNode BANG() { return GetToken(calculatorParser.BANG, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode BASE() { return GetToken(calculatorParser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(calculatorParser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(calculatorParser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(calculatorParser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(calculatorParser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(calculatorParser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(calculatorParser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(calculatorParser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(calculatorParser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(calculatorParser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(calculatorParser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(calculatorParser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(calculatorParser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(calculatorParser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(calculatorParser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(calculatorParser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(calculatorParser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(calculatorParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(calculatorParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(calculatorParser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public ITerminalNode FINALLY() { return GetToken(calculatorParser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(calculatorParser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(calculatorParser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(calculatorParser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(calculatorParser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(calculatorParser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(calculatorParser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(calculatorParser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ITerminalNode INT() { return GetToken(calculatorParser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(calculatorParser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode LOCK() { return GetToken(calculatorParser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(calculatorParser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(calculatorParser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode OBJECT() { return GetToken(calculatorParser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(calculatorParser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(calculatorParser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(calculatorParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(calculatorParser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(calculatorParser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(calculatorParser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(calculatorParser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(calculatorParser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(calculatorParser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(calculatorParser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(calculatorParser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(calculatorParser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(calculatorParser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(calculatorParser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(calculatorParser.THROW, 0); }
		public ITerminalNode TRY() { return GetToken(calculatorParser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(calculatorParser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(calculatorParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(calculatorParser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(calculatorParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(calculatorParser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(calculatorParser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(calculatorParser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(calculatorParser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(calculatorParser.WHILE, 0); }
		public Cast_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCast_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCast_disambiguation_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_disambiguation_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_disambiguation_tokenContext cast_disambiguation_token() {
		Cast_disambiguation_tokenContext _localctx = new Cast_disambiguation_tokenContext(Context, State);
		EnterRule(_localctx, 122, RULE_cast_disambiguation_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369;
			switch (TokenStream.La(1)) {
			case TILDE:
				{
				State = 1292; Match(TILDE);
				}
				break;
			case BANG:
				{
				State = 1293; Match(BANG);
				}
				break;
			case OPEN_PARENS:
				{
				State = 1294; Match(OPEN_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 1295; identifier();
				}
				break;
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				{
				State = 1296; literal();
				}
				break;
			case ABSTRACT:
				{
				State = 1297; Match(ABSTRACT);
				}
				break;
			case BASE:
				{
				State = 1298; Match(BASE);
				}
				break;
			case BOOL:
				{
				State = 1299; Match(BOOL);
				}
				break;
			case BREAK:
				{
				State = 1300; Match(BREAK);
				}
				break;
			case BYTE:
				{
				State = 1301; Match(BYTE);
				}
				break;
			case CASE:
				{
				State = 1302; Match(CASE);
				}
				break;
			case CATCH:
				{
				State = 1303; Match(CATCH);
				}
				break;
			case CHAR:
				{
				State = 1304; Match(CHAR);
				}
				break;
			case CHECKED:
				{
				State = 1305; Match(CHECKED);
				}
				break;
			case CLASS:
				{
				State = 1306; Match(CLASS);
				}
				break;
			case CONST:
				{
				State = 1307; Match(CONST);
				}
				break;
			case CONTINUE:
				{
				State = 1308; Match(CONTINUE);
				}
				break;
			case DECIMAL:
				{
				State = 1309; Match(DECIMAL);
				}
				break;
			case DEFAULT:
				{
				State = 1310; Match(DEFAULT);
				}
				break;
			case DELEGATE:
				{
				State = 1311; Match(DELEGATE);
				}
				break;
			case DO:
				{
				State = 1312; Match(DO);
				}
				break;
			case DOUBLE:
				{
				State = 1313; Match(DOUBLE);
				}
				break;
			case ELSE:
				{
				State = 1314; Match(ELSE);
				}
				break;
			case ENUM:
				{
				State = 1315; Match(ENUM);
				}
				break;
			case EVENT:
				{
				State = 1316; Match(EVENT);
				}
				break;
			case EXPLICIT:
				{
				State = 1317; Match(EXPLICIT);
				}
				break;
			case EXTERN:
				{
				State = 1318; Match(EXTERN);
				}
				break;
			case FINALLY:
				{
				State = 1319; Match(FINALLY);
				}
				break;
			case FIXED:
				{
				State = 1320; Match(FIXED);
				}
				break;
			case FLOAT:
				{
				State = 1321; Match(FLOAT);
				}
				break;
			case FOR:
				{
				State = 1322; Match(FOR);
				}
				break;
			case FOREACH:
				{
				State = 1323; Match(FOREACH);
				}
				break;
			case GOTO:
				{
				State = 1324; Match(GOTO);
				}
				break;
			case IF:
				{
				State = 1325; Match(IF);
				}
				break;
			case IMPLICIT:
				{
				State = 1326; Match(IMPLICIT);
				}
				break;
			case IN:
				{
				State = 1327; Match(IN);
				}
				break;
			case INT:
				{
				State = 1328; Match(INT);
				}
				break;
			case INTERFACE:
				{
				State = 1329; Match(INTERFACE);
				}
				break;
			case INTERNAL:
				{
				State = 1330; Match(INTERNAL);
				}
				break;
			case LOCK:
				{
				State = 1331; Match(LOCK);
				}
				break;
			case LONG:
				{
				State = 1332; Match(LONG);
				}
				break;
			case NAMESPACE:
				{
				State = 1333; Match(NAMESPACE);
				}
				break;
			case NEW:
				{
				State = 1334; Match(NEW);
				}
				break;
			case OBJECT:
				{
				State = 1335; Match(OBJECT);
				}
				break;
			case OPERATOR:
				{
				State = 1336; Match(OPERATOR);
				}
				break;
			case OUT:
				{
				State = 1337; Match(OUT);
				}
				break;
			case OVERRIDE:
				{
				State = 1338; Match(OVERRIDE);
				}
				break;
			case PARAMS:
				{
				State = 1339; Match(PARAMS);
				}
				break;
			case PRIVATE:
				{
				State = 1340; Match(PRIVATE);
				}
				break;
			case PROTECTED:
				{
				State = 1341; Match(PROTECTED);
				}
				break;
			case PUBLIC:
				{
				State = 1342; Match(PUBLIC);
				}
				break;
			case READONLY:
				{
				State = 1343; Match(READONLY);
				}
				break;
			case REF:
				{
				State = 1344; Match(REF);
				}
				break;
			case RETURN:
				{
				State = 1345; Match(RETURN);
				}
				break;
			case SBYTE:
				{
				State = 1346; Match(SBYTE);
				}
				break;
			case SEALED:
				{
				State = 1347; Match(SEALED);
				}
				break;
			case SHORT:
				{
				State = 1348; Match(SHORT);
				}
				break;
			case SIZEOF:
				{
				State = 1349; Match(SIZEOF);
				}
				break;
			case STACKALLOC:
				{
				State = 1350; Match(STACKALLOC);
				}
				break;
			case STATIC:
				{
				State = 1351; Match(STATIC);
				}
				break;
			case STRING:
				{
				State = 1352; Match(STRING);
				}
				break;
			case STRUCT:
				{
				State = 1353; Match(STRUCT);
				}
				break;
			case SWITCH:
				{
				State = 1354; Match(SWITCH);
				}
				break;
			case THIS:
				{
				State = 1355; Match(THIS);
				}
				break;
			case THROW:
				{
				State = 1356; Match(THROW);
				}
				break;
			case TRY:
				{
				State = 1357; Match(TRY);
				}
				break;
			case TYPEOF:
				{
				State = 1358; Match(TYPEOF);
				}
				break;
			case UINT:
				{
				State = 1359; Match(UINT);
				}
				break;
			case ULONG:
				{
				State = 1360; Match(ULONG);
				}
				break;
			case UNCHECKED:
				{
				State = 1361; Match(UNCHECKED);
				}
				break;
			case UNSAFE:
				{
				State = 1362; Match(UNSAFE);
				}
				break;
			case USHORT:
				{
				State = 1363; Match(USHORT);
				}
				break;
			case USING:
				{
				State = 1364; Match(USING);
				}
				break;
			case VIRTUAL:
				{
				State = 1365; Match(VIRTUAL);
				}
				break;
			case VOID:
				{
				State = 1366; Match(VOID);
				}
				break;
			case VOLATILE:
				{
				State = 1367; Match(VOLATILE);
				}
				break;
			case WHILE:
				{
				State = 1368; Match(WHILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_increment_expressionContext : ParserRuleContext {
		public ITerminalNode OP_INC() { return GetToken(calculatorParser.OP_INC, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_increment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_increment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPre_increment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPre_increment_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre_increment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pre_increment_expressionContext pre_increment_expression() {
		Pre_increment_expressionContext _localctx = new Pre_increment_expressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_pre_increment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371; Match(OP_INC);
			State = 1372; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_decrement_expressionContext : ParserRuleContext {
		public ITerminalNode OP_DEC() { return GetToken(calculatorParser.OP_DEC, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_decrement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_decrement_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPre_decrement_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPre_decrement_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre_decrement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pre_decrement_expressionContext pre_decrement_expression() {
		Pre_decrement_expressionContext _localctx = new Pre_decrement_expressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_pre_decrement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1374; Match(OP_DEC);
			State = 1375; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_cast_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377; Match(OPEN_PARENS);
			State = 1378; type();
			State = 1379; Match(CLOSE_PARENS);
			State = 1380; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(calculatorParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(calculatorParser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(calculatorParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(calculatorParser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(calculatorParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(calculatorParser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1382; unary_expression();
			State = 1391;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (STAR - 126)) | (1L << (DIV - 126)) | (1L << (PERCENT - 126)))) != 0)) {
				{
				State = 1389;
				switch (TokenStream.La(1)) {
				case STAR:
					{
					{
					State = 1383; Match(STAR);
					State = 1384; unary_expression();
					}
					}
					break;
				case DIV:
					{
					{
					State = 1385; Match(DIV);
					State = 1386; unary_expression();
					}
					}
					break;
				case PERCENT:
					{
					{
					State = 1387; Match(PERCENT);
					State = 1388; unary_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1393;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(calculatorParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(calculatorParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(calculatorParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(calculatorParser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394; multiplicative_expression();
			State = 1401;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				State = 1399;
				switch (TokenStream.La(1)) {
				case PLUS:
					{
					{
					State = 1395; Match(PLUS);
					State = 1396; multiplicative_expression();
					}
					}
					break;
				case MINUS:
					{
					{
					State = 1397; Match(MINUS);
					State = 1398; multiplicative_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(calculatorParser.OP_LEFT_SHIFT); }
		public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(calculatorParser.OP_LEFT_SHIFT, i);
		}
		public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404; additive_expression();
			State = 1412;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 1410;
					switch (TokenStream.La(1)) {
					case OP_LEFT_SHIFT:
						{
						{
						State = 1405; Match(OP_LEFT_SHIFT);
						State = 1406; additive_expression();
						}
						}
						break;
					case GT:
						{
						{
						State = 1407; right_shift();
						State = 1408; additive_expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(calculatorParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(calculatorParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(calculatorParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(calculatorParser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(calculatorParser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(calculatorParser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(calculatorParser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(calculatorParser.OP_GE, i);
		}
		public ITerminalNode[] IS() { return GetTokens(calculatorParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(calculatorParser.IS, i);
		}
		public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		public ITerminalNode[] AS() { return GetTokens(calculatorParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(calculatorParser.AS, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415; shift_expression();
			State = 1430;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AS || _la==IS || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (LT - 135)) | (1L << (GT - 135)) | (1L << (OP_LE - 135)) | (1L << (OP_GE - 135)))) != 0)) {
				{
				State = 1428;
				switch (TokenStream.La(1)) {
				case LT:
					{
					State = 1416; Match(LT);
					State = 1417; shift_expression();
					}
					break;
				case GT:
					{
					State = 1418; Match(GT);
					State = 1419; shift_expression();
					}
					break;
				case OP_LE:
					{
					State = 1420; Match(OP_LE);
					State = 1421; shift_expression();
					}
					break;
				case OP_GE:
					{
					State = 1422; Match(OP_GE);
					State = 1423; shift_expression();
					}
					break;
				case IS:
					{
					State = 1424; Match(IS);
					State = 1425; isType();
					}
					break;
				case AS:
					{
					State = 1426; Match(AS);
					State = 1427; type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_for_shift_generic_precedenceContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public Shift_disambiguation_tokenContext shift_disambiguation_token() {
			return GetRuleContext<Shift_disambiguation_tokenContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Scan_for_shift_generic_precedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_for_shift_generic_precedence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterScan_for_shift_generic_precedence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitScan_for_shift_generic_precedence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScan_for_shift_generic_precedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scan_for_shift_generic_precedenceContext scan_for_shift_generic_precedence() {
		Scan_for_shift_generic_precedenceContext _localctx = new Scan_for_shift_generic_precedenceContext(Context, State);
		EnterRule(_localctx, 138, RULE_scan_for_shift_generic_precedence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433; identifier();
			State = 1434; Match(LT);
			State = 1435; type();
			State = 1440;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1436; Match(COMMA);
				State = 1437; type();
				}
				}
				State = 1442;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1443; Match(GT);
			State = 1444; shift_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(calculatorParser.DOT, 0); }
		public ITerminalNode INTERR() { return GetToken(calculatorParser.INTERR, 0); }
		public ITerminalNode OP_EQ() { return GetToken(calculatorParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(calculatorParser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public Shift_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterShift_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitShift_disambiguation_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_disambiguation_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_disambiguation_tokenContext shift_disambiguation_token() {
		Shift_disambiguation_tokenContext _localctx = new Shift_disambiguation_tokenContext(Context, State);
		EnterRule(_localctx, 140, RULE_shift_disambiguation_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446;
			_la = TokenStream.La(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (CLOSE_BRACKET - 117)) | (1L << (OPEN_PARENS - 117)) | (1L << (CLOSE_PARENS - 117)) | (1L << (DOT - 117)) | (1L << (COMMA - 117)) | (1L << (COLON - 117)) | (1L << (SEMICOLON - 117)) | (1L << (GT - 117)) | (1L << (INTERR - 117)) | (1L << (OP_EQ - 117)) | (1L << (OP_NE - 117)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return GetRuleContext<Non_nullable_value_typeContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(calculatorParser.INTERR, 0); }
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_isType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448; non_nullable_value_type();
			State = 1450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 1449; Match(INTERR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode OP_AND() { return GetToken(calculatorParser.OP_AND, 0); }
		public ITerminalNode OP_OR() { return GetToken(calculatorParser.OP_OR, 0); }
		public ITerminalNode INTERR() { return GetToken(calculatorParser.INTERR, 0); }
		public Is_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIs_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIs_disambiguation_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_disambiguation_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_disambiguation_tokenContext is_disambiguation_token() {
		Is_disambiguation_tokenContext _localctx = new Is_disambiguation_tokenContext(Context, State);
		EnterRule(_localctx, 144, RULE_is_disambiguation_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			_la = TokenStream.La(1);
			if ( !(((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (CLOSE_PARENS - 119)) | (1L << (INTERR - 119)) | (1L << (OP_AND - 119)) | (1L << (OP_OR - 119)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(calculatorParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(calculatorParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(calculatorParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(calculatorParser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454; relational_expression();
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				State = 1459;
				switch (TokenStream.La(1)) {
				case OP_EQ:
					{
					{
					State = 1455; Match(OP_EQ);
					State = 1456; relational_expression();
					}
					}
					break;
				case OP_NE:
					{
					{
					State = 1457; Match(OP_NE);
					State = 1458; relational_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(calculatorParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(calculatorParser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; equality_expression();
			State = 1469;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AMP) {
				{
				{
				State = 1465; Match(AMP);
				State = 1466; equality_expression();
				}
				}
				State = 1471;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(calculatorParser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(calculatorParser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1472; and_expression();
			State = 1477;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CARET) {
				{
				{
				State = 1473; Match(CARET);
				State = 1474; and_expression();
				}
				}
				State = 1479;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(calculatorParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(calculatorParser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480; exclusive_or_expression();
			State = 1485;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 1481; Match(BITWISE_OR);
				State = 1482; exclusive_or_expression();
				}
				}
				State = 1487;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(calculatorParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(calculatorParser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 154, RULE_conditional_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488; inclusive_or_expression();
			State = 1493;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OP_AND) {
				{
				{
				State = 1489; Match(OP_AND);
				State = 1490; inclusive_or_expression();
				}
				}
				State = 1495;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(calculatorParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(calculatorParser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_conditional_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496; conditional_and_expression();
			State = 1501;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OP_OR) {
				{
				{
				State = 1497; Match(OP_OR);
				State = 1498; conditional_and_expression();
				}
				}
				State = 1503;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public ITerminalNode OP_COALESCING() { return GetToken(calculatorParser.OP_COALESCING, 0); }
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_coalescing_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_null_coalescing_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504; conditional_or_expression();
			State = 1507;
			_la = TokenStream.La(1);
			if (_la==OP_COALESCING) {
				{
				State = 1505; Match(OP_COALESCING);
				State = 1506; null_coalescing_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(calculatorParser.INTERR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_conditional_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509; null_coalescing_expression();
			State = 1515;
			_la = TokenStream.La(1);
			if (_la==INTERR) {
				{
				State = 1510; Match(INTERR);
				State = 1511; expression();
				State = 1512; Match(COLON);
				State = 1513; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517; anonymous_function_signature();
			State = 1518; right_arrow();
			State = 1519; anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_method_expressionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(calculatorParser.DELEGATE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() {
			return GetRuleContext<Explicit_anonymous_function_signatureContext>(0);
		}
		public Anonymous_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnonymous_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnonymous_method_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_method_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_method_expressionContext anonymous_method_expression() {
		Anonymous_method_expressionContext _localctx = new Anonymous_method_expressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_anonymous_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1521; Match(DELEGATE);
			State = 1523;
			_la = TokenStream.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 1522; explicit_anonymous_function_signature();
				}
			}

			State = 1525; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 166, RULE_anonymous_function_signature);
		try {
			State = 1538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1527; Match(OPEN_PARENS);
				State = 1528; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1529; Match(OPEN_PARENS);
				State = 1530; explicit_anonymous_function_parameter_list();
				State = 1531; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1533; Match(OPEN_PARENS);
				State = 1534; implicit_anonymous_function_parameter_list();
				State = 1535; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1537; implicit_anonymous_function_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Explicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() {
		Explicit_anonymous_function_signatureContext _localctx = new Explicit_anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 168, RULE_explicit_anonymous_function_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540; Match(OPEN_PARENS);
			State = 1542;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 1541; explicit_anonymous_function_parameter_list();
				}
			}

			State = 1544; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 170, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546; explicit_anonymous_function_parameter();
			State = 1551;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1547; Match(COMMA);
				State = 1548; explicit_anonymous_function_parameter();
				}
				}
				State = 1553;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() {
			return GetRuleContext<Anonymous_function_parameter_modifierContext>(0);
		}
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 172, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			_la = TokenStream.La(1);
			if (_la==OUT || _la==REF) {
				{
				State = 1554; anonymous_function_parameter_modifier();
				}
			}

			State = 1557; type();
			State = 1558; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(calculatorParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(calculatorParser.OUT, 0); }
		public Anonymous_function_parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_parameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_parameter_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_parameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() {
		Anonymous_function_parameter_modifierContext _localctx = new Anonymous_function_parameter_modifierContext(Context, State);
		EnterRule(_localctx, 174, RULE_anonymous_function_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560;
			_la = TokenStream.La(1);
			if ( !(_la==OUT || _la==REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(0);
		}
		public Implicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_signatureContext implicit_anonymous_function_signature() {
		Implicit_anonymous_function_signatureContext _localctx = new Implicit_anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 176, RULE_implicit_anonymous_function_signature);
		int _la;
		try {
			State = 1568;
			switch (TokenStream.La(1)) {
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1562; Match(OPEN_PARENS);
				State = 1564;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
					{
					State = 1563; implicit_anonymous_function_parameter_list();
					}
				}

				State = 1566; Match(CLOSE_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1567; implicit_anonymous_function_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Implicit_anonymous_function_parameterContext[] implicit_anonymous_function_parameter() {
			return GetRuleContexts<Implicit_anonymous_function_parameterContext>();
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 178, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570; implicit_anonymous_function_parameter();
			State = 1575;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1571; Match(COMMA);
				State = 1572; implicit_anonymous_function_parameter();
				}
				}
				State = 1577;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Implicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
		Implicit_anonymous_function_parameterContext _localctx = new Implicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 180, RULE_implicit_anonymous_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(Context, State);
		EnterRule(_localctx, 182, RULE_anonymous_function_body);
		try {
			State = 1582;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1580; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1581; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584; from_clause();
			State = 1585; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public From_contextual_keywordContext from_contextual_keyword() {
			return GetRuleContext<From_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 186, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587; from_contextual_keyword();
			State = 1589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1588; type();
				}
				break;
			}
			State = 1591; identifier();
			State = 1592; Match(IN);
			State = 1593; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		public Query_body_clausesContext query_body_clauses() {
			return GetRuleContext<Query_body_clausesContext>(0);
		}
		public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(Context, State);
		EnterRule(_localctx, 188, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1596;
			_la = TokenStream.La(1);
			if (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (FROM - 46)) | (1L << (JOIN - 46)) | (1L << (LET - 46)) | (1L << (ORDERBY - 46)) | (1L << (WHERE - 46)))) != 0)) {
				{
				State = 1595; query_body_clauses();
				}
			}

			State = 1598; select_or_group_clause();
			State = 1600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 1599; query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clausesContext : ParserRuleContext {
		public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		public Query_body_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterQuery_body_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitQuery_body_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clausesContext query_body_clauses() {
		Query_body_clausesContext _localctx = new Query_body_clausesContext(Context, State);
		EnterRule(_localctx, 190, RULE_query_body_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; query_body_clause();
			State = 1606;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (FROM - 46)) | (1L << (JOIN - 46)) | (1L << (LET - 46)) | (1L << (ORDERBY - 46)) | (1L << (WHERE - 46)))) != 0)) {
				{
				{
				State = 1603; query_body_clause();
				}
				}
				State = 1608;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(Context, State);
		EnterRule(_localctx, 192, RULE_query_body_clause);
		try {
			State = 1614;
			switch (TokenStream.La(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609; from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1610; let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1611; where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1612; combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1613; orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		public Let_contextual_keywordContext let_contextual_keyword() {
			return GetRuleContext<Let_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616; let_contextual_keyword();
			State = 1617; identifier();
			State = 1618; Match(ASSIGNMENT);
			State = 1619; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return GetRuleContext<Where_contextual_keywordContext>(0);
		}
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1621; where_contextual_keyword();
			State = 1622; boolean_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_join_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624; join_contextual_keyword();
			State = 1626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 1625; type();
				}
				break;
			}
			State = 1628; identifier();
			State = 1629; Match(IN);
			State = 1630; expression();
			State = 1631; on_contextual_keyword();
			State = 1632; expression();
			State = 1633; equals_contextual_keyword();
			State = 1634; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_into_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Join_into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_into_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterJoin_into_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitJoin_into_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_into_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_into_clauseContext join_into_clause() {
		Join_into_clauseContext _localctx = new Join_into_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_join_into_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1636; join_contextual_keyword();
			State = 1638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 1637; type();
				}
				break;
			}
			State = 1640; identifier();
			State = 1641; Match(IN);
			State = 1642; expression();
			State = 1643; on_contextual_keyword();
			State = 1644; expression();
			State = 1645; equals_contextual_keyword();
			State = 1646; expression();
			State = 1647; into_contextual_keyword();
			State = 1648; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombined_join_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; join_contextual_keyword();
			State = 1652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 1651; type();
				}
				break;
			}
			State = 1654; identifier();
			State = 1655; Match(IN);
			State = 1656; expression();
			State = 1657; on_contextual_keyword();
			State = 1658; expression();
			State = 1659; equals_contextual_keyword();
			State = 1660; expression();
			State = 1664;
			_la = TokenStream.La(1);
			if (_la==INTO) {
				{
				State = 1661; into_contextual_keyword();
				State = 1662; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		public Orderby_contextual_keywordContext orderby_contextual_keyword() {
			return GetRuleContext<Orderby_contextual_keywordContext>(0);
		}
		public OrderingsContext orderings() {
			return GetRuleContext<OrderingsContext>(0);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(Context, State);
		EnterRule(_localctx, 204, RULE_orderby_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666; orderby_contextual_keyword();
			State = 1667; orderings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingsContext : ParserRuleContext {
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public OrderingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderings; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOrderings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOrderings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingsContext orderings() {
		OrderingsContext _localctx = new OrderingsContext(Context, State);
		EnterRule(_localctx, 206, RULE_orderings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669; ordering();
			State = 1674;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1670; Match(COMMA);
				State = 1671; ordering();
				}
				}
				State = 1676;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ordering_directionContext ordering_direction() {
			return GetRuleContext<Ordering_directionContext>(0);
		}
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(Context, State);
		EnterRule(_localctx, 208, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677; expression();
			State = 1679;
			_la = TokenStream.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1678; ordering_direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_directionContext : ParserRuleContext {
		public Ascending_contextual_keywordContext ascending_contextual_keyword() {
			return GetRuleContext<Ascending_contextual_keywordContext>(0);
		}
		public Descending_contextual_keywordContext descending_contextual_keyword() {
			return GetRuleContext<Descending_contextual_keywordContext>(0);
		}
		public Ordering_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_direction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOrdering_direction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOrdering_direction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_direction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_directionContext ordering_direction() {
		Ordering_directionContext _localctx = new Ordering_directionContext(Context, State);
		EnterRule(_localctx, 210, RULE_ordering_direction);
		try {
			State = 1683;
			switch (TokenStream.La(1)) {
			case ASCENDING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1681; ascending_contextual_keyword();
				}
				break;
			case DESCENDING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1682; descending_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(Context, State);
		EnterRule(_localctx, 212, RULE_select_or_group_clause);
		try {
			State = 1687;
			switch (TokenStream.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1685; select_clause();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1686; group_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public Select_contextual_keywordContext select_contextual_keyword() {
			return GetRuleContext<Select_contextual_keywordContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 214, RULE_select_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1689; select_contextual_keyword();
			State = 1690; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		public Group_contextual_keywordContext group_contextual_keyword() {
			return GetRuleContext<Group_contextual_keywordContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public By_contextual_keywordContext by_contextual_keyword() {
			return GetRuleContext<By_contextual_keywordContext>(0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(Context, State);
		EnterRule(_localctx, 216, RULE_group_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692; group_contextual_keyword();
			State = 1693; expression();
			State = 1694; by_contextual_keyword();
			State = 1695; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_continuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(Context, State);
		EnterRule(_localctx, 218, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1697; into_contextual_keyword();
			State = 1698; identifier();
			State = 1699; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 220, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1701; unary_expression();
			State = 1702; assignment_operator();
			State = 1703; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(calculatorParser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(calculatorParser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(calculatorParser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(calculatorParser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(calculatorParser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(calculatorParser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(calculatorParser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(calculatorParser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(calculatorParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 222, RULE_assignment_operator);
		try {
			State = 1716;
			switch (TokenStream.La(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1705; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1706; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1707; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1708; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1709; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1710; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1711; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1712; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1713; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1714; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1715; right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_expression);
		try {
			State = 1720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1718; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1719; non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 226, RULE_non_assignment_expression);
		try {
			State = 1725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1722; lambda_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1723; query_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1724; conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 228, RULE_constant_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1727; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Boolean_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBoolean_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBoolean_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_expressionContext boolean_expression() {
		Boolean_expressionContext _localctx = new Boolean_expressionContext(Context, State);
		EnterRule(_localctx, 230, RULE_boolean_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1729; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Labeled_statementContext labeled_statement() {
			return GetRuleContext<Labeled_statementContext>(0);
		}
		public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_statement);
		try {
			State = 1734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1731; labeled_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1732; declaration_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1733; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 234, RULE_embedded_statement);
		try {
			State = 1738;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1736; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1737; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public Checked_statementContext checked_statement() {
			return GetRuleContext<Checked_statementContext>(0);
		}
		public Unchecked_statementContext unchecked_statement() {
			return GetRuleContext<Unchecked_statementContext>(0);
		}
		public Lock_statementContext lock_statement() {
			return GetRuleContext<Lock_statementContext>(0);
		}
		public Using_statementContext using_statement() {
			return GetRuleContext<Using_statementContext>(0);
		}
		public Yield_statementContext yield_statement() {
			return GetRuleContext<Yield_statementContext>(0);
		}
		public Embedded_statement_unsafeContext embedded_statement_unsafe() {
			return GetRuleContext<Embedded_statement_unsafeContext>(0);
		}
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSimple_embedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSimple_embedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_embedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(Context, State);
		EnterRule(_localctx, 236, RULE_simple_embedded_statement);
		try {
			State = 1752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1740; empty_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1741; expression_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1742; selection_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1743; iteration_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1744; jump_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1745; try_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1746; checked_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1747; unchecked_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1748; lock_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1749; using_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1750; yield_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1751; embedded_statement_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 238, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754; Match(OPEN_BRACE);
			State = 1756;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BREAK - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (CONST - 10)) | (1L << (CONTINUE - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DO - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FIXED - 10)) | (1L << (FLOAT - 10)) | (1L << (FOR - 10)) | (1L << (FOREACH - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GOTO - 10)) | (1L << (GROUP - 10)) | (1L << (IF - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LOCK - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (RETURN - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (SWITCH - 78)) | (1L << (THIS - 78)) | (1L << (THROW - 78)) | (1L << (TRUE - 78)) | (1L << (TRY - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (UNSAFE - 78)) | (1L << (USHORT - 78)) | (1L << (USING - 78)) | (1L << (VOID - 78)) | (1L << (WHERE - 78)) | (1L << (WHILE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_BRACE - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (SEMICOLON - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1755; statement_list();
				}
			}

			State = 1758; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 240, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1760; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1763;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 242, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_statementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Labeled_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLabeled_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLabeled_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeled_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_statementContext labeled_statement() {
		Labeled_statementContext _localctx = new Labeled_statementContext(Context, State);
		EnterRule(_localctx, 244, RULE_labeled_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767; identifier();
			State = 1768; Match(COLON);
			State = 1769; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDeclaration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDeclaration_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 246, RULE_declaration_statement);
		try {
			State = 1777;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1771; local_variable_declaration();
				State = 1772; Match(SEMICOLON);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1774; local_constant_declaration();
				State = 1775; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		public Local_variable_typeContext t;
		public Local_variable_declaratorsContext local_variable_declarators() {
			return GetRuleContext<Local_variable_declaratorsContext>(0);
		}
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 248, RULE_local_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779; _localctx.t = local_variable_type();
			State = 1780; local_variable_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 250, RULE_local_variable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorsContext : ParserRuleContext {
		public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Local_variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorsContext local_variable_declarators() {
		Local_variable_declaratorsContext _localctx = new Local_variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 252, RULE_local_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784; local_variable_declarator();
			State = 1789;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1785; Match(COMMA);
				State = 1786; local_variable_declarator();
				}
				}
				State = 1791;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(Context, State);
		EnterRule(_localctx, 254, RULE_local_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792; identifier();
			State = 1795;
			_la = TokenStream.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1793; Match(ASSIGNMENT);
				State = 1794; local_variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return GetRuleContext<Local_variable_initializer_unsafeContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(Context, State);
		EnterRule(_localctx, 256, RULE_local_variable_initializer);
		try {
			State = 1800;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1797; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1798; array_initializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1799; local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(calculatorParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(Context, State);
		EnterRule(_localctx, 258, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802; Match(CONST);
			State = 1803; type();
			State = 1804; constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		public Statement_expressionContext statement_expression() {
			return GetRuleContext<Statement_expressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 260, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1806; statement_expression();
			State = 1807; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatement_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatement_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expressionContext statement_expression() {
		Statement_expressionContext _localctx = new Statement_expressionContext(Context, State);
		EnterRule(_localctx, 262, RULE_statement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1809; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 264, RULE_selection_statement);
		try {
			State = 1813;
			switch (TokenStream.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1811; if_statement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1812; switch_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
	 
		public If_bodyContext() { }
		public virtual void CopyFrom(If_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfBodyBlockContext : If_bodyContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBodyBlockContext(If_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIfBodyBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIfBodyBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBodyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfBodySingleContext : If_bodyContext {
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public IfBodySingleContext(If_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIfBodySingle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIfBodySingle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBodySingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 266, RULE_if_body);
		try {
			State = 1817;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				_localctx = new IfBodyBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1815; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				_localctx = new IfBodySingleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1816; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(calculatorParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(calculatorParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 268, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1819; Match(IF);
			State = 1820; Match(OPEN_PARENS);
			State = 1821; boolean_expression();
			State = 1822; Match(CLOSE_PARENS);
			State = 1823; if_body();
			State = 1826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1824; Match(ELSE);
				State = 1825; if_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(calculatorParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Switch_blockContext switch_block() {
			return GetRuleContext<Switch_blockContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 270, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828; Match(SWITCH);
			State = 1829; Match(OPEN_PARENS);
			State = 1830; expression();
			State = 1831; Match(CLOSE_PARENS);
			State = 1832; switch_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_blockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Switch_sectionsContext switch_sections() {
			return GetRuleContext<Switch_sectionsContext>(0);
		}
		public Switch_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSwitch_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSwitch_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_blockContext switch_block() {
		Switch_blockContext _localctx = new Switch_blockContext(Context, State);
		EnterRule(_localctx, 272, RULE_switch_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834; Match(OPEN_BRACE);
			State = 1836;
			_la = TokenStream.La(1);
			if (_la==CASE || _la==DEFAULT) {
				{
				State = 1835; switch_sections();
				}
			}

			State = 1838; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionsContext : ParserRuleContext {
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public Switch_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSwitch_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSwitch_sections(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_sections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionsContext switch_sections() {
		Switch_sectionsContext _localctx = new Switch_sectionsContext(Context, State);
		EnterRule(_localctx, 274, RULE_switch_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840; switch_section();
			State = 1844;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1841; switch_section();
				}
				}
				State = 1846;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public Switch_labelsContext switch_labels() {
			return GetRuleContext<Switch_labelsContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 276, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847; switch_labels();
			State = 1848; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelsContext : ParserRuleContext {
		public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_labelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_labels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSwitch_labels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSwitch_labels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_labels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelsContext switch_labels() {
		Switch_labelsContext _localctx = new Switch_labelsContext(Context, State);
		EnterRule(_localctx, 278, RULE_switch_labels);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850; switch_label();
			State = 1854;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1851; switch_label();
					}
					} 
				}
				State = 1856;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(calculatorParser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public ITerminalNode DEFAULT() { return GetToken(calculatorParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 280, RULE_switch_label);
		try {
			State = 1863;
			switch (TokenStream.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1857; Match(CASE);
				State = 1858; constant_expression();
				State = 1859; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1861; Match(DEFAULT);
				State = 1862; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Do_statementContext do_statement() {
			return GetRuleContext<Do_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Foreach_statementContext foreach_statement() {
			return GetRuleContext<Foreach_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 282, RULE_iteration_statement);
		try {
			State = 1869;
			switch (TokenStream.La(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1865; while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1866; do_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1867; for_statement();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1868; foreach_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(calculatorParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 284, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871; Match(WHILE);
			State = 1872; Match(OPEN_PARENS);
			State = 1873; boolean_expression();
			State = 1874; Match(CLOSE_PARENS);
			State = 1875; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_statementContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(calculatorParser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(calculatorParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Do_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDo_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_statementContext do_statement() {
		Do_statementContext _localctx = new Do_statementContext(Context, State);
		EnterRule(_localctx, 286, RULE_do_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877; Match(DO);
			State = 1878; embedded_statement();
			State = 1879; Match(WHILE);
			State = 1880; Match(OPEN_PARENS);
			State = 1881; boolean_expression();
			State = 1882; Match(CLOSE_PARENS);
			State = 1883; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(calculatorParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(calculatorParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(calculatorParser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		public For_conditionContext for_condition() {
			return GetRuleContext<For_conditionContext>(0);
		}
		public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 288, RULE_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1885; Match(FOR);
			State = 1886; Match(OPEN_PARENS);
			State = 1888;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (VOID - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1887; for_initializer();
				}
			}

			State = 1890; Match(SEMICOLON);
			State = 1892;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1891; for_condition();
				}
			}

			State = 1894; Match(SEMICOLON);
			State = 1896;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1895; for_iterator();
				}
			}

			State = 1898; Match(CLOSE_PARENS);
			State = 1899; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(Context, State);
		EnterRule(_localctx, 290, RULE_for_initializer);
		try {
			State = 1903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1901; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1902; statement_expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_conditionContext : ParserRuleContext {
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public For_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFor_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFor_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_conditionContext for_condition() {
		For_conditionContext _localctx = new For_conditionContext(Context, State);
		EnterRule(_localctx, 292, RULE_for_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1905; boolean_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(Context, State);
		EnterRule(_localctx, 294, RULE_for_iterator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1907; statement_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expression_listContext : ParserRuleContext {
		public Statement_expressionContext[] statement_expression() {
			return GetRuleContexts<Statement_expressionContext>();
		}
		public Statement_expressionContext statement_expression(int i) {
			return GetRuleContext<Statement_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Statement_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatement_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatement_expression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expression_listContext statement_expression_list() {
		Statement_expression_listContext _localctx = new Statement_expression_listContext(Context, State);
		EnterRule(_localctx, 296, RULE_statement_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1909; statement_expression();
			State = 1914;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1910; Match(COMMA);
				State = 1911; statement_expression();
				}
				}
				State = 1916;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_statementContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(calculatorParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Foreach_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterForeach_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitForeach_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_statementContext foreach_statement() {
		Foreach_statementContext _localctx = new Foreach_statementContext(Context, State);
		EnterRule(_localctx, 298, RULE_foreach_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1917; Match(FOREACH);
			State = 1918; Match(OPEN_PARENS);
			State = 1919; local_variable_type();
			State = 1920; identifier();
			State = 1921; Match(IN);
			State = 1922; expression();
			State = 1923; Match(CLOSE_PARENS);
			State = 1924; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterJump_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitJump_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 300, RULE_jump_statement);
		try {
			State = 1931;
			switch (TokenStream.La(1)) {
			case BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1926; break_statement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1927; continue_statement();
				}
				break;
			case GOTO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1928; goto_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1929; return_statement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1930; throw_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(calculatorParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 302, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1933; Match(BREAK);
			State = 1934; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(calculatorParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 304, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1936; Match(CONTINUE);
			State = 1937; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(calculatorParser.GOTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public ITerminalNode CASE() { return GetToken(calculatorParser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(calculatorParser.DEFAULT, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(Context, State);
		EnterRule(_localctx, 306, RULE_goto_statement);
		try {
			State = 1951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1939; Match(GOTO);
				State = 1940; identifier();
				State = 1941; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1943; Match(GOTO);
				State = 1944; Match(CASE);
				State = 1945; constant_expression();
				State = 1946; Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1948; Match(GOTO);
				State = 1949; Match(DEFAULT);
				State = 1950; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(calculatorParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 308, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1953; Match(RETURN);
			State = 1955;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1954; expression();
				}
			}

			State = 1957; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(calculatorParser.THROW, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(Context, State);
		EnterRule(_localctx, 310, RULE_throw_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1959; Match(THROW);
			State = 1961;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1960; expression();
				}
			}

			State = 1963; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public ITerminalNode TRY() { return GetToken(calculatorParser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 312, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1965; Match(TRY);
			State = 1966; block();
			State = 1968;
			_la = TokenStream.La(1);
			if (_la==CATCH) {
				{
				State = 1967; catch_clauses();
				}
			}

			State = 1971;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 1970; finally_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		public Specific_catch_clausesContext specific_catch_clauses() {
			return GetRuleContext<Specific_catch_clausesContext>(0);
		}
		public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(Context, State);
		EnterRule(_localctx, 314, RULE_catch_clauses);
		int _la;
		try {
			State = 1978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1973; specific_catch_clauses();
				State = 1975;
				_la = TokenStream.La(1);
				if (_la==CATCH) {
					{
					State = 1974; general_catch_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1977; general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clausesContext : ParserRuleContext {
		public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		public Specific_catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clausesContext specific_catch_clauses() {
		Specific_catch_clausesContext _localctx = new Specific_catch_clausesContext(Context, State);
		EnterRule(_localctx, 316, RULE_specific_catch_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980; specific_catch_clause();
			State = 1984;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1981; specific_catch_clause();
					}
					} 
				}
				State = 1986;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(calculatorParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987; Match(CATCH);
			State = 1988; Match(OPEN_PARENS);
			State = 1989; class_type();
			State = 1991;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
				{
				State = 1990; identifier();
				}
			}

			State = 1993; Match(CLOSE_PARENS);
			State = 1994; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(calculatorParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(Context, State);
		EnterRule(_localctx, 320, RULE_general_catch_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996; Match(CATCH);
			State = 1997; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(calculatorParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(Context, State);
		EnterRule(_localctx, 322, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999; Match(FINALLY);
			State = 2000; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_statementContext : ParserRuleContext {
		public ITerminalNode CHECKED() { return GetToken(calculatorParser.CHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Checked_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterChecked_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitChecked_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecked_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checked_statementContext checked_statement() {
		Checked_statementContext _localctx = new Checked_statementContext(Context, State);
		EnterRule(_localctx, 324, RULE_checked_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2002; Match(CHECKED);
			State = 2003; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_statementContext : ParserRuleContext {
		public ITerminalNode UNCHECKED() { return GetToken(calculatorParser.UNCHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Unchecked_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnchecked_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnchecked_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnchecked_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_statementContext unchecked_statement() {
		Unchecked_statementContext _localctx = new Unchecked_statementContext(Context, State);
		EnterRule(_localctx, 326, RULE_unchecked_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2005; Match(UNCHECKED);
			State = 2006; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_statementContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(calculatorParser.LOCK, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Lock_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLock_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_statementContext lock_statement() {
		Lock_statementContext _localctx = new Lock_statementContext(Context, State);
		EnterRule(_localctx, 328, RULE_lock_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008; Match(LOCK);
			State = 2009; Match(OPEN_PARENS);
			State = 2010; expression();
			State = 2011; Match(CLOSE_PARENS);
			State = 2012; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_statementContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(calculatorParser.USING, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Using_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUsing_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUsing_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_statementContext using_statement() {
		Using_statementContext _localctx = new Using_statementContext(Context, State);
		EnterRule(_localctx, 330, RULE_using_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014; Match(USING);
			State = 2015; Match(OPEN_PARENS);
			State = 2016; resource_acquisition();
			State = 2017; Match(CLOSE_PARENS);
			State = 2018; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_acquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(Context, State);
		EnterRule(_localctx, 332, RULE_resource_acquisition);
		try {
			State = 2022;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2020; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2021; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_statementContext : ParserRuleContext {
		public Yield_contextual_keywordContext yield_contextual_keyword() {
			return GetRuleContext<Yield_contextual_keywordContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(calculatorParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public ITerminalNode BREAK() { return GetToken(calculatorParser.BREAK, 0); }
		public Yield_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterYield_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitYield_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_statementContext yield_statement() {
		Yield_statementContext _localctx = new Yield_statementContext(Context, State);
		EnterRule(_localctx, 334, RULE_yield_statement);
		try {
			State = 2033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2024; yield_contextual_keyword();
				State = 2025; Match(RETURN);
				State = 2026; expression();
				State = 2027; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2029; yield_contextual_keyword();
				State = 2030; Match(BREAK);
				State = 2031; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(calculatorParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(calculatorParser.BYTE_ORDER_MARK, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 336, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2036;
			_la = TokenStream.La(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 2035; Match(BYTE_ORDER_MARK);
				}
			}

			State = 2039;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 2038; extern_alias_directives();
				}
				break;
			}
			State = 2042;
			_la = TokenStream.La(1);
			if (_la==USING) {
				{
				State = 2041; using_directives();
				}
			}

			State = 2047;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2044; global_attribute_section();
					}
					} 
				}
				State = 2049;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			State = 2051;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0)) {
				{
				State = 2050; namespace_member_declarations();
				}
			}

			State = 2053; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		public ITerminalNode NAMESPACE() { return GetToken(calculatorParser.NAMESPACE, 0); }
		public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 338, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055; Match(NAMESPACE);
			State = 2056; _localctx.qi = qualified_identifier();
			State = 2057; namespace_body();
			State = 2059;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2058; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(calculatorParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(calculatorParser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(Context, State);
		EnterRule(_localctx, 340, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2061; identifier();
			State = 2066;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 2062; Match(DOT);
				State = 2063; identifier();
				}
				}
				State = 2068;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 342, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069; Match(OPEN_BRACE);
			State = 2071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 2070; extern_alias_directives();
				}
				break;
			}
			State = 2074;
			_la = TokenStream.La(1);
			if (_la==USING) {
				{
				State = 2073; using_directives();
				}
			}

			State = 2077;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0)) {
				{
				State = 2076; namespace_member_declarations();
				}
			}

			State = 2079; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(Context, State);
		EnterRule(_localctx, 344, RULE_extern_alias_directives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2081; extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2084;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Alias_contextual_keywordContext alias_contextual_keyword() {
			return GetRuleContext<Alias_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(Context, State);
		EnterRule(_localctx, 346, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086; Match(EXTERN);
			State = 2087; alias_contextual_keyword();
			State = 2088; identifier();
			State = 2089; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(Context, State);
		EnterRule(_localctx, 348, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2092;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2091; using_directive();
				}
				}
				State = 2094;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_alias_directiveContext using_alias_directive() {
			return GetRuleContext<Using_alias_directiveContext>(0);
		}
		public Using_namespace_directiveContext using_namespace_directive() {
			return GetRuleContext<Using_namespace_directiveContext>(0);
		}
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUsing_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUsing_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 350, RULE_using_directive);
		try {
			State = 2098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2096; using_alias_directive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2097; using_namespace_directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_alias_directiveContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(calculatorParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Using_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUsing_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUsing_alias_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_alias_directiveContext using_alias_directive() {
		Using_alias_directiveContext _localctx = new Using_alias_directiveContext(Context, State);
		EnterRule(_localctx, 352, RULE_using_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2100; Match(USING);
			State = 2101; identifier();
			State = 2102; Match(ASSIGNMENT);
			State = 2103; namespace_or_type_name();
			State = 2104; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_namespace_directiveContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(calculatorParser.USING, 0); }
		public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Using_namespace_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_namespace_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUsing_namespace_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUsing_namespace_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_namespace_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_namespace_directiveContext using_namespace_directive() {
		Using_namespace_directiveContext _localctx = new Using_namespace_directiveContext(Context, State);
		EnterRule(_localctx, 354, RULE_using_namespace_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106; Match(USING);
			State = 2107; namespace_name();
			State = 2108; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(Context, State);
		EnterRule(_localctx, 356, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2110; namespace_member_declaration();
				}
				}
				State = 2113;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 358, RULE_namespace_member_declaration);
		try {
			State = 2117;
			switch (TokenStream.La(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2115; namespace_declaration();
				}
				break;
			case ABSTRACT:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2116; type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 360, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2120;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2119; attributes();
				}
			}

			State = 2123;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)))) != 0)) {
				{
				State = 2122; all_member_modifiers();
				}
			}

			State = 2130;
			switch (TokenStream.La(1)) {
			case CLASS:
				{
				State = 2125; class_definition();
				}
				break;
			case STRUCT:
				{
				State = 2126; struct_definition();
				}
				break;
			case INTERFACE:
				{
				State = 2127; interface_definition();
				}
				break;
			case ENUM:
				{
				State = 2128; enum_definition();
				}
				break;
			case DELEGATE:
				{
				State = 2129; delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(calculatorParser.DOUBLE_COLON, 0); }
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_alias_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(Context, State);
		EnterRule(_localctx, 362, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132; identifier();
			State = 2133; Match(DOUBLE_COLON);
			State = 2134; identifier();
			State = 2135; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(calculatorParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Class_modifiersContext class_modifiers() {
			return GetRuleContext<Class_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 364, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2138;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2137; attributes();
				}
			}

			State = 2141;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (PUBLIC - 73)) | (1L << (SEALED - 73)) | (1L << (STATIC - 73)) | (1L << (UNSAFE - 73)))) != 0)) {
				{
				State = 2140; class_modifiers();
				}
			}

			State = 2144;
			_la = TokenStream.La(1);
			if (_la==PARTIAL) {
				{
				State = 2143; partial_contextual_keyword();
				}
			}

			State = 2146; Match(CLASS);
			State = 2147; identifier();
			State = 2149;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2148; type_parameter_list();
				}
			}

			State = 2152;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2151; class_base();
				}
			}

			State = 2155;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2154; type_parameter_constraints_clauses();
				}
			}

			State = 2157; class_body();
			State = 2159;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2158; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifiersContext : ParserRuleContext {
		public Class_modifierContext[] class_modifier() {
			return GetRuleContexts<Class_modifierContext>();
		}
		public Class_modifierContext class_modifier(int i) {
			return GetRuleContext<Class_modifierContext>(i);
		}
		public Class_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifiersContext class_modifiers() {
		Class_modifiersContext _localctx = new Class_modifiersContext(Context, State);
		EnterRule(_localctx, 366, RULE_class_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2161; class_modifier();
			State = 2165;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (PUBLIC - 73)) | (1L << (SEALED - 73)) | (1L << (STATIC - 73)) | (1L << (UNSAFE - 73)))) != 0)) {
				{
				{
				State = 2162; class_modifier();
				}
				}
				State = 2167;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public Class_modifier_unsafeContext class_modifier_unsafe() {
			return GetRuleContext<Class_modifier_unsafeContext>(0);
		}
		public Class_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifierContext class_modifier() {
		Class_modifierContext _localctx = new Class_modifierContext(Context, State);
		EnterRule(_localctx, 368, RULE_class_modifier);
		try {
			State = 2177;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2168; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2169; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2170; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2171; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2172; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2173; Match(ABSTRACT);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2174; Match(SEALED);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2175; Match(STATIC);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2176; class_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public Type_parametersContext type_parameters() {
			return GetRuleContext<Type_parametersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 370, RULE_type_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2179; Match(LT);
			State = 2180; type_parameters();
			State = 2181; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parametersContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Type_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parametersContext type_parameters() {
		Type_parametersContext _localctx = new Type_parametersContext(Context, State);
		EnterRule(_localctx, 372, RULE_type_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2183; attributes();
				}
			}

			State = 2186; type_parameter();
			State = 2194;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2187; Match(COMMA);
				State = 2189;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2188; attributes();
					}
				}

				State = 2191; type_parameter();
				}
				}
				State = 2196;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 374, RULE_type_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2197; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(Context, State);
		EnterRule(_localctx, 376, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199; Match(COLON);
			State = 2200; class_type();
			State = 2205;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2201; Match(COMMA);
				State = 2202; interface_type();
				}
				}
				State = 2207;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(Context, State);
		EnterRule(_localctx, 378, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2208; interface_type();
			State = 2213;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2209; Match(COMMA);
				State = 2210; interface_type();
				}
				}
				State = 2215;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(Context, State);
		EnterRule(_localctx, 380, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2216; type_parameter_constraints_clause();
			State = 2220;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==WHERE) {
				{
				{
				State = 2217; type_parameter_constraints_clause();
				}
				}
				State = 2222;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return GetRuleContext<Where_contextual_keywordContext>(0);
		}
		public Type_parameterContext type_parameter() {
			return GetRuleContext<Type_parameterContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(Context, State);
		EnterRule(_localctx, 382, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2223; where_contextual_keyword();
			State = 2224; type_parameter();
			State = 2225; Match(COLON);
			State = 2226; type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(Context, State);
		EnterRule(_localctx, 384, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 2238;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2228; constructor_constraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2229; primary_constraint();
				State = 2232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
				case 1:
					{
					State = 2230; Match(COMMA);
					State = 2231; secondary_constraints();
					}
					break;
				}
				State = 2236;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2234; Match(COMMA);
					State = 2235; constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(calculatorParser.CLASS, 0); }
		public ITerminalNode STRUCT() { return GetToken(calculatorParser.STRUCT, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(Context, State);
		EnterRule(_localctx, 386, RULE_primary_constraint);
		try {
			State = 2243;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2240; class_type();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2241; Match(CLASS);
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2242; Match(STRUCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(Context, State);
		EnterRule(_localctx, 388, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2245; interface_type();
			State = 2250;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2246; Match(COMMA);
					State = 2247; interface_type();
					}
					} 
				}
				State = 2252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(Context, State);
		EnterRule(_localctx, 390, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2253; Match(NEW);
			State = 2254; Match(OPEN_PARENS);
			State = 2255; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 392, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2257; Match(OPEN_BRACE);
			State = 2259;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE) {
				{
				State = 2258; class_member_declarations();
				}
			}

			State = 2261; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(Context, State);
		EnterRule(_localctx, 394, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2264;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2263; class_member_declaration();
				}
				}
				State = 2266;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode TILDE() { return GetToken(calculatorParser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public ITerminalNode Pp_directive() { return GetToken(calculatorParser.Pp_directive, 0); }
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 396, RULE_class_member_declaration);
		int _la;
		try {
			State = 2284;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case OBJECT:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REMOVE:
			case SBYTE:
			case SEALED:
			case SELECT:
			case SET:
			case SHORT:
			case STATIC:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNSAFE:
			case USHORT:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_BRACKET:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2269;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2268; attributes();
					}
				}

				State = 2272;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
				case 1:
					{
					State = 2271; all_member_modifiers();
					}
					break;
				}
				State = 2281;
				switch (TokenStream.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CLASS:
				case CONST:
				case DECIMAL:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case ENUM:
				case EQUALS:
				case EVENT:
				case EXPLICIT:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case IMPLICIT:
				case INT:
				case INTERFACE:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case STRUCT:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2274; common_member_declaration();
					}
					break;
				case TILDE:
					{
					State = 2275; Match(TILDE);
					State = 2276; identifier();
					State = 2277; Match(OPEN_PARENS);
					State = 2278; Match(CLOSE_PARENS);
					State = 2279; destructor_body();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Pp_directive:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2283; Match(Pp_directive);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		public All_member_modifierContext m;
		public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(Context, State);
		EnterRule(_localctx, 398, RULE_all_member_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2286; _localctx.m = all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(calculatorParser.READONLY, 0); }
		public ITerminalNode VOLATILE() { return GetToken(calculatorParser.VOLATILE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(calculatorParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(calculatorParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(Context, State);
		EnterRule(_localctx, 400, RULE_all_member_modifier);
		try {
			State = 2306;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2291; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2292; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2293; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2294; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2295; Match(PRIVATE);
				}
				break;
			case READONLY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2296; Match(READONLY);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2297; Match(VOLATILE);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2298; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2299; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2300; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2301; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2302; Match(STATIC);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2303; Match(UNSAFE);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2304; Match(EXTERN);
				}
				break;
			case PARTIAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2305; partial_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		public Constant_declaration2Context constant_declaration2() {
			return GetRuleContext<Constant_declaration2Context>(0);
		}
		public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		public Event_declaration2Context event_declaration2() {
			return GetRuleContext<Event_declaration2Context>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public Constructor_declaration2Context constructor_declaration2() {
			return GetRuleContext<Constructor_declaration2Context>(0);
		}
		public Type_voidContext type_void() {
			return GetRuleContext<Type_voidContext>(0);
		}
		public Method_declaration2Context method_declaration2() {
			return GetRuleContext<Method_declaration2Context>(0);
		}
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(Context, State);
		EnterRule(_localctx, 402, RULE_common_member_declaration);
		try {
			State = 2323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2308; constant_declaration2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2309; typed_member_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2310; event_declaration2();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2311; conversion_operator_declarator();
				State = 2312; operator_body();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2314; constructor_declaration2();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2315; type_void();
				State = 2316; method_declaration2();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2318; class_definition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2319; struct_definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2320; interface_definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2321; enum_definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2322; delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(calculatorParser.DOT, 0); }
		public Indexer_declaration2Context indexer_declaration2() {
			return GetRuleContext<Indexer_declaration2Context>(0);
		}
		public Method_declaration2Context method_declaration2() {
			return GetRuleContext<Method_declaration2Context>(0);
		}
		public Property_declaration2Context property_declaration2() {
			return GetRuleContext<Property_declaration2Context>(0);
		}
		public Operator_declaration2Context operator_declaration2() {
			return GetRuleContext<Operator_declaration2Context>(0);
		}
		public Field_declaration2Context field_declaration2() {
			return GetRuleContext<Field_declaration2Context>(0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(Context, State);
		EnterRule(_localctx, 404, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325; type();
			State = 2335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 2326; interface_type();
				State = 2327; Match(DOT);
				State = 2328; indexer_declaration2();
				}
				break;
			case 2:
				{
				State = 2330; method_declaration2();
				}
				break;
			case 3:
				{
				State = 2331; property_declaration2();
				}
				break;
			case 4:
				{
				State = 2332; indexer_declaration2();
				}
				break;
			case 5:
				{
				State = 2333; operator_declaration2();
				}
				break;
			case 6:
				{
				State = 2334; field_declaration2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(Context, State);
		EnterRule(_localctx, 406, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2337; constant_declarator();
			State = 2342;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2338; Match(COMMA);
				State = 2339; constant_declarator();
				}
				}
				State = 2344;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(Context, State);
		EnterRule(_localctx, 408, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345; identifier();
			State = 2346; Match(ASSIGNMENT);
			State = 2347; constant_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 410, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349; variable_declarator();
			State = 2354;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2350; Match(COMMA);
				State = 2351; variable_declarator();
				}
				}
				State = 2356;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 412, RULE_variable_declarator);
		try {
			State = 2362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2357; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2358; identifier();
				State = 2359; Match(ASSIGNMENT);
				State = 2360; variable_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 414, RULE_variable_initializer);
		try {
			State = 2366;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2364; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2365; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_headerContext method_header() {
			return GetRuleContext<Method_headerContext>(0);
		}
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 416, RULE_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2368; method_header();
			State = 2369; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_headerContext : ParserRuleContext {
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_header(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_header(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_headerContext method_header() {
		Method_headerContext _localctx = new Method_headerContext(Context, State);
		EnterRule(_localctx, 418, RULE_method_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2372;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2371; attributes();
				}
			}

			State = 2375;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2374; method_modifiers();
				}
			}

			State = 2378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2377; partial_contextual_keyword();
				}
				break;
			}
			State = 2380; return_type();
			State = 2381; member_name();
			State = 2383;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2382; type_parameter_list();
				}
			}

			State = 2385; Match(OPEN_PARENS);
			State = 2387;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2386; formal_parameter_list();
				}
			}

			State = 2389; Match(CLOSE_PARENS);
			State = 2391;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2390; type_parameter_constraints_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifiersContext : ParserRuleContext {
		public Method_modifierContext[] method_modifier() {
			return GetRuleContexts<Method_modifierContext>();
		}
		public Method_modifierContext method_modifier(int i) {
			return GetRuleContext<Method_modifierContext>(i);
		}
		public Method_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifiersContext method_modifiers() {
		Method_modifiersContext _localctx = new Method_modifiersContext(Context, State);
		EnterRule(_localctx, 420, RULE_method_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2394;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2393; method_modifier();
				}
				}
				State = 2396;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(calculatorParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(calculatorParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Method_modifier_unsafeContext method_modifier_unsafe() {
			return GetRuleContext<Method_modifier_unsafeContext>(0);
		}
		public Method_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifierContext method_modifier() {
		Method_modifierContext _localctx = new Method_modifierContext(Context, State);
		EnterRule(_localctx, 422, RULE_method_modifier);
		try {
			State = 2410;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2398; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2399; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2400; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2401; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2402; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2403; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2404; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2405; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2406; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2407; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2408; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2409; method_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 424, RULE_return_type);
		try {
			State = 2414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2412; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2413; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 426, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2416; interface_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 428, RULE_method_body);
		try {
			State = 2420;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2418; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2419; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 430, RULE_formal_parameter_list);
		int _la;
		try {
			State = 2428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2422; parameter_array();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2423; fixed_parameters();
				State = 2426;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2424; Match(COMMA);
					State = 2425; parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 432, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2430; fixed_parameter();
			State = 2435;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2431; Match(COMMA);
					State = 2432; fixed_parameter();
					}
					} 
				}
				State = 2437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public Default_argumentContext default_argument() {
			return GetRuleContext<Default_argumentContext>(0);
		}
		public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 434, RULE_fixed_parameter);
		int _la;
		try {
			State = 2450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2439;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2438; attributes();
					}
				}

				State = 2442;
				_la = TokenStream.La(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OUT - 69)) | (1L << (REF - 69)) | (1L << (THIS - 69)))) != 0)) {
					{
					State = 2441; parameter_modifier();
					}
				}

				State = 2444; type();
				State = 2445; identifier();
				State = 2447;
				_la = TokenStream.La(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2446; default_argument();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2449; arglist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_argumentContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDefault_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDefault_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_argumentContext default_argument() {
		Default_argumentContext _localctx = new Default_argumentContext(Context, State);
		EnterRule(_localctx, 436, RULE_default_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2452; Match(ASSIGNMENT);
			State = 2453; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(calculatorParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(calculatorParser.OUT, 0); }
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 438, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2455;
			_la = TokenStream.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OUT - 69)) | (1L << (REF - 69)) | (1L << (THIS - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(calculatorParser.PARAMS, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(Context, State);
		EnterRule(_localctx, 440, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2458;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2457; attributes();
				}
			}

			State = 2460; Match(PARAMS);
			State = 2461; array_type();
			State = 2462; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Property_modifiersContext property_modifiers() {
			return GetRuleContext<Property_modifiersContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 442, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2464; attributes();
				}
			}

			State = 2468;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2467; property_modifiers();
				}
			}

			State = 2470; type();
			State = 2471; member_name();
			State = 2472; Match(OPEN_BRACE);
			State = 2473; accessor_declarations();
			State = 2474; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifiersContext : ParserRuleContext {
		public Property_modifierContext[] property_modifier() {
			return GetRuleContexts<Property_modifierContext>();
		}
		public Property_modifierContext property_modifier(int i) {
			return GetRuleContext<Property_modifierContext>(i);
		}
		public Property_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterProperty_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitProperty_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifiersContext property_modifiers() {
		Property_modifiersContext _localctx = new Property_modifiersContext(Context, State);
		EnterRule(_localctx, 444, RULE_property_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2477;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2476; property_modifier();
				}
				}
				State = 2479;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(calculatorParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(calculatorParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Property_modifier_unsafeContext property_modifier_unsafe() {
			return GetRuleContext<Property_modifier_unsafeContext>(0);
		}
		public Property_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterProperty_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitProperty_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifierContext property_modifier() {
		Property_modifierContext _localctx = new Property_modifierContext(Context, State);
		EnterRule(_localctx, 446, RULE_property_modifier);
		try {
			State = 2493;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2481; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2482; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2483; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2484; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2485; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2486; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2487; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2488; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2489; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2490; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2491; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2492; property_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 448, RULE_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2495; _localctx.attrs = attributes();
				}
			}

			State = 2499;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2498; _localctx.mods = accessor_modifier();
				}
			}

			State = 2511;
			switch (TokenStream.La(1)) {
			case GET:
				{
				State = 2501; get_contextual_keyword();
				State = 2502; accessor_body();
				State = 2504;
				_la = TokenStream.La(1);
				if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (SET - 55)) | (1L << (OPEN_BRACKET - 55)))) != 0)) {
					{
					State = 2503; set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 2506; set_contextual_keyword();
				State = 2507; accessor_body();
				State = 2509;
				_la = TokenStream.La(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
					{
					State = 2508; get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 450, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2514;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2513; attributes();
				}
			}

			State = 2517;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2516; accessor_modifier();
				}
			}

			State = 2519; get_contextual_keyword();
			State = 2520; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 452, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2523;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2522; attributes();
				}
			}

			State = 2526;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2525; accessor_modifier();
				}
			}

			State = 2528; set_contextual_keyword();
			State = 2529; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(Context, State);
		EnterRule(_localctx, 454, RULE_accessor_modifier);
		try {
			State = 2538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2531; Match(PROTECTED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2532; Match(INTERNAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2533; Match(PRIVATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2534; Match(PROTECTED);
				State = 2535; Match(INTERNAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2536; Match(INTERNAL);
				State = 2537; Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(Context, State);
		EnterRule(_localctx, 456, RULE_accessor_body);
		try {
			State = 2542;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2540; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2541; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(calculatorParser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_modifiersContext event_modifiers() {
			return GetRuleContext<Event_modifiersContext>(0);
		}
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(Context, State);
		EnterRule(_localctx, 458, RULE_event_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2545;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2544; attributes();
				}
			}

			State = 2548;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2547; event_modifiers();
				}
			}

			State = 2550; Match(EVENT);
			State = 2551; type();
			State = 2560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				{
				State = 2552; variable_declarators();
				State = 2553; Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 2555; member_name();
				State = 2556; Match(OPEN_BRACE);
				State = 2557; event_accessor_declarations();
				State = 2558; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifiersContext : ParserRuleContext {
		public Event_modifierContext[] event_modifier() {
			return GetRuleContexts<Event_modifierContext>();
		}
		public Event_modifierContext event_modifier(int i) {
			return GetRuleContext<Event_modifierContext>(i);
		}
		public Event_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEvent_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEvent_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifiersContext event_modifiers() {
		Event_modifiersContext _localctx = new Event_modifiersContext(Context, State);
		EnterRule(_localctx, 460, RULE_event_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2562; event_modifier();
			State = 2566;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				{
				State = 2563; event_modifier();
				}
				}
				State = 2568;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(calculatorParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(calculatorParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Event_modifier_unsafeContext event_modifier_unsafe() {
			return GetRuleContext<Event_modifier_unsafeContext>(0);
		}
		public Event_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEvent_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEvent_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifierContext event_modifier() {
		Event_modifierContext _localctx = new Event_modifierContext(Context, State);
		EnterRule(_localctx, 462, RULE_event_modifier);
		try {
			State = 2581;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2569; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2570; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2571; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2572; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2573; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2574; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2575; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2576; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2577; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2578; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2579; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2580; event_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return GetRuleContext<Add_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return GetRuleContext<Remove_contextual_keywordContext>(0);
		}
		public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_accessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 464, RULE_event_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2584;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2583; attributes();
				}
			}

			State = 2594;
			switch (TokenStream.La(1)) {
			case ADD:
				{
				State = 2586; add_contextual_keyword();
				State = 2587; block();
				State = 2588; remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				State = 2590; remove_contextual_keyword();
				State = 2591; block();
				State = 2592; add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return GetRuleContext<Add_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 466, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2597;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2596; attributes();
				}
			}

			State = 2599; add_contextual_keyword();
			State = 2600; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return GetRuleContext<Remove_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 468, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2602; attributes();
				}
			}

			State = 2605; remove_contextual_keyword();
			State = 2606; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declarationContext : ParserRuleContext {
		public Indexer_declaratorContext indexer_declarator() {
			return GetRuleContext<Indexer_declaratorContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Indexer_modifiersContext indexer_modifiers() {
			return GetRuleContext<Indexer_modifiersContext>(0);
		}
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIndexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIndexer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declarationContext indexer_declaration() {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(Context, State);
		EnterRule(_localctx, 470, RULE_indexer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2609;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2608; attributes();
				}
			}

			State = 2612;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2611; indexer_modifiers();
				}
			}

			State = 2614; indexer_declarator();
			State = 2615; Match(OPEN_BRACE);
			State = 2616; accessor_declarations();
			State = 2617; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifiersContext : ParserRuleContext {
		public Indexer_modifierContext[] indexer_modifier() {
			return GetRuleContexts<Indexer_modifierContext>();
		}
		public Indexer_modifierContext indexer_modifier(int i) {
			return GetRuleContext<Indexer_modifierContext>(i);
		}
		public Indexer_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIndexer_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIndexer_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifiersContext indexer_modifiers() {
		Indexer_modifiersContext _localctx = new Indexer_modifiersContext(Context, State);
		EnterRule(_localctx, 472, RULE_indexer_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2619; indexer_modifier();
			State = 2623;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				{
				State = 2620; indexer_modifier();
				}
				}
				State = 2625;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(calculatorParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(calculatorParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Indexer_modifier_unsafeContext indexer_modifier_unsafe() {
			return GetRuleContext<Indexer_modifier_unsafeContext>(0);
		}
		public Indexer_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIndexer_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIndexer_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifierContext indexer_modifier() {
		Indexer_modifierContext _localctx = new Indexer_modifierContext(Context, State);
		EnterRule(_localctx, 474, RULE_indexer_modifier);
		try {
			State = 2637;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2626; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2627; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2628; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2629; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2630; Match(PRIVATE);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2631; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2632; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2633; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2634; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2635; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2636; indexer_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declaratorContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(calculatorParser.DOT, 0); }
		public Indexer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIndexer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIndexer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declaratorContext indexer_declarator() {
		Indexer_declaratorContext _localctx = new Indexer_declaratorContext(Context, State);
		EnterRule(_localctx, 476, RULE_indexer_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2639; type();
			State = 2643;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
				{
				State = 2640; interface_type();
				State = 2641; Match(DOT);
				}
			}

			State = 2645; Match(THIS);
			State = 2646; Match(OPEN_BRACKET);
			State = 2647; formal_parameter_list();
			State = 2648; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		public Operator_modifiersContext operator_modifiers() {
			return GetRuleContext<Operator_modifiersContext>(0);
		}
		public Operator_declaratorContext operator_declarator() {
			return GetRuleContext<Operator_declaratorContext>(0);
		}
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(Context, State);
		EnterRule(_localctx, 478, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2651;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2650; attributes();
				}
			}

			State = 2653; operator_modifiers();
			State = 2654; operator_declarator();
			State = 2655; operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifiersContext : ParserRuleContext {
		public Operator_modifierContext[] operator_modifier() {
			return GetRuleContexts<Operator_modifierContext>();
		}
		public Operator_modifierContext operator_modifier(int i) {
			return GetRuleContext<Operator_modifierContext>(i);
		}
		public Operator_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOperator_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOperator_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifiersContext operator_modifiers() {
		Operator_modifiersContext _localctx = new Operator_modifiersContext(Context, State);
		EnterRule(_localctx, 480, RULE_operator_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2657; operator_modifier();
			State = 2661;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (PUBLIC - 39)) | (1L << (STATIC - 39)) | (1L << (UNSAFE - 39)))) != 0)) {
				{
				{
				State = 2658; operator_modifier();
				}
				}
				State = 2663;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Operator_modifier_unsafeContext operator_modifier_unsafe() {
			return GetRuleContext<Operator_modifier_unsafeContext>(0);
		}
		public Operator_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOperator_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOperator_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifierContext operator_modifier() {
		Operator_modifierContext _localctx = new Operator_modifierContext(Context, State);
		EnterRule(_localctx, 482, RULE_operator_modifier);
		try {
			State = 2668;
			switch (TokenStream.La(1)) {
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2664; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2665; Match(STATIC);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2666; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2667; operator_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declaratorContext : ParserRuleContext {
		public Unary_operator_declaratorContext unary_operator_declarator() {
			return GetRuleContext<Unary_operator_declaratorContext>(0);
		}
		public Binary_operator_declaratorContext binary_operator_declarator() {
			return GetRuleContext<Binary_operator_declaratorContext>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOperator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOperator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declaratorContext operator_declarator() {
		Operator_declaratorContext _localctx = new Operator_declaratorContext(Context, State);
		EnterRule(_localctx, 484, RULE_operator_declarator);
		try {
			State = 2673;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2670; unary_operator_declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2671; binary_operator_declarator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2672; conversion_operator_declarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_declaratorContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(calculatorParser.OPERATOR, 0); }
		public Overloadable_unary_operatorContext overloadable_unary_operator() {
			return GetRuleContext<Overloadable_unary_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Unary_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnary_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnary_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_declaratorContext unary_operator_declarator() {
		Unary_operator_declaratorContext _localctx = new Unary_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 486, RULE_unary_operator_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2675; type();
			State = 2676; Match(OPERATOR);
			State = 2677; overloadable_unary_operator();
			State = 2678; Match(OPEN_PARENS);
			State = 2679; type();
			State = 2680; identifier();
			State = 2681; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_unary_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(calculatorParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(calculatorParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(calculatorParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(calculatorParser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(calculatorParser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(calculatorParser.OP_DEC, 0); }
		public ITerminalNode TRUE() { return GetToken(calculatorParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(calculatorParser.FALSE, 0); }
		public Overloadable_unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOverloadable_unary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOverloadable_unary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_unary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_unary_operatorContext overloadable_unary_operator() {
		Overloadable_unary_operatorContext _localctx = new Overloadable_unary_operatorContext(Context, State);
		EnterRule(_localctx, 488, RULE_overloadable_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2683;
			_la = TokenStream.La(1);
			if ( !(_la==FALSE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (TRUE - 93)) | (1L << (PLUS - 93)) | (1L << (MINUS - 93)) | (1L << (BANG - 93)) | (1L << (TILDE - 93)) | (1L << (OP_INC - 93)) | (1L << (OP_DEC - 93)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operator_declaratorContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(calculatorParser.OPERATOR, 0); }
		public Overloadable_binary_operatorContext overloadable_binary_operator() {
			return GetRuleContext<Overloadable_binary_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Binary_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBinary_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBinary_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operator_declaratorContext binary_operator_declarator() {
		Binary_operator_declaratorContext _localctx = new Binary_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 490, RULE_binary_operator_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2685; type();
			State = 2686; Match(OPERATOR);
			State = 2687; overloadable_binary_operator();
			State = 2688; Match(OPEN_PARENS);
			State = 2689; type();
			State = 2690; identifier();
			State = 2691; Match(COMMA);
			State = 2692; type();
			State = 2693; identifier();
			State = 2694; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_binary_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(calculatorParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(calculatorParser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(calculatorParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(calculatorParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(calculatorParser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(calculatorParser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(calculatorParser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(calculatorParser.CARET, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(calculatorParser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(calculatorParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(calculatorParser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public ITerminalNode OP_GE() { return GetToken(calculatorParser.OP_GE, 0); }
		public ITerminalNode OP_LE() { return GetToken(calculatorParser.OP_LE, 0); }
		public Overloadable_binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_binary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOverloadable_binary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOverloadable_binary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_binary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_binary_operatorContext overloadable_binary_operator() {
		Overloadable_binary_operatorContext _localctx = new Overloadable_binary_operatorContext(Context, State);
		EnterRule(_localctx, 492, RULE_overloadable_binary_operator);
		try {
			State = 2712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2696; Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2697; Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2698; Match(STAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2699; Match(DIV);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2700; Match(PERCENT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2701; Match(AMP);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2702; Match(BITWISE_OR);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2703; Match(CARET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2704; Match(OP_LEFT_SHIFT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2705; right_shift();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2706; Match(OP_EQ);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2707; Match(OP_NE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2708; Match(GT);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2709; Match(LT);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2710; Match(OP_GE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2711; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(calculatorParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(calculatorParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(calculatorParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(calculatorParser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(calculatorParser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(calculatorParser.OP_DEC, 0); }
		public ITerminalNode TRUE() { return GetToken(calculatorParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(calculatorParser.FALSE, 0); }
		public ITerminalNode STAR() { return GetToken(calculatorParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(calculatorParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(calculatorParser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(calculatorParser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(calculatorParser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(calculatorParser.CARET, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(calculatorParser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(calculatorParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(calculatorParser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public ITerminalNode OP_GE() { return GetToken(calculatorParser.OP_GE, 0); }
		public ITerminalNode OP_LE() { return GetToken(calculatorParser.OP_LE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(Context, State);
		EnterRule(_localctx, 494, RULE_overloadable_operator);
		try {
			State = 2736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2714; Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2715; Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2716; Match(BANG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2717; Match(TILDE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2718; Match(OP_INC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2719; Match(OP_DEC);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2720; Match(TRUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2721; Match(FALSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2722; Match(STAR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2723; Match(DIV);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2724; Match(PERCENT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2725; Match(AMP);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2726; Match(BITWISE_OR);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2727; Match(CARET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2728; Match(OP_LEFT_SHIFT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2729; right_shift();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2730; Match(OP_EQ);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2731; Match(OP_NE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2732; Match(GT);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2733; Match(LT);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2734; Match(OP_GE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2735; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		public ITerminalNode IMPLICIT() { return GetToken(calculatorParser.IMPLICIT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(calculatorParser.OPERATOR, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(calculatorParser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 496, RULE_conversion_operator_declarator);
		try {
			State = 2754;
			switch (TokenStream.La(1)) {
			case IMPLICIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2738; Match(IMPLICIT);
				State = 2739; Match(OPERATOR);
				State = 2740; type();
				State = 2741; Match(OPEN_PARENS);
				State = 2742; type();
				State = 2743; identifier();
				State = 2744; Match(CLOSE_PARENS);
				}
				break;
			case EXPLICIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2746; Match(EXPLICIT);
				State = 2747; Match(OPERATOR);
				State = 2748; type();
				State = 2749; Match(OPEN_PARENS);
				State = 2750; type();
				State = 2751; identifier();
				State = 2752; Match(CLOSE_PARENS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Operator_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOperator_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOperator_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_bodyContext operator_body() {
		Operator_bodyContext _localctx = new Operator_bodyContext(Context, State);
		EnterRule(_localctx, 498, RULE_operator_body);
		try {
			State = 2758;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2756; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2757; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public Constructor_declaratorContext constructor_declarator() {
			return GetRuleContext<Constructor_declaratorContext>(0);
		}
		public Constructor_bodyContext constructor_body() {
			return GetRuleContext<Constructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Constructor_modifiersContext constructor_modifiers() {
			return GetRuleContext<Constructor_modifiersContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 500, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2761;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2760; attributes();
				}
			}

			State = 2764;
			_la = TokenStream.La(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (INTERNAL - 39)) | (1L << (PRIVATE - 39)) | (1L << (PROTECTED - 39)) | (1L << (PUBLIC - 39)) | (1L << (UNSAFE - 39)))) != 0)) {
				{
				State = 2763; constructor_modifiers();
				}
			}

			State = 2766; constructor_declarator();
			State = 2767; constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifiersContext : ParserRuleContext {
		public Constructor_modifierContext[] constructor_modifier() {
			return GetRuleContexts<Constructor_modifierContext>();
		}
		public Constructor_modifierContext constructor_modifier(int i) {
			return GetRuleContext<Constructor_modifierContext>(i);
		}
		public Constructor_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifiersContext constructor_modifiers() {
		Constructor_modifiersContext _localctx = new Constructor_modifiersContext(Context, State);
		EnterRule(_localctx, 502, RULE_constructor_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2770;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2769; constructor_modifier();
				}
				}
				State = 2772;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (INTERNAL - 39)) | (1L << (PRIVATE - 39)) | (1L << (PROTECTED - 39)) | (1L << (PUBLIC - 39)) | (1L << (UNSAFE - 39)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public Constructor_modifier_unsafeContext constructor_modifier_unsafe() {
			return GetRuleContext<Constructor_modifier_unsafeContext>(0);
		}
		public Constructor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifierContext constructor_modifier() {
		Constructor_modifierContext _localctx = new Constructor_modifierContext(Context, State);
		EnterRule(_localctx, 504, RULE_constructor_modifier);
		try {
			State = 2780;
			switch (TokenStream.La(1)) {
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2774; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2775; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2776; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2777; Match(PRIVATE);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2778; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2779; constructor_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declaratorContext constructor_declarator() {
		Constructor_declaratorContext _localctx = new Constructor_declaratorContext(Context, State);
		EnterRule(_localctx, 506, RULE_constructor_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2782; identifier();
			State = 2783; Match(OPEN_PARENS);
			State = 2785;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2784; formal_parameter_list();
				}
			}

			State = 2787; Match(CLOSE_PARENS);
			State = 2789;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2788; constructor_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public ITerminalNode BASE() { return GetToken(calculatorParser.BASE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(Context, State);
		EnterRule(_localctx, 508, RULE_constructor_initializer);
		int _la;
		try {
			State = 2805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2791; Match(COLON);
				State = 2792; Match(BASE);
				State = 2793; Match(OPEN_PARENS);
				State = 2795;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 2794; argument_list();
					}
				}

				State = 2797; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2798; Match(COLON);
				State = 2799; Match(THIS);
				State = 2800; Match(OPEN_PARENS);
				State = 2802;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 2801; argument_list();
					}
				}

				State = 2804; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Constructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_bodyContext constructor_body() {
		Constructor_bodyContext _localctx = new Constructor_bodyContext(Context, State);
		EnterRule(_localctx, 510, RULE_constructor_body);
		try {
			State = 2809;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2807; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2808; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_declarationContext : ParserRuleContext {
		public Static_constructor_modifiersContext static_constructor_modifiers() {
			return GetRuleContext<Static_constructor_modifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Static_constructor_bodyContext static_constructor_body() {
			return GetRuleContext<Static_constructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Static_constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatic_constructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatic_constructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_declarationContext static_constructor_declaration() {
		Static_constructor_declarationContext _localctx = new Static_constructor_declarationContext(Context, State);
		EnterRule(_localctx, 512, RULE_static_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2811; attributes();
				}
			}

			State = 2814; static_constructor_modifiers();
			State = 2815; identifier();
			State = 2816; Match(OPEN_PARENS);
			State = 2817; Match(CLOSE_PARENS);
			State = 2818; static_constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_modifiersContext : ParserRuleContext {
		public Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() {
			return GetRuleContext<Static_constructor_modifiers_unsafeContext>(0);
		}
		public Static_constructor_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatic_constructor_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatic_constructor_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_modifiersContext static_constructor_modifiers() {
		Static_constructor_modifiersContext _localctx = new Static_constructor_modifiersContext(Context, State);
		EnterRule(_localctx, 514, RULE_static_constructor_modifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2820; static_constructor_modifiers_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Static_constructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatic_constructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatic_constructor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_bodyContext static_constructor_body() {
		Static_constructor_bodyContext _localctx = new Static_constructor_bodyContext(Context, State);
		EnterRule(_localctx, 516, RULE_static_constructor_body);
		try {
			State = 2824;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2822; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2823; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_declarationContext : ParserRuleContext {
		public Destructor_declaration_unsafeContext destructor_declaration_unsafe() {
			return GetRuleContext<Destructor_declaration_unsafeContext>(0);
		}
		public Destructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDestructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDestructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_declarationContext destructor_declaration() {
		Destructor_declarationContext _localctx = new Destructor_declarationContext(Context, State);
		EnterRule(_localctx, 518, RULE_destructor_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826; destructor_declaration_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Destructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDestructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDestructor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_bodyContext destructor_body() {
		Destructor_bodyContext _localctx = new Destructor_bodyContext(Context, State);
		EnterRule(_localctx, 520, RULE_destructor_body);
		try {
			State = 2830;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2828; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2829; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 522, RULE_body);
		try {
			State = 2834;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2832; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2833; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(calculatorParser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Struct_modifiersContext struct_modifiers() {
			return GetRuleContext<Struct_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(Context, State);
		EnterRule(_localctx, 524, RULE_struct_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2836; attributes();
				}
			}

			State = 2840;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 2839; struct_modifiers();
				}
			}

			State = 2843;
			_la = TokenStream.La(1);
			if (_la==PARTIAL) {
				{
				State = 2842; partial_contextual_keyword();
				}
			}

			State = 2845; Match(STRUCT);
			State = 2846; identifier();
			State = 2848;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2847; type_parameter_list();
				}
			}

			State = 2851;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2850; struct_interfaces();
				}
			}

			State = 2854;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2853; type_parameter_constraints_clauses();
				}
			}

			State = 2856; struct_body();
			State = 2858;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2857; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifiersContext : ParserRuleContext {
		public Struct_modifierContext[] struct_modifier() {
			return GetRuleContexts<Struct_modifierContext>();
		}
		public Struct_modifierContext struct_modifier(int i) {
			return GetRuleContext<Struct_modifierContext>(i);
		}
		public Struct_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifiersContext struct_modifiers() {
		Struct_modifiersContext _localctx = new Struct_modifiersContext(Context, State);
		EnterRule(_localctx, 526, RULE_struct_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2860; struct_modifier();
			State = 2864;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 2861; struct_modifier();
				}
				}
				State = 2866;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public Struct_modifier_unsafeContext struct_modifier_unsafe() {
			return GetRuleContext<Struct_modifier_unsafeContext>(0);
		}
		public Struct_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifierContext struct_modifier() {
		Struct_modifierContext _localctx = new Struct_modifierContext(Context, State);
		EnterRule(_localctx, 528, RULE_struct_modifier);
		try {
			State = 2873;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2867; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2868; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2869; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2870; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2871; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2872; struct_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_interfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(Context, State);
		EnterRule(_localctx, 530, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2875; Match(COLON);
			State = 2876; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Struct_member_declarationsContext struct_member_declarations() {
			return GetRuleContext<Struct_member_declarationsContext>(0);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 532, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2878; Match(OPEN_BRACE);
			State = 2880;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2879; struct_member_declarations();
				}
			}

			State = 2882; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationsContext : ParserRuleContext {
		public Struct_member_declarationContext[] struct_member_declaration() {
			return GetRuleContexts<Struct_member_declarationContext>();
		}
		public Struct_member_declarationContext struct_member_declaration(int i) {
			return GetRuleContext<Struct_member_declarationContext>(i);
		}
		public Struct_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationsContext struct_member_declarations() {
		Struct_member_declarationsContext _localctx = new Struct_member_declarationsContext(Context, State);
		EnterRule(_localctx, 534, RULE_struct_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2884; struct_member_declaration();
			State = 2888;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				State = 2885; struct_member_declaration();
				}
				}
				State = 2890;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(calculatorParser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return GetRuleContext<Buffer_element_typeContext>(0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return GetRuleContext<Fixed_size_buffer_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationContext struct_member_declaration() {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(Context, State);
		EnterRule(_localctx, 536, RULE_struct_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2892;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2891; attributes();
				}
			}

			State = 2895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				{
				State = 2894; all_member_modifiers();
				}
				break;
			}
			State = 2903;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 2897; common_member_declaration();
				}
				break;
			case FIXED:
				{
				State = 2898; Match(FIXED);
				State = 2899; buffer_element_type();
				State = 2900; fixed_size_buffer_declarators();
				State = 2901; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(calculatorParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(calculatorParser.STAR, i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(calculatorParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(calculatorParser.INTERR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 538, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905; base_type();
			State = 2913;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2909;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 2906;
					_la = TokenStream.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					State = 2911;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 2912; rank_specifier();
				}
				}
				State = 2915;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (OPEN_BRACKET - 116)) | (1L << (STAR - 116)) | (1L << (INTERR - 116)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(calculatorParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(calculatorParser.INTERR, i);
		}
		public ITerminalNode[] STAR() { return GetTokens(calculatorParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(calculatorParser.STAR, i);
		}
		public Non_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNon_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNon_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_array_typeContext non_array_type() {
		Non_array_typeContext _localctx = new Non_array_typeContext(Context, State);
		EnterRule(_localctx, 540, RULE_non_array_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2917; base_type();
			State = 2923;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2921;
					switch (TokenStream.La(1)) {
					case OPEN_BRACKET:
						{
						State = 2918; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 2919; Match(INTERR);
						}
						break;
					case STAR:
						{
						State = 2920; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2925;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifiersContext : ParserRuleContext {
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Rank_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRank_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRank_specifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifiersContext rank_specifiers() {
		Rank_specifiersContext _localctx = new Rank_specifiersContext(Context, State);
		EnterRule(_localctx, 542, RULE_rank_specifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2927;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2926; rank_specifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2929;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,280,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Dim_separatorsContext dim_separators() {
			return GetRuleContext<Dim_separatorsContext>(0);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(Context, State);
		EnterRule(_localctx, 544, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2931; Match(OPEN_BRACKET);
			State = 2933;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 2932; dim_separators();
				}
			}

			State = 2935; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dim_separatorsContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Dim_separatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dim_separators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDim_separators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDim_separators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDim_separators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dim_separatorsContext dim_separators() {
		Dim_separatorsContext _localctx = new Dim_separatorsContext(Context, State);
		EnterRule(_localctx, 546, RULE_dim_separators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937; Match(COMMA);
			State = 2941;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2938; Match(COMMA);
				}
				}
				State = 2943;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Variable_initializer_listContext variable_initializer_list() {
			return GetRuleContext<Variable_initializer_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 548, RULE_array_initializer);
		int _la;
		try {
			State = 2953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2944; Match(OPEN_BRACE);
				State = 2945; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2946; Match(OPEN_BRACE);
				State = 2947; variable_initializer_list();
				State = 2949;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2948; Match(COMMA);
					}
				}

				State = 2951; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializer_listContext : ParserRuleContext {
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Variable_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariable_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariable_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializer_listContext variable_initializer_list() {
		Variable_initializer_listContext _localctx = new Variable_initializer_listContext(Context, State);
		EnterRule(_localctx, 550, RULE_variable_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2955; variable_initializer();
			State = 2960;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2956; Match(COMMA);
					State = 2957; variable_initializer();
					}
					} 
				}
				State = 2962;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(calculatorParser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Interface_modifiersContext interface_modifiers() {
			return GetRuleContext<Interface_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declarationContext interface_declaration() {
		Interface_declarationContext _localctx = new Interface_declarationContext(Context, State);
		EnterRule(_localctx, 552, RULE_interface_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2964;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2963; attributes();
				}
			}

			State = 2967;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 2966; interface_modifiers();
				}
			}

			State = 2970;
			_la = TokenStream.La(1);
			if (_la==PARTIAL) {
				{
				State = 2969; partial_contextual_keyword();
				}
			}

			State = 2972; Match(INTERFACE);
			State = 2973; identifier();
			State = 2975;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2974; variant_type_parameter_list();
				}
			}

			State = 2978;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2977; interface_base();
				}
			}

			State = 2981;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2980; type_parameter_constraints_clauses();
				}
			}

			State = 2983; interface_body();
			State = 2985;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2984; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifiersContext : ParserRuleContext {
		public Interface_modifierContext[] interface_modifier() {
			return GetRuleContexts<Interface_modifierContext>();
		}
		public Interface_modifierContext interface_modifier(int i) {
			return GetRuleContext<Interface_modifierContext>(i);
		}
		public Interface_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifiersContext interface_modifiers() {
		Interface_modifiersContext _localctx = new Interface_modifiersContext(Context, State);
		EnterRule(_localctx, 554, RULE_interface_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2987; interface_modifier();
			State = 2991;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 2988; interface_modifier();
				}
				}
				State = 2993;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public Interface_modifier_unsafeContext interface_modifier_unsafe() {
			return GetRuleContext<Interface_modifier_unsafeContext>(0);
		}
		public Interface_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifierContext interface_modifier() {
		Interface_modifierContext _localctx = new Interface_modifierContext(Context, State);
		EnterRule(_localctx, 556, RULE_interface_modifier);
		try {
			State = 3000;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2994; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2995; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2996; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2997; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2998; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2999; interface_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(calculatorParser.LT, 0); }
		public Variant_type_parametersContext variant_type_parameters() {
			return GetRuleContext<Variant_type_parametersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(Context, State);
		EnterRule(_localctx, 558, RULE_variant_type_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3002; Match(LT);
			State = 3003; variant_type_parameters();
			State = 3004; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parametersContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Variance_annotationContext[] variance_annotation() {
			return GetRuleContexts<Variance_annotationContext>();
		}
		public Variance_annotationContext variance_annotation(int i) {
			return GetRuleContext<Variance_annotationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Variant_type_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parametersContext variant_type_parameters() {
		Variant_type_parametersContext _localctx = new Variant_type_parametersContext(Context, State);
		EnterRule(_localctx, 560, RULE_variant_type_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3007;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3006; attributes();
				}
			}

			State = 3010;
			_la = TokenStream.La(1);
			if (_la==IN || _la==OUT) {
				{
				State = 3009; variance_annotation();
				}
			}

			State = 3012; type_parameter();
			State = 3023;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3013; Match(COMMA);
				State = 3015;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 3014; attributes();
					}
				}

				State = 3018;
				_la = TokenStream.La(1);
				if (_la==IN || _la==OUT) {
					{
					State = 3017; variance_annotation();
					}
				}

				State = 3020; type_parameter();
				}
				}
				State = 3025;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variance_annotationContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(calculatorParser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterVariance_annotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitVariance_annotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariance_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variance_annotationContext variance_annotation() {
		Variance_annotationContext _localctx = new Variance_annotationContext(Context, State);
		EnterRule(_localctx, 562, RULE_variance_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3026;
			_la = TokenStream.La(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(Context, State);
		EnterRule(_localctx, 564, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028; Match(COLON);
			State = 3029; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Interface_member_declarationsContext interface_member_declarations() {
			return GetRuleContext<Interface_member_declarationsContext>(0);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 566, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3031; Match(OPEN_BRACE);
			State = 3033;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3032; interface_member_declarations();
				}
			}

			State = 3035; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationsContext : ParserRuleContext {
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Interface_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationsContext interface_member_declarations() {
		Interface_member_declarationsContext _localctx = new Interface_member_declarationsContext(Context, State);
		EnterRule(_localctx, 568, RULE_interface_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3038;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3037; interface_member_declaration();
				}
				}
				State = 3040;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public ITerminalNode EVENT() { return GetToken(calculatorParser.EVENT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(Context, State);
		EnterRule(_localctx, 570, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3043;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3042; attributes();
				}
			}

			State = 3046;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3045; Match(NEW);
				}
			}

			State = 3098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				{
				State = 3048; type();
				State = 3076;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
				case 1:
					{
					State = 3049; identifier();
					State = 3051;
					_la = TokenStream.La(1);
					if (_la==LT) {
						{
						State = 3050; type_parameter_list();
						}
					}

					State = 3053; Match(OPEN_PARENS);
					State = 3055;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
						{
						State = 3054; formal_parameter_list();
						}
					}

					State = 3057; Match(CLOSE_PARENS);
					State = 3059;
					_la = TokenStream.La(1);
					if (_la==WHERE) {
						{
						State = 3058; type_parameter_constraints_clauses();
						}
					}

					State = 3061; Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 3063; identifier();
					State = 3064; Match(OPEN_BRACE);
					State = 3065; interface_accessors();
					State = 3066; Match(CLOSE_BRACE);
					}
					break;
				case 3:
					{
					State = 3068; Match(THIS);
					State = 3069; Match(OPEN_BRACKET);
					State = 3070; formal_parameter_list();
					State = 3071; Match(CLOSE_BRACKET);
					State = 3072; Match(OPEN_BRACE);
					State = 3073; interface_accessors();
					State = 3074; Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3078; Match(VOID);
				State = 3079; identifier();
				State = 3081;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 3080; type_parameter_list();
					}
				}

				State = 3083; Match(OPEN_PARENS);
				State = 3085;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
					{
					State = 3084; formal_parameter_list();
					}
				}

				State = 3087; Match(CLOSE_PARENS);
				State = 3089;
				_la = TokenStream.La(1);
				if (_la==WHERE) {
					{
					State = 3088; type_parameter_constraints_clauses();
					}
				}

				State = 3091; Match(SEMICOLON);
				}
				break;
			case 3:
				{
				State = 3093; Match(EVENT);
				State = 3094; type();
				State = 3095; identifier();
				State = 3096; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_declarationContext : ParserRuleContext {
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_method_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_method_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_declarationContext interface_method_declaration() {
		Interface_method_declarationContext _localctx = new Interface_method_declarationContext(Context, State);
		EnterRule(_localctx, 572, RULE_interface_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3101;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3100; attributes();
				}
			}

			State = 3104;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3103; Match(NEW);
				}
			}

			State = 3106; return_type();
			State = 3107; identifier();
			State = 3109;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3108; type_parameter_list();
				}
			}

			State = 3111; Match(OPEN_PARENS);
			State = 3113;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3112; formal_parameter_list();
				}
			}

			State = 3115; Match(CLOSE_PARENS);
			State = 3117;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3116; type_parameter_constraints_clauses();
				}
			}

			State = 3119; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_property_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public Interface_property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_property_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_property_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_property_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_property_declarationContext interface_property_declaration() {
		Interface_property_declarationContext _localctx = new Interface_property_declarationContext(Context, State);
		EnterRule(_localctx, 574, RULE_interface_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3122;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3121; attributes();
				}
			}

			State = 3125;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3124; Match(NEW);
				}
			}

			State = 3127; type();
			State = 3128; identifier();
			State = 3129; Match(OPEN_BRACE);
			State = 3130; interface_accessors();
			State = 3131; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(calculatorParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(calculatorParser.SEMICOLON, i);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_accessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(Context, State);
		EnterRule(_localctx, 576, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3134;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3133; attributes();
				}
			}

			State = 3156;
			switch (TokenStream.La(1)) {
			case GET:
				{
				State = 3136; get_contextual_keyword();
				State = 3137; Match(SEMICOLON);
				State = 3144;
				_la = TokenStream.La(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 3139;
					_la = TokenStream.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 3138; attributes();
						}
					}

					State = 3141; set_contextual_keyword();
					State = 3142; Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 3146; set_contextual_keyword();
				State = 3147; Match(SEMICOLON);
				State = 3154;
				_la = TokenStream.La(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 3149;
					_la = TokenStream.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 3148; attributes();
						}
					}

					State = 3151; get_contextual_keyword();
					State = 3152; Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(calculatorParser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public Interface_event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_event_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_event_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_event_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_event_declarationContext interface_event_declaration() {
		Interface_event_declarationContext _localctx = new Interface_event_declarationContext(Context, State);
		EnterRule(_localctx, 578, RULE_interface_event_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3159;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3158; attributes();
				}
			}

			State = 3162;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3161; Match(NEW);
				}
			}

			State = 3164; Match(EVENT);
			State = 3165; type();
			State = 3166; identifier();
			State = 3167; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_indexer_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public Interface_indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_indexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_indexer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_indexer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_indexer_declarationContext interface_indexer_declaration() {
		Interface_indexer_declarationContext _localctx = new Interface_indexer_declarationContext(Context, State);
		EnterRule(_localctx, 580, RULE_interface_indexer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3170;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3169; attributes();
				}
			}

			State = 3173;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3172; Match(NEW);
				}
			}

			State = 3175; type();
			State = 3176; Match(THIS);
			State = 3177; Match(OPEN_BRACKET);
			State = 3178; formal_parameter_list();
			State = 3179; Match(CLOSE_BRACKET);
			State = 3180; Match(OPEN_BRACE);
			State = 3181; interface_accessors();
			State = 3182; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(calculatorParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Enum_modifiersContext enum_modifiers() {
			return GetRuleContext<Enum_modifiersContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 582, RULE_enum_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3185;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3184; attributes();
				}
			}

			State = 3188;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0)) {
				{
				State = 3187; enum_modifiers();
				}
			}

			State = 3190; Match(ENUM);
			State = 3191; identifier();
			State = 3193;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3192; enum_base();
				}
			}

			State = 3195; enum_body();
			State = 3197;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3196; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(Context, State);
		EnterRule(_localctx, 584, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3199; Match(COLON);
			State = 3200; integral_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Enum_member_declarationsContext enum_member_declarations() {
			return GetRuleContext<Enum_member_declarationsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 586, RULE_enum_body);
		int _la;
		try {
			State = 3211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3202; Match(OPEN_BRACE);
				State = 3203; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3204; Match(OPEN_BRACE);
				State = 3205; enum_member_declarations();
				State = 3207;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 3206; Match(COMMA);
					}
				}

				State = 3209; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_modifiersContext : ParserRuleContext {
		public Enum_modifierContext[] enum_modifier() {
			return GetRuleContexts<Enum_modifierContext>();
		}
		public Enum_modifierContext enum_modifier(int i) {
			return GetRuleContext<Enum_modifierContext>(i);
		}
		public Enum_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_modifiersContext enum_modifiers() {
		Enum_modifiersContext _localctx = new Enum_modifiersContext(Context, State);
		EnterRule(_localctx, 588, RULE_enum_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3214;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3213; enum_modifier();
				}
				}
				State = 3216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public Enum_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_modifierContext enum_modifier() {
		Enum_modifierContext _localctx = new Enum_modifierContext(Context, State);
		EnterRule(_localctx, 590, RULE_enum_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3218;
			_la = TokenStream.La(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationsContext : ParserRuleContext {
		public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Enum_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationsContext enum_member_declarations() {
		Enum_member_declarationsContext _localctx = new Enum_member_declarationsContext(Context, State);
		EnterRule(_localctx, 592, RULE_enum_member_declarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3220; enum_member_declaration();
			State = 3225;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3221; Match(COMMA);
					State = 3222; enum_member_declaration();
					}
					} 
				}
				State = 3227;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(Context, State);
		EnterRule(_localctx, 594, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3229;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3228; attributes();
				}
			}

			State = 3231; identifier();
			State = 3234;
			_la = TokenStream.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3232; Match(ASSIGNMENT);
				State = 3233; constant_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_declarationContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(calculatorParser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Delegate_modifiersContext delegate_modifiers() {
			return GetRuleContext<Delegate_modifiersContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDelegate_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDelegate_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_declarationContext delegate_declaration() {
		Delegate_declarationContext _localctx = new Delegate_declarationContext(Context, State);
		EnterRule(_localctx, 596, RULE_delegate_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3237;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3236; attributes();
				}
			}

			State = 3240;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 3239; delegate_modifiers();
				}
			}

			State = 3242; Match(DELEGATE);
			State = 3243; return_type();
			State = 3244; identifier();
			State = 3246;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3245; variant_type_parameter_list();
				}
			}

			State = 3248; Match(OPEN_PARENS);
			State = 3250;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3249; formal_parameter_list();
				}
			}

			State = 3252; Match(CLOSE_PARENS);
			State = 3254;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3253; type_parameter_constraints_clauses();
				}
			}

			State = 3256; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifiersContext : ParserRuleContext {
		public Delegate_modifierContext[] delegate_modifier() {
			return GetRuleContexts<Delegate_modifierContext>();
		}
		public Delegate_modifierContext delegate_modifier(int i) {
			return GetRuleContext<Delegate_modifierContext>(i);
		}
		public Delegate_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDelegate_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDelegate_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifiersContext delegate_modifiers() {
		Delegate_modifiersContext _localctx = new Delegate_modifiersContext(Context, State);
		EnterRule(_localctx, 598, RULE_delegate_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3258; delegate_modifier();
			State = 3262;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 3259; delegate_modifier();
				}
				}
				State = 3264;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public Delegate_modifier_unsafeContext delegate_modifier_unsafe() {
			return GetRuleContext<Delegate_modifier_unsafeContext>(0);
		}
		public Delegate_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDelegate_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDelegate_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifierContext delegate_modifier() {
		Delegate_modifierContext _localctx = new Delegate_modifierContext(Context, State);
		EnterRule(_localctx, 600, RULE_delegate_modifier);
		try {
			State = 3271;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3265; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3266; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3267; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3268; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3269; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3270; delegate_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attributesContext : ParserRuleContext {
		public Global_attribute_sectionsContext global_attribute_sections() {
			return GetRuleContext<Global_attribute_sectionsContext>(0);
		}
		public Global_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGlobal_attributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGlobal_attributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attributesContext global_attributes() {
		Global_attributesContext _localctx = new Global_attributesContext(Context, State);
		EnterRule(_localctx, 602, RULE_global_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3273; global_attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionsContext : ParserRuleContext {
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Global_attribute_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_sections(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_sections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionsContext global_attribute_sections() {
		Global_attribute_sectionsContext _localctx = new Global_attribute_sectionsContext(Context, State);
		EnterRule(_localctx, 604, RULE_global_attribute_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3276;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3275; global_attribute_section();
				}
				}
				State = 3278;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Global_attribute_target_specifierContext global_attribute_target_specifier() {
			return GetRuleContext<Global_attribute_target_specifierContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(Context, State);
		EnterRule(_localctx, 606, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3280; Match(OPEN_BRACKET);
			State = 3281; global_attribute_target_specifier();
			State = 3282; attribute_list();
			State = 3284;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 3283; Match(COMMA);
				}
			}

			State = 3286; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_target_specifierContext : ParserRuleContext {
		public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Global_attribute_target_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_target_specifierContext global_attribute_target_specifier() {
		Global_attribute_target_specifierContext _localctx = new Global_attribute_target_specifierContext(Context, State);
		EnterRule(_localctx, 608, RULE_global_attribute_target_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3288; global_attribute_target();
			State = 3289; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(Context, State);
		EnterRule(_localctx, 610, RULE_global_attribute_target);
		try {
			State = 3293;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3291; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3292; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public Attribute_sectionsContext attribute_sections() {
			return GetRuleContext<Attribute_sectionsContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 612, RULE_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3295; attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionsContext : ParserRuleContext {
		public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public Attribute_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_sections(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_sections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionsContext attribute_sections() {
		Attribute_sectionsContext _localctx = new Attribute_sectionsContext(Context, State);
		EnterRule(_localctx, 614, RULE_attribute_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3297; attribute_section();
				}
				}
				State = 3300;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Attribute_target_specifierContext attribute_target_specifier() {
			return GetRuleContext<Attribute_target_specifierContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(Context, State);
		EnterRule(_localctx, 616, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3302; Match(OPEN_BRACKET);
			State = 3304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 3303; attribute_target_specifier();
				}
				break;
			}
			State = 3306; attribute_list();
			State = 3308;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 3307; Match(COMMA);
				}
			}

			State = 3310; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_target_specifierContext : ParserRuleContext {
		public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(calculatorParser.COLON, 0); }
		public Attribute_target_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_target_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_target_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_target_specifierContext attribute_target_specifier() {
		Attribute_target_specifierContext _localctx = new Attribute_target_specifierContext(Context, State);
		EnterRule(_localctx, 618, RULE_attribute_target_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3312; attribute_target();
			State = 3313; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(Context, State);
		EnterRule(_localctx, 620, RULE_attribute_target);
		try {
			State = 3317;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3315; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3316; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 622, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3319; attribute();
			State = 3324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3320; Match(COMMA);
					State = 3321; attribute();
					}
					} 
				}
				State = 3326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,353,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Attribute_argumentsContext attribute_arguments() {
			return GetRuleContext<Attribute_argumentsContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 624, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3327; attribute_name();
			State = 3329;
			_la = TokenStream.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 3328; attribute_arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 626, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3331; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentsContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Positional_argument_listContext positional_argument_list() {
			return GetRuleContext<Positional_argument_listContext>(0);
		}
		public Attribute_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentsContext attribute_arguments() {
		Attribute_argumentsContext _localctx = new Attribute_argumentsContext(Context, State);
		EnterRule(_localctx, 628, RULE_attribute_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3333; Match(OPEN_PARENS);
			State = 3335;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 3334; positional_argument_list();
				}
			}

			State = 3337; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_argument_listContext : ParserRuleContext {
		public Positional_argumentContext arg;
		public Positional_argumentContext arg2;
		public Positional_argumentContext[] positional_argument() {
			return GetRuleContexts<Positional_argumentContext>();
		}
		public Positional_argumentContext positional_argument(int i) {
			return GetRuleContext<Positional_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Positional_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPositional_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPositional_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositional_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positional_argument_listContext positional_argument_list() {
		Positional_argument_listContext _localctx = new Positional_argument_listContext(Context, State);
		EnterRule(_localctx, 630, RULE_positional_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3339; _localctx.arg = positional_argument();
			State = 3344;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3340; Match(COMMA);
				State = 3341; _localctx.arg2 = positional_argument();
				}
				}
				State = 3346;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_argumentContext : ParserRuleContext {
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return GetRuleContext<Attribute_argument_expressionContext>(0);
		}
		public Positional_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPositional_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPositional_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositional_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positional_argumentContext positional_argument() {
		Positional_argumentContext _localctx = new Positional_argumentContext(Context, State);
		EnterRule(_localctx, 632, RULE_positional_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3347; attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argument_listContext : ParserRuleContext {
		public Named_argumentContext[] named_argument() {
			return GetRuleContexts<Named_argumentContext>();
		}
		public Named_argumentContext named_argument(int i) {
			return GetRuleContext<Named_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamed_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamed_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_argument_listContext named_argument_list() {
		Named_argument_listContext _localctx = new Named_argument_listContext(Context, State);
		EnterRule(_localctx, 634, RULE_named_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3349; named_argument();
			State = 3354;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3350; Match(COMMA);
				State = 3351; named_argument();
				}
				}
				State = 3356;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return GetRuleContext<Attribute_argument_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 636, RULE_named_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3357; identifier();
			State = 3358; Match(ASSIGNMENT);
			State = 3359; attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argument_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Attribute_argument_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAttribute_argument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAttribute_argument_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_argument_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argument_expressionContext attribute_argument_expression() {
		Attribute_argument_expressionContext _localctx = new Attribute_argument_expressionContext(Context, State);
		EnterRule(_localctx, 638, RULE_attribute_argument_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3361; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Class_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifier_unsafeContext class_modifier_unsafe() {
		Class_modifier_unsafeContext _localctx = new Class_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 640, RULE_class_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3363; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Struct_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifier_unsafeContext struct_modifier_unsafe() {
		Struct_modifier_unsafeContext _localctx = new Struct_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 642, RULE_struct_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3365; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Interface_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifier_unsafeContext interface_modifier_unsafe() {
		Interface_modifier_unsafeContext _localctx = new Interface_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 644, RULE_interface_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3367; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Delegate_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDelegate_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDelegate_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifier_unsafeContext delegate_modifier_unsafe() {
		Delegate_modifier_unsafeContext _localctx = new Delegate_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 646, RULE_delegate_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3369; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Field_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterField_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitField_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_modifier_unsafeContext field_modifier_unsafe() {
		Field_modifier_unsafeContext _localctx = new Field_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 648, RULE_field_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3371; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Method_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifier_unsafeContext method_modifier_unsafe() {
		Method_modifier_unsafeContext _localctx = new Method_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 650, RULE_method_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3373; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Property_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterProperty_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitProperty_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifier_unsafeContext property_modifier_unsafe() {
		Property_modifier_unsafeContext _localctx = new Property_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 652, RULE_property_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3375; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Event_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEvent_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEvent_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifier_unsafeContext event_modifier_unsafe() {
		Event_modifier_unsafeContext _localctx = new Event_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 654, RULE_event_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3377; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Indexer_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIndexer_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIndexer_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifier_unsafeContext indexer_modifier_unsafe() {
		Indexer_modifier_unsafeContext _localctx = new Indexer_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 656, RULE_indexer_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3379; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Operator_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOperator_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOperator_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifier_unsafeContext operator_modifier_unsafe() {
		Operator_modifier_unsafeContext _localctx = new Operator_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 658, RULE_operator_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Constructor_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifier_unsafeContext constructor_modifier_unsafe() {
		Constructor_modifier_unsafeContext _localctx = new Constructor_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 660, RULE_constructor_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3383; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_declaration_unsafeContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(calculatorParser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Destructor_declaration_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_declaration_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDestructor_declaration_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDestructor_declaration_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_declaration_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_declaration_unsafeContext destructor_declaration_unsafe() {
		Destructor_declaration_unsafeContext _localctx = new Destructor_declaration_unsafeContext(Context, State);
		EnterRule(_localctx, 662, RULE_destructor_declaration_unsafe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3386;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3385; attributes();
				}
			}

			State = 3396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				{
				State = 3389;
				_la = TokenStream.La(1);
				if (_la==EXTERN) {
					{
					State = 3388; Match(EXTERN);
					}
				}

				State = 3392;
				_la = TokenStream.La(1);
				if (_la==UNSAFE) {
					{
					State = 3391; Match(UNSAFE);
					}
				}

				}
				break;
			case 2:
				{
				State = 3394; Match(UNSAFE);
				State = 3395; Match(EXTERN);
				}
				break;
			}
			State = 3398; Match(TILDE);
			State = 3399; identifier();
			State = 3400; Match(OPEN_PARENS);
			State = 3401; Match(CLOSE_PARENS);
			State = 3402; destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_modifiers_unsafeContext : ParserRuleContext {
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Static_constructor_modifiers_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_modifiers_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStatic_constructor_modifiers_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStatic_constructor_modifiers_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_modifiers_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() {
		Static_constructor_modifiers_unsafeContext _localctx = new Static_constructor_modifiers_unsafeContext(Context, State);
		EnterRule(_localctx, 664, RULE_static_constructor_modifiers_unsafe);
		int _la;
		try {
			State = 3428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3405;
				_la = TokenStream.La(1);
				if (_la==EXTERN || _la==UNSAFE) {
					{
					State = 3404;
					_la = TokenStream.La(1);
					if ( !(_la==EXTERN || _la==UNSAFE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 3407; Match(STATIC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3408; Match(EXTERN);
				State = 3409; Match(UNSAFE);
				State = 3410; Match(STATIC);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3411; Match(UNSAFE);
				State = 3412; Match(EXTERN);
				State = 3413; Match(STATIC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3414; Match(EXTERN);
				State = 3415; Match(STATIC);
				State = 3416; Match(UNSAFE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3417; Match(UNSAFE);
				State = 3418; Match(STATIC);
				State = 3419; Match(EXTERN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3420; Match(STATIC);
				State = 3421;
				_la = TokenStream.La(1);
				if ( !(_la==EXTERN || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3422; Match(STATIC);
				State = 3423; Match(EXTERN);
				State = 3424; Match(UNSAFE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3425; Match(STATIC);
				State = 3426; Match(UNSAFE);
				State = 3427; Match(EXTERN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statement_unsafeContext : ParserRuleContext {
		public Unsafe_statementContext unsafe_statement() {
			return GetRuleContext<Unsafe_statementContext>(0);
		}
		public Fixed_statementContext fixed_statement() {
			return GetRuleContext<Fixed_statementContext>(0);
		}
		public Embedded_statement_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statement_unsafeContext embedded_statement_unsafe() {
		Embedded_statement_unsafeContext _localctx = new Embedded_statement_unsafeContext(Context, State);
		EnterRule(_localctx, 666, RULE_embedded_statement_unsafe);
		try {
			State = 3432;
			switch (TokenStream.La(1)) {
			case UNSAFE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3430; unsafe_statement();
				}
				break;
			case FIXED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3431; fixed_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsafe_statementContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Unsafe_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafe_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnsafe_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnsafe_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafe_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsafe_statementContext unsafe_statement() {
		Unsafe_statementContext _localctx = new Unsafe_statementContext(Context, State);
		EnterRule(_localctx, 668, RULE_unsafe_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3434; Match(UNSAFE);
			State = 3435; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_unsafeContext : ParserRuleContext {
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Type_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterType_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitType_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_unsafeContext type_unsafe() {
		Type_unsafeContext _localctx = new Type_unsafeContext(Context, State);
		EnterRule(_localctx, 670, RULE_type_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3437; pointer_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(calculatorParser.STAR, 0); }
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(calculatorParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(calculatorParser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(Context, State);
		EnterRule(_localctx, 672, RULE_pointer_type);
		int _la;
		try {
			State = 3461;
			switch (TokenStream.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3439; simple_type();
				State = 3444;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 3442;
					switch (TokenStream.La(1)) {
					case OPEN_BRACKET:
						{
						State = 3440; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 3441; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3446;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 3447; Match(STAR);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3449; class_type();
				State = 3454;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 3452;
					switch (TokenStream.La(1)) {
					case OPEN_BRACKET:
						{
						State = 3450; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 3451; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3456;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 3457; Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3459; Match(VOID);
				State = 3460; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unmanaged_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Unmanaged_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unmanaged_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnmanaged_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnmanaged_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmanaged_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unmanaged_typeContext unmanaged_type() {
		Unmanaged_typeContext _localctx = new Unmanaged_typeContext(Context, State);
		EnterRule(_localctx, 674, RULE_unmanaged_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3463; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_no_array_creation_expression_unsafeContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Primary_no_array_creation_expression_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_no_array_creation_expression_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPrimary_no_array_creation_expression_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPrimary_no_array_creation_expression_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_no_array_creation_expression_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_no_array_creation_expression_unsafeContext primary_no_array_creation_expression_unsafe() {
		Primary_no_array_creation_expression_unsafeContext _localctx = new Primary_no_array_creation_expression_unsafeContext(Context, State);
		EnterRule(_localctx, 676, RULE_primary_no_array_creation_expression_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3465; primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expression_unsafeContext : ParserRuleContext {
		public Pointer_indirection_expressionContext pointer_indirection_expression() {
			return GetRuleContext<Pointer_indirection_expressionContext>(0);
		}
		public Addressof_expressionContext addressof_expression() {
			return GetRuleContext<Addressof_expressionContext>(0);
		}
		public Unary_expression_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterUnary_expression_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitUnary_expression_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expression_unsafeContext unary_expression_unsafe() {
		Unary_expression_unsafeContext _localctx = new Unary_expression_unsafeContext(Context, State);
		EnterRule(_localctx, 678, RULE_unary_expression_unsafe);
		try {
			State = 3469;
			switch (TokenStream.La(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3467; pointer_indirection_expression();
				}
				break;
			case AMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3468; addressof_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_indirection_expressionContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(calculatorParser.STAR, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pointer_indirection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_indirection_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPointer_indirection_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPointer_indirection_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_indirection_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_indirection_expressionContext pointer_indirection_expression() {
		Pointer_indirection_expressionContext _localctx = new Pointer_indirection_expressionContext(Context, State);
		EnterRule(_localctx, 680, RULE_pointer_indirection_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3471; Match(STAR);
			State = 3472; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Addressof_expressionContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(calculatorParser.AMP, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Addressof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAddressof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAddressof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Addressof_expressionContext addressof_expression() {
		Addressof_expressionContext _localctx = new Addressof_expressionContext(Context, State);
		EnterRule(_localctx, 682, RULE_addressof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3474; Match(AMP);
			State = 3475; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_expressionContext : ParserRuleContext {
		public ITerminalNode SIZEOF() { return GetToken(calculatorParser.SIZEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return GetRuleContext<Unmanaged_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Sizeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSizeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSizeof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_expressionContext sizeof_expression() {
		Sizeof_expressionContext _localctx = new Sizeof_expressionContext(Context, State);
		EnterRule(_localctx, 684, RULE_sizeof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3477; Match(SIZEOF);
			State = 3478; Match(OPEN_PARENS);
			State = 3479; unmanaged_type();
			State = 3480; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_statementContext : ParserRuleContext {
		public ITerminalNode FIXED() { return GetToken(calculatorParser.FIXED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Fixed_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_statementContext fixed_statement() {
		Fixed_statementContext _localctx = new Fixed_statementContext(Context, State);
		EnterRule(_localctx, 686, RULE_fixed_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3482; Match(FIXED);
			State = 3483; Match(OPEN_PARENS);
			State = 3484; pointer_type();
			State = 3485; fixed_pointer_declarators();
			State = 3486; Match(CLOSE_PARENS);
			State = 3487; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorsContext : ParserRuleContext {
		public Fixed_pointer_declaratorContext[] fixed_pointer_declarator() {
			return GetRuleContexts<Fixed_pointer_declaratorContext>();
		}
		public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return GetRuleContext<Fixed_pointer_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calculatorParser.COMMA, i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(Context, State);
		EnterRule(_localctx, 688, RULE_fixed_pointer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3489; fixed_pointer_declarator();
			State = 3494;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3490; Match(COMMA);
				State = 3491; fixed_pointer_declarator();
				}
				}
				State = 3496;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return GetRuleContext<Fixed_pointer_initializerContext>(0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorContext fixed_pointer_declarator() {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(Context, State);
		EnterRule(_localctx, 690, RULE_fixed_pointer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3497; identifier();
			State = 3498; Match(ASSIGNMENT);
			State = 3499; fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_initializerContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(calculatorParser.AMP, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_initializerContext fixed_pointer_initializer() {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(Context, State);
		EnterRule(_localctx, 692, RULE_fixed_pointer_initializer);
		try {
			State = 3504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3501; Match(AMP);
				State = 3502; variable_reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3503; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declaration_unsafeContext : ParserRuleContext {
		public Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() {
			return GetRuleContext<Fixed_size_buffer_declarationContext>(0);
		}
		public Struct_member_declaration_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declaration_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declaration_unsafeContext struct_member_declaration_unsafe() {
		Struct_member_declaration_unsafeContext _localctx = new Struct_member_declaration_unsafeContext(Context, State);
		EnterRule(_localctx, 694, RULE_struct_member_declaration_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3506; fixed_size_buffer_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declarationContext : ParserRuleContext {
		public ITerminalNode FIXED() { return GetToken(calculatorParser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return GetRuleContext<Buffer_element_typeContext>(0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return GetRuleContext<Fixed_size_buffer_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() {
			return GetRuleContext<Fixed_size_buffer_modifiersContext>(0);
		}
		public Fixed_size_buffer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() {
		Fixed_size_buffer_declarationContext _localctx = new Fixed_size_buffer_declarationContext(Context, State);
		EnterRule(_localctx, 696, RULE_fixed_size_buffer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3509;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3508; attributes();
				}
			}

			State = 3512;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 3511; fixed_size_buffer_modifiers();
				}
			}

			State = 3514; Match(FIXED);
			State = 3515; buffer_element_type();
			State = 3516; fixed_size_buffer_declarators();
			State = 3517; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_modifiersContext : ParserRuleContext {
		public Fixed_size_buffer_modifierContext[] fixed_size_buffer_modifier() {
			return GetRuleContexts<Fixed_size_buffer_modifierContext>();
		}
		public Fixed_size_buffer_modifierContext fixed_size_buffer_modifier(int i) {
			return GetRuleContext<Fixed_size_buffer_modifierContext>(i);
		}
		public Fixed_size_buffer_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() {
		Fixed_size_buffer_modifiersContext _localctx = new Fixed_size_buffer_modifiersContext(Context, State);
		EnterRule(_localctx, 698, RULE_fixed_size_buffer_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3520;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3519; fixed_size_buffer_modifier();
				}
				}
				State = 3522;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public Fixed_size_buffer_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_modifierContext fixed_size_buffer_modifier() {
		Fixed_size_buffer_modifierContext _localctx = new Fixed_size_buffer_modifierContext(Context, State);
		EnterRule(_localctx, 700, RULE_fixed_size_buffer_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3524;
			_la = TokenStream.La(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Buffer_element_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Buffer_element_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buffer_element_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBuffer_element_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBuffer_element_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuffer_element_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Buffer_element_typeContext buffer_element_type() {
		Buffer_element_typeContext _localctx = new Buffer_element_typeContext(Context, State);
		EnterRule(_localctx, 702, RULE_buffer_element_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3526; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorsContext : ParserRuleContext {
		public Fixed_size_buffer_declaratorContext[] fixed_size_buffer_declarator() {
			return GetRuleContexts<Fixed_size_buffer_declaratorContext>();
		}
		public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return GetRuleContext<Fixed_size_buffer_declaratorContext>(i);
		}
		public Fixed_size_buffer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
		Fixed_size_buffer_declaratorsContext _localctx = new Fixed_size_buffer_declaratorsContext(Context, State);
		EnterRule(_localctx, 704, RULE_fixed_size_buffer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3529;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3528; fixed_size_buffer_declarator();
				}
				}
				State = 3531;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(Context, State);
		EnterRule(_localctx, 706, RULE_fixed_size_buffer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3533; identifier();
			State = 3534; Match(OPEN_BRACKET);
			State = 3535; constant_expression();
			State = 3536; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializer_unsafeContext : ParserRuleContext {
		public Stackalloc_initializerContext stackalloc_initializer() {
			return GetRuleContext<Stackalloc_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
		Local_variable_initializer_unsafeContext _localctx = new Local_variable_initializer_unsafeContext(Context, State);
		EnterRule(_localctx, 708, RULE_local_variable_initializer_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3538; stackalloc_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stackalloc_initializerContext : ParserRuleContext {
		public ITerminalNode STACKALLOC() { return GetToken(calculatorParser.STACKALLOC, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return GetRuleContext<Unmanaged_typeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public Stackalloc_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackalloc_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStackalloc_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStackalloc_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStackalloc_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stackalloc_initializerContext stackalloc_initializer() {
		Stackalloc_initializerContext _localctx = new Stackalloc_initializerContext(Context, State);
		EnterRule(_localctx, 710, RULE_stackalloc_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3540; Match(STACKALLOC);
			State = 3541; unmanaged_type();
			State = 3542; Match(OPEN_BRACKET);
			State = 3543; expression();
			State = 3544; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(calculatorParser.FROM, 0); }
		public From_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterFrom_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitFrom_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_contextual_keywordContext from_contextual_keyword() {
		From_contextual_keywordContext _localctx = new From_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 712, RULE_from_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3546; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(calculatorParser.LET, 0); }
		public Let_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLet_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_contextual_keywordContext let_contextual_keyword() {
		Let_contextual_keywordContext _localctx = new Let_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 714, RULE_let_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3548; Match(LET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(calculatorParser.WHERE, 0); }
		public Where_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterWhere_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitWhere_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_contextual_keywordContext where_contextual_keyword() {
		Where_contextual_keywordContext _localctx = new Where_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 716, RULE_where_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3550; Match(WHERE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(calculatorParser.JOIN, 0); }
		public Join_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterJoin_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitJoin_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_contextual_keywordContext join_contextual_keyword() {
		Join_contextual_keywordContext _localctx = new Join_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 718, RULE_join_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3552; Match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(calculatorParser.ON, 0); }
		public On_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOn_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOn_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_contextual_keywordContext on_contextual_keyword() {
		On_contextual_keywordContext _localctx = new On_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 720, RULE_on_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3554; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equals_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(calculatorParser.EQUALS, 0); }
		public Equals_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equals_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEquals_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEquals_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equals_contextual_keywordContext equals_contextual_keyword() {
		Equals_contextual_keywordContext _localctx = new Equals_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 722, RULE_equals_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3556; Match(EQUALS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(calculatorParser.INTO, 0); }
		public Into_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInto_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInto_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInto_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Into_contextual_keywordContext into_contextual_keyword() {
		Into_contextual_keywordContext _localctx = new Into_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 724, RULE_into_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3558; Match(INTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(calculatorParser.ORDERBY, 0); }
		public Orderby_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOrderby_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOrderby_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_contextual_keywordContext orderby_contextual_keyword() {
		Orderby_contextual_keywordContext _localctx = new Orderby_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 726, RULE_orderby_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3560; Match(ORDERBY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ascending_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ASCENDING() { return GetToken(calculatorParser.ASCENDING, 0); }
		public Ascending_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascending_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAscending_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAscending_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscending_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ascending_contextual_keywordContext ascending_contextual_keyword() {
		Ascending_contextual_keywordContext _localctx = new Ascending_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 728, RULE_ascending_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3562; Match(ASCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Descending_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode DESCENDING() { return GetToken(calculatorParser.DESCENDING, 0); }
		public Descending_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descending_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDescending_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDescending_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescending_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Descending_contextual_keywordContext descending_contextual_keyword() {
		Descending_contextual_keywordContext _localctx = new Descending_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 730, RULE_descending_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3564; Match(DESCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(calculatorParser.SELECT, 0); }
		public Select_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSelect_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSelect_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_contextual_keywordContext select_contextual_keyword() {
		Select_contextual_keywordContext _localctx = new Select_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 732, RULE_select_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3566; Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(calculatorParser.GROUP, 0); }
		public Group_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGroup_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGroup_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_contextual_keywordContext group_contextual_keyword() {
		Group_contextual_keywordContext _localctx = new Group_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 734, RULE_group_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3568; Match(GROUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class By_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode BY() { return GetToken(calculatorParser.BY, 0); }
		public By_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_by_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBy_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBy_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBy_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public By_contextual_keywordContext by_contextual_keyword() {
		By_contextual_keywordContext _localctx = new By_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 736, RULE_by_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3570; Match(BY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partial_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode PARTIAL() { return GetToken(calculatorParser.PARTIAL, 0); }
		public Partial_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterPartial_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitPartial_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartial_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partial_contextual_keywordContext partial_contextual_keyword() {
		Partial_contextual_keywordContext _localctx = new Partial_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 738, RULE_partial_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3572; Match(PARTIAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(calculatorParser.ALIAS, 0); }
		public Alias_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAlias_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAlias_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_contextual_keywordContext alias_contextual_keyword() {
		Alias_contextual_keywordContext _localctx = new Alias_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 740, RULE_alias_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3574; Match(ALIAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode YIELD() { return GetToken(calculatorParser.YIELD, 0); }
		public Yield_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterYield_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitYield_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_contextual_keywordContext yield_contextual_keyword() {
		Yield_contextual_keywordContext _localctx = new Yield_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 742, RULE_yield_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3576; Match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(calculatorParser.GET, 0); }
		public Get_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterGet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitGet_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_contextual_keywordContext get_contextual_keyword() {
		Get_contextual_keywordContext _localctx = new Get_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 744, RULE_get_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3578; Match(GET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(calculatorParser.SET, 0); }
		public Set_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterSet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitSet_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_contextual_keywordContext set_contextual_keyword() {
		Set_contextual_keywordContext _localctx = new Set_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 746, RULE_set_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3580; Match(SET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(calculatorParser.ADD, 0); }
		public Add_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterAdd_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitAdd_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_contextual_keywordContext add_contextual_keyword() {
		Add_contextual_keywordContext _localctx = new Add_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 748, RULE_add_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3582; Match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(calculatorParser.REMOVE, 0); }
		public Remove_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRemove_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRemove_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_contextual_keywordContext remove_contextual_keyword() {
		Remove_contextual_keywordContext _localctx = new Remove_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 750, RULE_remove_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3584; Match(REMOVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode DYNAMIC() { return GetToken(calculatorParser.DYNAMIC, 0); }
		public Dynamic_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDynamic_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDynamic_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamic_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_contextual_keywordContext dynamic_contextual_keyword() {
		Dynamic_contextual_keywordContext _localctx = new Dynamic_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 752, RULE_dynamic_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3586; Match(DYNAMIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		public ITerminalNode ARGLIST() { return GetToken(calculatorParser.ARGLIST, 0); }
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 754, RULE_arglist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3588; Match(ARGLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(calculatorParser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(Context, State);
		EnterRule(_localctx, 756, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3590; _localctx.first = Match(ASSIGNMENT);
			State = 3591; _localctx.second = Match(GT);
			State = 3592;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(calculatorParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(calculatorParser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 758, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3594; _localctx.first = Match(GT);
			State = 3595; _localctx.second = Match(GT);
			State = 3596;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(calculatorParser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(calculatorParser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(Context, State);
		EnterRule(_localctx, 760, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3598; _localctx.first = Match(GT);
			State = 3599; _localctx.second = Match(OP_GE);
			State = 3600;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(calculatorParser.INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(calculatorParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(calculatorParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(calculatorParser.STRING_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(calculatorParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 762, RULE_literal);
		try {
			State = 3608;
			switch (TokenStream.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3602; boolean_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3603; Match(INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3604; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3605; Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3606; Match(STRING_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3607; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(calculatorParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(calculatorParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 764, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3610;
			_la = TokenStream.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABSTRACT() { return GetToken(calculatorParser.ABSTRACT, 0); }
		public ITerminalNode AS() { return GetToken(calculatorParser.AS, 0); }
		public ITerminalNode BASE() { return GetToken(calculatorParser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(calculatorParser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(calculatorParser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(calculatorParser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(calculatorParser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(calculatorParser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(calculatorParser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(calculatorParser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(calculatorParser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(calculatorParser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(calculatorParser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(calculatorParser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(calculatorParser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(calculatorParser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(calculatorParser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(calculatorParser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(calculatorParser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(calculatorParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(calculatorParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(calculatorParser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(calculatorParser.EXTERN, 0); }
		public ITerminalNode FALSE() { return GetToken(calculatorParser.FALSE, 0); }
		public ITerminalNode FINALLY() { return GetToken(calculatorParser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(calculatorParser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(calculatorParser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(calculatorParser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(calculatorParser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(calculatorParser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(calculatorParser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(calculatorParser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(calculatorParser.IN, 0); }
		public ITerminalNode INT() { return GetToken(calculatorParser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(calculatorParser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(calculatorParser.INTERNAL, 0); }
		public ITerminalNode IS() { return GetToken(calculatorParser.IS, 0); }
		public ITerminalNode LOCK() { return GetToken(calculatorParser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(calculatorParser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(calculatorParser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(calculatorParser.NEW, 0); }
		public ITerminalNode NULL() { return GetToken(calculatorParser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(calculatorParser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(calculatorParser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(calculatorParser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(calculatorParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(calculatorParser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(calculatorParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(calculatorParser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(calculatorParser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(calculatorParser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(calculatorParser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(calculatorParser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(calculatorParser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(calculatorParser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(calculatorParser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(calculatorParser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(calculatorParser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(calculatorParser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(calculatorParser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(calculatorParser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(calculatorParser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(calculatorParser.THROW, 0); }
		public ITerminalNode TRUE() { return GetToken(calculatorParser.TRUE, 0); }
		public ITerminalNode TRY() { return GetToken(calculatorParser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(calculatorParser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(calculatorParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(calculatorParser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(calculatorParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(calculatorParser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(calculatorParser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(calculatorParser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(calculatorParser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(calculatorParser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(calculatorParser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(calculatorParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 766, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3612;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARAMS - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STACKALLOC - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHILE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(calculatorParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 768, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3614; Match(CLASS);
			State = 3615; identifier();
			State = 3617;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3616; type_parameter_list();
				}
			}

			State = 3620;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3619; class_base();
				}
			}

			State = 3623;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3622; type_parameter_constraints_clauses();
				}
			}

			State = 3625; class_body();
			State = 3627;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3626; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(calculatorParser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 770, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3629; Match(STRUCT);
			State = 3630; identifier();
			State = 3632;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3631; type_parameter_list();
				}
			}

			State = 3635;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3634; struct_interfaces();
				}
			}

			State = 3638;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3637; type_parameter_constraints_clauses();
				}
			}

			State = 3640; struct_body();
			State = 3642;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3641; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(calculatorParser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(Context, State);
		EnterRule(_localctx, 772, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3644; Match(INTERFACE);
			State = 3645; identifier();
			State = 3647;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3646; variant_type_parameter_list();
				}
			}

			State = 3650;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3649; interface_base();
				}
			}

			State = 3653;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3652; type_parameter_constraints_clauses();
				}
			}

			State = 3655; interface_body();
			State = 3657;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3656; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(calculatorParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 774, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3659; Match(ENUM);
			State = 3660; identifier();
			State = 3662;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3661; enum_base();
				}
			}

			State = 3664; enum_body();
			State = 3666;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3665; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(calculatorParser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(Context, State);
		EnterRule(_localctx, 776, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3668; Match(DELEGATE);
			State = 3669; return_type();
			State = 3670; identifier();
			State = 3672;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3671; variant_type_parameter_list();
				}
			}

			State = 3674; Match(OPEN_PARENS);
			State = 3676;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3675; formal_parameter_list();
				}
			}

			State = 3678; Match(CLOSE_PARENS);
			State = 3680;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3679; type_parameter_constraints_clauses();
				}
			}

			State = 3682; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declaration2Context : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(calculatorParser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Event_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterEvent_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitEvent_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration2Context event_declaration2() {
		Event_declaration2Context _localctx = new Event_declaration2Context(Context, State);
		EnterRule(_localctx, 778, RULE_event_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3684; Match(EVENT);
			State = 3685; type();
			State = 3694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
			case 1:
				{
				State = 3686; variable_declarators();
				State = 3687; Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 3689; member_name();
				State = 3690; Match(OPEN_BRACE);
				State = 3691; event_accessor_declarations();
				State = 3692; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declaration2Context : ParserRuleContext {
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Field_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterField_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitField_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declaration2Context field_declaration2() {
		Field_declaration2Context _localctx = new Field_declaration2Context(Context, State);
		EnterRule(_localctx, 780, RULE_field_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3696; variable_declarators();
			State = 3697; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declaration2Context : ParserRuleContext {
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Property_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterProperty_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitProperty_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declaration2Context property_declaration2() {
		Property_declaration2Context _localctx = new Property_declaration2Context(Context, State);
		EnterRule(_localctx, 782, RULE_property_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3699; member_name();
			State = 3700; Match(OPEN_BRACE);
			State = 3701; accessor_declarations();
			State = 3702; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaration2Context : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(calculatorParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Constant_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstant_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstant_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaration2Context constant_declaration2() {
		Constant_declaration2Context _localctx = new Constant_declaration2Context(Context, State);
		EnterRule(_localctx, 784, RULE_constant_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3704; Match(CONST);
			State = 3705; type();
			State = 3706; constant_declarators();
			State = 3707; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declaration2Context : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Indexer_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterIndexer_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitIndexer_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declaration2Context indexer_declaration2() {
		Indexer_declaration2Context _localctx = new Indexer_declaration2Context(Context, State);
		EnterRule(_localctx, 786, RULE_indexer_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3709; Match(THIS);
			State = 3710; Match(OPEN_BRACKET);
			State = 3711; formal_parameter_list();
			State = 3712; Match(CLOSE_BRACKET);
			State = 3713; Match(OPEN_BRACE);
			State = 3714; accessor_declarations();
			State = 3715; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(calculatorParser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(Context, State);
		EnterRule(_localctx, 788, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3717; Match(TILDE);
			State = 3718; identifier();
			State = 3719; Match(OPEN_PARENS);
			State = 3720; Match(CLOSE_PARENS);
			State = 3721; destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declaration2Context constructor_declaration2() {
		Constructor_declaration2Context _localctx = new Constructor_declaration2Context(Context, State);
		EnterRule(_localctx, 790, RULE_constructor_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3723; identifier();
			State = 3724; Match(OPEN_PARENS);
			State = 3726;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3725; formal_parameter_list();
				}
			}

			State = 3728; Match(CLOSE_PARENS);
			State = 3730;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3729; constructor_initializer();
				}
			}

			State = 3732; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declaration2Context : ParserRuleContext {
		public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declaration2Context method_declaration2() {
		Method_declaration2Context _localctx = new Method_declaration2Context(Context, State);
		EnterRule(_localctx, 792, RULE_method_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3734; method_member_name();
			State = 3736;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3735; type_parameter_list();
				}
			}

			State = 3738; Match(OPEN_PARENS);
			State = 3740;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3739; formal_parameter_list();
				}
			}

			State = 3742; Match(CLOSE_PARENS);
			State = 3744;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3743; type_parameter_constraints_clauses();
				}
			}

			State = 3746; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		public Method_member_name2Context method_member_name2() {
			return GetRuleContext<Method_member_name2Context>(0);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(Context, State);
		EnterRule(_localctx, 794, RULE_method_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3748; method_member_name2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_name2Context : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(calculatorParser.DOUBLE_COLON, 0); }
		public Type_argument_list_optContext[] type_argument_list_opt() {
			return GetRuleContexts<Type_argument_list_optContext>();
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return GetRuleContext<Type_argument_list_optContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(calculatorParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(calculatorParser.DOT, i);
		}
		public Method_member_name2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_member_name2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_member_name2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_name2Context method_member_name2() {
		Method_member_name2Context _localctx = new Method_member_name2Context(Context, State);
		EnterRule(_localctx, 796, RULE_method_member_name2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,401,Context) ) {
			case 1:
				{
				State = 3750; identifier();
				}
				break;
			case 2:
				{
				State = 3751; identifier();
				State = 3752; Match(DOUBLE_COLON);
				State = 3753; identifier();
				}
				break;
			}
			State = 3763;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,402,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3757; type_argument_list_opt();
					State = 3758; Match(DOT);
					State = 3759; identifier();
					}
					} 
				}
				State = 3765;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,402,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declaration2Context : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(calculatorParser.OPERATOR, 0); }
		public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(calculatorParser.COMMA, 0); }
		public Operator_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterOperator_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitOperator_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declaration2Context operator_declaration2() {
		Operator_declaration2Context _localctx = new Operator_declaration2Context(Context, State);
		EnterRule(_localctx, 798, RULE_operator_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3766; Match(OPERATOR);
			State = 3767; overloadable_operator();
			State = 3768; Match(OPEN_PARENS);
			State = 3769; type();
			State = 3770; identifier();
			State = 3775;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 3771; Match(COMMA);
				State = 3772; type();
				State = 3773; identifier();
				}
			}

			State = 3777; Match(CLOSE_PARENS);
			State = 3778; operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_method_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_method_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_method_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_method_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_declaration2Context interface_method_declaration2() {
		Interface_method_declaration2Context _localctx = new Interface_method_declaration2Context(Context, State);
		EnterRule(_localctx, 800, RULE_interface_method_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3780; identifier();
			State = 3782;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3781; type_parameter_list();
				}
			}

			State = 3784; Match(OPEN_PARENS);
			State = 3786;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3785; formal_parameter_list();
				}
			}

			State = 3788; Match(CLOSE_PARENS);
			State = 3790;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3789; type_parameter_constraints_clauses();
				}
			}

			State = 3792; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_property_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Interface_property_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_property_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_property_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_property_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_property_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_property_declaration2Context interface_property_declaration2() {
		Interface_property_declaration2Context _localctx = new Interface_property_declaration2Context(Context, State);
		EnterRule(_localctx, 802, RULE_interface_property_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3794; identifier();
			State = 3795; Match(OPEN_BRACE);
			State = 3796; interface_accessors();
			State = 3797; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_event_declaration2Context : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(calculatorParser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(calculatorParser.SEMICOLON, 0); }
		public Interface_event_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_event_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_event_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_event_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_event_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_event_declaration2Context interface_event_declaration2() {
		Interface_event_declaration2Context _localctx = new Interface_event_declaration2Context(Context, State);
		EnterRule(_localctx, 804, RULE_interface_event_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3799; Match(EVENT);
			State = 3800; type();
			State = 3801; identifier();
			State = 3802; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_indexer_declaration2Context : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(calculatorParser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(calculatorParser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(calculatorParser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(calculatorParser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(calculatorParser.CLOSE_BRACE, 0); }
		public Interface_indexer_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_indexer_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterInterface_indexer_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitInterface_indexer_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_indexer_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_indexer_declaration2Context interface_indexer_declaration2() {
		Interface_indexer_declaration2Context _localctx = new Interface_indexer_declaration2Context(Context, State);
		EnterRule(_localctx, 806, RULE_interface_indexer_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3804; Match(THIS);
			State = 3805; Match(OPEN_BRACKET);
			State = 3806; formal_parameter_list();
			State = 3807; Match(CLOSE_BRACKET);
			State = 3808; Match(OPEN_BRACE);
			State = 3809; interface_accessors();
			State = 3810; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access2Context : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(calculatorParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Member_access2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMember_access2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMember_access2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access2Context member_access2() {
		Member_access2Context _localctx = new Member_access2Context(Context, State);
		EnterRule(_localctx, 808, RULE_member_access2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3812; Match(DOT);
			State = 3813; identifier();
			State = 3814; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocation2Context : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Method_invocation2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterMethod_invocation2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitMethod_invocation2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocation2Context method_invocation2() {
		Method_invocation2Context _localctx = new Method_invocation2Context(Context, State);
		EnterRule(_localctx, 810, RULE_method_invocation2);
		int _la;
		try {
			State = 3822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,408,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3816; Match(OPEN_PARENS);
				State = 3818;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 3817; argument_list();
					}
				}

				State = 3820; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3821; primary_expression_start();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expression2Context : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(calculatorParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(calculatorParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalculatorListener typedListener = listener as IcalculatorListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalculatorVisitor<TResult> typedVisitor = visitor as IcalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expression2Context object_creation_expression2() {
		Object_creation_expression2Context _localctx = new Object_creation_expression2Context(Context, State);
		EnterRule(_localctx, 812, RULE_object_creation_expression2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3824; Match(OPEN_PARENS);
			State = 3826;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
				{
				State = 3825; argument_list();
				}
			}

			State = 3828; Match(CLOSE_PARENS);
			State = 3830;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACE) {
				{
				State = 3829; object_or_collection_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 378: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 379: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 380: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xA5");
		sb.Append("\xEFB\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV");
		sb.Append("\x4W\tW\x4X\tX\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4");
		sb.Append("_\t_\x4`\t`\x4\x61\t\x61\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t");
		sb.Append("\x64\x4\x65\t\x65\x4\x66\t\x66\x4g\tg\x4h\th\x4i\ti\x4j\tj\x4");
		sb.Append("k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4q\tq\x4r\tr\x4s\t");
		sb.Append("s\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4{\t{\x4");
		sb.Append("|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4");
		sb.Append("\x82\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86");
		sb.Append("\x4\x87\t\x87\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B");
		sb.Append("\t\x8B\x4\x8C\t\x8C\x4\x8D\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4");
		sb.Append("\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92\x4\x93\t\x93\x4\x94\t\x94");
		sb.Append("\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98\t\x98\x4\x99");
		sb.Append("\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D\x4");
		sb.Append("\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2");
		sb.Append("\x4\xA3\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7");
		sb.Append("\t\xA7\x4\xA8\t\xA8\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4");
		sb.Append("\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0");
		sb.Append("\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3\x4\xB4\t\xB4\x4\xB5");
		sb.Append("\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9\t\xB9\x4");
		sb.Append("\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE");
		sb.Append("\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3");
		sb.Append("\t\xC3\x4\xC4\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4");
		sb.Append("\xC8\t\xC8\x4\xC9\t\xC9\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC");
		sb.Append("\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF\t\xCF\x4\xD0\t\xD0\x4\xD1");
		sb.Append("\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4\x4\xD5\t\xD5\x4");
		sb.Append("\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA\t\xDA");
		sb.Append("\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF");
		sb.Append("\t\xDF\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4");
		sb.Append("\xE4\t\xE4\x4\xE5\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8");
		sb.Append("\x4\xE9\t\xE9\x4\xEA\t\xEA\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED");
		sb.Append("\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0\t\xF0\x4\xF1\t\xF1\x4");
		sb.Append("\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5\x4\xF6\t\xF6");
		sb.Append("\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB");
		sb.Append("\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4");
		sb.Append("\x100\t\x100\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4");
		sb.Append("\x104\t\x104\x4\x105\t\x105\x4\x106\t\x106\x4\x107\t\x107\x4");
		sb.Append("\x108\t\x108\x4\x109\t\x109\x4\x10A\t\x10A\x4\x10B\t\x10B\x4");
		sb.Append("\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4\x10F\t\x10F\x4");
		sb.Append("\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113\x4");
		sb.Append("\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4");
		sb.Append("\x118\t\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4");
		sb.Append("\x11C\t\x11C\x4\x11D\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4");
		sb.Append("\x120\t\x120\x4\x121\t\x121\x4\x122\t\x122\x4\x123\t\x123\x4");
		sb.Append("\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126\x4\x127\t\x127\x4");
		sb.Append("\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t\x12B\x4");
		sb.Append("\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4");
		sb.Append("\x130\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4");
		sb.Append("\x134\t\x134\x4\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4");
		sb.Append("\x138\t\x138\x4\x139\t\x139\x4\x13A\t\x13A\x4\x13B\t\x13B\x4");
		sb.Append("\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t\x13E\x4\x13F\t\x13F\x4");
		sb.Append("\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143\t\x143\x4");
		sb.Append("\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4");
		sb.Append("\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4");
		sb.Append("\x14C\t\x14C\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4");
		sb.Append("\x150\t\x150\x4\x151\t\x151\x4\x152\t\x152\x4\x153\t\x153\x4");
		sb.Append("\x154\t\x154\x4\x155\t\x155\x4\x156\t\x156\x4\x157\t\x157\x4");
		sb.Append("\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4\x15B\t\x15B\x4");
		sb.Append("\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F\x4");
		sb.Append("\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4");
		sb.Append("\x164\t\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4");
		sb.Append("\x168\t\x168\x4\x169\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4");
		sb.Append("\x16C\t\x16C\x4\x16D\t\x16D\x4\x16E\t\x16E\x4\x16F\t\x16F\x4");
		sb.Append("\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172\x4\x173\t\x173\x4");
		sb.Append("\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t\x177\x4");
		sb.Append("\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4");
		sb.Append("\x17C\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4");
		sb.Append("\x180\t\x180\x4\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4");
		sb.Append("\x184\t\x184\x4\x185\t\x185\x4\x186\t\x186\x4\x187\t\x187\x4");
		sb.Append("\x188\t\x188\x4\x189\t\x189\x4\x18A\t\x18A\x4\x18B\t\x18B\x4");
		sb.Append("\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F\t\x18F\x4");
		sb.Append("\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4");
		sb.Append("\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x4\x197\t\x197\x4");
		sb.Append("\x198\t\x198\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x33E\n\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\a\x6\x344\n\x6\f\x6\xE\x6\x347\v\x6\x3\a\x3\a\x5\a");
		sb.Append("\x34B\n\a\x3\b\x3\b\x3\b\x3\b\a\b\x351\n\b\f\b\xE\b\x354\v\b");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\x5\t\x35A\n\t\x3\n\x3\n\x5\n\x35E\n\n\x3");
		sb.Append("\v\x3\v\x3\v\x5\v\x363\n\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3");
		sb.Append("\xE\x3\xF\x3\xF\x3\xF\a\xF\x36F\n\xF\f\xF\xE\xF\x372\v\xF\x3");
		sb.Append("\x10\x3\x10\a\x10\x376\n\x10\f\x10\xE\x10\x379\v\x10\x3\x10");
		sb.Append("\a\x10\x37C\n\x10\f\x10\xE\x10\x37F\v\x10\x3\x10\a\x10\x382");
		sb.Append("\n\x10\f\x10\xE\x10\x385\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\a");
		sb.Append("\x10\x38B\n\x10\f\x10\xE\x10\x38E\v\x10\x3\x10\a\x10\x391\n");
		sb.Append("\x10\f\x10\xE\x10\x394\v\x10\x3\x10\x3\x10\x3\x10\a\x10\x399");
		sb.Append("\n\x10\f\x10\xE\x10\x39C\v\x10\x3\x10\a\x10\x39F\n\x10\f\x10");
		sb.Append("\xE\x10\x3A2\v\x10\x3\x10\a\x10\x3A5\n\x10\f\x10\xE\x10\x3A8");
		sb.Append("\v\x10\x3\x10\x5\x10\x3AB\n\x10\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x5\x11\x3B1\n\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14");
		sb.Append("\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15\x3BE\n\x15\f\x15\xE");
		sb.Append("\x15\x3C1\v\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3");
		sb.Append("\x19\x3\x19\x3\x19\a\x19\x3CC\n\x19\f\x19\xE\x19\x3CF\v\x19");
		sb.Append("\x3\x1A\x5\x1A\x3D2\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x3DE\n\x1C\x3\x1D");
		sb.Append("\x3\x1D\a\x1D\x3E2\n\x1D\f\x1D\xE\x1D\x3E5\v\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x3ED\n\x1D\x3\x1D\a\x1D");
		sb.Append("\x3F0\n\x1D\f\x1D\xE\x1D\x3F3\v\x1D\a\x1D\x3F5\n\x1D\f\x1D\xE");
		sb.Append("\x1D\x3F8\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\x5\x1E\x409\n\x1E\x3\x1E\x5\x1E\x40C\n\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x5\x1E\x411\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x417");
		sb.Append("\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x41F");
		sb.Append("\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3");
		sb.Append("!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\a$\x433\n$\f$\xE$\x436\v$\x3");
		sb.Append("%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x444\n&\x3");
		sb.Append("\'\x3\'\x3\'\x3\'\x5\'\x44A\n\'\x3\'\x3\'\x5\'\x44E\n\'\x3\'");
		sb.Append("\x5\'\x451\n\'\x3(\x3(\x5(\x455\n(\x3)\x3)\x3)\x3)\x3)\x5)\x45C");
		sb.Append("\n)\x3)\x3)\x5)\x460\n)\x3*\x3*\x3*\a*\x465\n*\f*\xE*\x468\v");
		sb.Append("*\x3+\x3+\x3+\x3+\x3,\x3,\x5,\x470\n,\x3-\x3-\x3-\x5-\x475\n");
		sb.Append("-\x3-\x3-\x3.\x3.\x3.\a.\x47C\n.\f.\xE.\x47F\v.\x3/\x3/\x3/");
		sb.Append("\x3/\x3/\x5/\x486\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30");
		sb.Append("\x3\x30\x3\x30\x3\x30\x5\x30\x491\n\x30\x3\x30\x5\x30\x494\n");
		sb.Append("\x30\x3\x30\x3\x30\x3\x30\x5\x30\x499\n\x30\x3\x31\x3\x31\x3");
		sb.Append("\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33");
		sb.Append("\x3\x33\x3\x33\x3\x33\x5\x33\x4A9\n\x33\x3\x33\x3\x33\x5\x33");
		sb.Append("\x4AD\n\x33\x3\x34\x3\x34\x3\x34\a\x34\x4B2\n\x34\f\x34\xE\x34");
		sb.Append("\x4B5\v\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x4BC\n");
		sb.Append("\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36");
		sb.Append("\x3\x36\x3\x36\x5\x36\x4C8\n\x36\x3\x37\x3\x37\x5\x37\x4CC\n");
		sb.Append("\x37\x3\x37\x3\x37\x3\x37\x5\x37\x4D1\n\x37\x5\x37\x4D3\n\x37");
		sb.Append("\x3\x37\x3\x37\x3\x37\x5\x37\x4D8\n\x37\a\x37\x4DA\n\x37\f\x37");
		sb.Append("\xE\x37\x4DD\v\x37\x3\x38\x3\x38\x5\x38\x4E1\n\x38\x3\x38\x3");
		sb.Append("\x38\x3\x39\x3\x39\a\x39\x4E7\n\x39\f\x39\xE\x39\x4EA\v\x39");
		sb.Append("\x3:\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3");
		sb.Append("<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x508");
		sb.Append("\n=\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?");
		sb.Append("\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3");
		sb.Append("?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3");
		sb.Append("?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3");
		sb.Append("?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3");
		sb.Append("?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x55C\n?\x3@\x3@\x3@\x3");
		sb.Append("\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43");
		sb.Append("\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x570\n\x43");
		sb.Append("\f\x43\xE\x43\x573\v\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44");
		sb.Append("\a\x44\x57A\n\x44\f\x44\xE\x44\x57D\v\x44\x3\x45\x3\x45\x3\x45");
		sb.Append("\x3\x45\x3\x45\x3\x45\a\x45\x585\n\x45\f\x45\xE\x45\x588\v\x45");
		sb.Append("\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3");
		sb.Append("\x46\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x597\n\x46\f\x46\xE\x46");
		sb.Append("\x59A\v\x46\x3G\x3G\x3G\x3G\x3G\aG\x5A1\nG\fG\xEG\x5A4\vG\x3");
		sb.Append("G\x3G\x3G\x3H\x3H\x3I\x3I\x5I\x5AD\nI\x3J\x3J\x3K\x3K\x3K\x3");
		sb.Append("K\x3K\aK\x5B6\nK\fK\xEK\x5B9\vK\x3L\x3L\x3L\aL\x5BE\nL\fL\xE");
		sb.Append("L\x5C1\vL\x3M\x3M\x3M\aM\x5C6\nM\fM\xEM\x5C9\vM\x3N\x3N\x3N");
		sb.Append("\aN\x5CE\nN\fN\xEN\x5D1\vN\x3O\x3O\x3O\aO\x5D6\nO\fO\xEO\x5D9");
		sb.Append("\vO\x3P\x3P\x3P\aP\x5DE\nP\fP\xEP\x5E1\vP\x3Q\x3Q\x3Q\x5Q\x5E6");
		sb.Append("\nQ\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x5EE\nR\x3S\x3S\x3S\x3S\x3T");
		sb.Append("\x3T\x5T\x5F6\nT\x3T\x3T\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3");
		sb.Append("U\x3U\x3U\x5U\x605\nU\x3V\x3V\x5V\x609\nV\x3V\x3V\x3W\x3W\x3");
		sb.Append("W\aW\x610\nW\fW\xEW\x613\vW\x3X\x5X\x616\nX\x3X\x3X\x3X\x3Y");
		sb.Append("\x3Y\x3Z\x3Z\x5Z\x61F\nZ\x3Z\x3Z\x5Z\x623\nZ\x3[\x3[\x3[\a[");
		sb.Append("\x628\n[\f[\xE[\x62B\v[\x3\\\x3\\\x3]\x3]\x5]\x631\n]\x3^\x3");
		sb.Append("^\x3^\x3_\x3_\x5_\x638\n_\x3_\x3_\x3_\x3_\x3`\x5`\x63F\n`\x3");
		sb.Append("`\x3`\x5`\x643\n`\x3\x61\x3\x61\a\x61\x647\n\x61\f\x61\xE\x61");
		sb.Append("\x64A\v\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x5\x62\x651\n");
		sb.Append("\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64");
		sb.Append("\x3\x65\x3\x65\x5\x65\x65D\n\x65\x3\x65\x3\x65\x3\x65\x3\x65");
		sb.Append("\x3\x65\x3\x65\x3\x65\x3\x65\x3\x66\x3\x66\x5\x66\x669\n\x66");
		sb.Append("\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3");
		sb.Append("\x66\x3\x66\x3g\x3g\x5g\x677\ng\x3g\x3g\x3g\x3g\x3g\x3g\x3g");
		sb.Append("\x3g\x3g\x3g\x5g\x683\ng\x3h\x3h\x3h\x3i\x3i\x3i\ai\x68B\ni");
		sb.Append("\fi\xEi\x68E\vi\x3j\x3j\x5j\x692\nj\x3k\x3k\x5k\x696\nk\x3l");
		sb.Append("\x3l\x5l\x69A\nl\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3n\x3o\x3o\x3");
		sb.Append("o\x3o\x3p\x3p\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3");
		sb.Append("q\x3q\x5q\x6B7\nq\x3r\x3r\x5r\x6BB\nr\x3s\x3s\x3s\x5s\x6C0\n");
		sb.Append("s\x3t\x3t\x3u\x3u\x3v\x3v\x3v\x5v\x6C9\nv\x3w\x3w\x5w\x6CD\n");
		sb.Append("w\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x5x\x6DB\n");
		sb.Append("x\x3y\x3y\x5y\x6DF\ny\x3y\x3y\x3z\x6z\x6E4\nz\rz\xEz\x6E5\x3");
		sb.Append("{\x3{\x3|\x3|\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}\x5}\x6F4\n}\x3");
		sb.Append("~\x3~\x3~\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\a\x80\x6FE\n\x80");
		sb.Append("\f\x80\xE\x80\x701\v\x80\x3\x81\x3\x81\x3\x81\x5\x81\x706\n");
		sb.Append("\x81\x3\x82\x3\x82\x3\x82\x5\x82\x70B\n\x82\x3\x83\x3\x83\x3");
		sb.Append("\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x3\x86\x3\x86");
		sb.Append("\x5\x86\x718\n\x86\x3\x87\x3\x87\x5\x87\x71C\n\x87\x3\x88\x3");
		sb.Append("\x88\x3\x88\x3\x88\x3\x88\x3\x88\x3\x88\x5\x88\x725\n\x88\x3");
		sb.Append("\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x5\x8A");
		sb.Append("\x72F\n\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\a\x8B\x735\n\x8B\f\x8B");
		sb.Append("\xE\x8B\x738\v\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8D\x3\x8D\a\x8D");
		sb.Append("\x73F\n\x8D\f\x8D\xE\x8D\x742\v\x8D\x3\x8E\x3\x8E\x3\x8E\x3");
		sb.Append("\x8E\x3\x8E\x3\x8E\x5\x8E\x74A\n\x8E\x3\x8F\x3\x8F\x3\x8F\x3");
		sb.Append("\x8F\x5\x8F\x750\n\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3");
		sb.Append("\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91");
		sb.Append("\x3\x92\x3\x92\x3\x92\x5\x92\x763\n\x92\x3\x92\x3\x92\x5\x92");
		sb.Append("\x767\n\x92\x3\x92\x3\x92\x5\x92\x76B\n\x92\x3\x92\x3\x92\x3");
		sb.Append("\x92\x3\x93\x3\x93\x5\x93\x772\n\x93\x3\x94\x3\x94\x3\x95\x3");
		sb.Append("\x95\x3\x96\x3\x96\x3\x96\a\x96\x77B\n\x96\f\x96\xE\x96\x77E");
		sb.Append("\v\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97");
		sb.Append("\x3\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\x78E\n\x98");
		sb.Append("\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3");
		sb.Append("\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B");
		sb.Append("\x3\x9B\x5\x9B\x7A2\n\x9B\x3\x9C\x3\x9C\x5\x9C\x7A6\n\x9C\x3");
		sb.Append("\x9C\x3\x9C\x3\x9D\x3\x9D\x5\x9D\x7AC\n\x9D\x3\x9D\x3\x9D\x3");
		sb.Append("\x9E\x3\x9E\x3\x9E\x5\x9E\x7B3\n\x9E\x3\x9E\x5\x9E\x7B6\n\x9E");
		sb.Append("\x3\x9F\x3\x9F\x5\x9F\x7BA\n\x9F\x3\x9F\x5\x9F\x7BD\n\x9F\x3");
		sb.Append("\xA0\x3\xA0\a\xA0\x7C1\n\xA0\f\xA0\xE\xA0\x7C4\v\xA0\x3\xA1");
		sb.Append("\x3\xA1\x3\xA1\x3\xA1\x5\xA1\x7CA\n\xA1\x3\xA1\x3\xA1\x3\xA1");
		sb.Append("\x3\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3");
		sb.Append("\xA4\x3\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6");
		sb.Append("\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA8\x3");
		sb.Append("\xA8\x5\xA8\x7E9\n\xA8\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\x3");
		sb.Append("\xA9\x3\xA9\x3\xA9\x3\xA9\x5\xA9\x7F4\n\xA9\x3\xAA\x5\xAA\x7F7");
		sb.Append("\n\xAA\x3\xAA\x5\xAA\x7FA\n\xAA\x3\xAA\x5\xAA\x7FD\n\xAA\x3");
		sb.Append("\xAA\a\xAA\x800\n\xAA\f\xAA\xE\xAA\x803\v\xAA\x3\xAA\x5\xAA");
		sb.Append("\x806\n\xAA\x3\xAA\x3\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB");
		sb.Append("\x80E\n\xAB\x3\xAC\x3\xAC\x3\xAC\a\xAC\x813\n\xAC\f\xAC\xE\xAC");
		sb.Append("\x816\v\xAC\x3\xAD\x3\xAD\x5\xAD\x81A\n\xAD\x3\xAD\x5\xAD\x81D");
		sb.Append("\n\xAD\x3\xAD\x5\xAD\x820\n\xAD\x3\xAD\x3\xAD\x3\xAE\x6\xAE");
		sb.Append("\x825\n\xAE\r\xAE\xE\xAE\x826\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3");
		sb.Append("\xAF\x3\xB0\x6\xB0\x82F\n\xB0\r\xB0\xE\xB0\x830\x3\xB1\x3\xB1");
		sb.Append("\x5\xB1\x835\n\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2");
		sb.Append("\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB4\x6\xB4\x842\n\xB4\r\xB4");
		sb.Append("\xE\xB4\x843\x3\xB5\x3\xB5\x5\xB5\x848\n\xB5\x3\xB6\x5\xB6\x84B");
		sb.Append("\n\xB6\x3\xB6\x5\xB6\x84E\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6");
		sb.Append("\x3\xB6\x5\xB6\x855\n\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7");
		sb.Append("\x3\xB8\x5\xB8\x85D\n\xB8\x3\xB8\x5\xB8\x860\n\xB8\x3\xB8\x5");
		sb.Append("\xB8\x863\n\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x868\n\xB8\x3\xB8");
		sb.Append("\x5\xB8\x86B\n\xB8\x3\xB8\x5\xB8\x86E\n\xB8\x3\xB8\x3\xB8\x5");
		sb.Append("\xB8\x872\n\xB8\x3\xB9\x3\xB9\a\xB9\x876\n\xB9\f\xB9\xE\xB9");
		sb.Append("\x879\v\xB9\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA");
		sb.Append("\x3\xBA\x3\xBA\x5\xBA\x884\n\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB");
		sb.Append("\x3\xBC\x5\xBC\x88B\n\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x890\n");
		sb.Append("\xBC\x3\xBC\a\xBC\x893\n\xBC\f\xBC\xE\xBC\x896\v\xBC\x3\xBD");
		sb.Append("\x3\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\x89E\n\xBE\f\xBE\xE");
		sb.Append("\xBE\x8A1\v\xBE\x3\xBF\x3\xBF\x3\xBF\a\xBF\x8A6\n\xBF\f\xBF");
		sb.Append("\xE\xBF\x8A9\v\xBF\x3\xC0\x3\xC0\a\xC0\x8AD\n\xC0\f\xC0\xE\xC0");
		sb.Append("\x8B0\v\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC2\x3\xC2");
		sb.Append("\x3\xC2\x3\xC2\x5\xC2\x8BB\n\xC2\x3\xC2\x3\xC2\x5\xC2\x8BF\n");
		sb.Append("\xC2\x5\xC2\x8C1\n\xC2\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x8C6\n\xC3");
		sb.Append("\x3\xC4\x3\xC4\x3\xC4\a\xC4\x8CB\n\xC4\f\xC4\xE\xC4\x8CE\v\xC4");
		sb.Append("\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC6\x3\xC6\x5\xC6\x8D6\n\xC6");
		sb.Append("\x3\xC6\x3\xC6\x3\xC7\x6\xC7\x8DB\n\xC7\r\xC7\xE\xC7\x8DC\x3");
		sb.Append("\xC8\x5\xC8\x8E0\n\xC8\x3\xC8\x5\xC8\x8E3\n\xC8\x3\xC8\x3\xC8");
		sb.Append("\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x8EC\n\xC8\x3\xC8");
		sb.Append("\x5\xC8\x8EF\n\xC8\x3\xC9\x6\xC9\x8F2\n\xC9\r\xC9\xE\xC9\x8F3");
		sb.Append("\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3");
		sb.Append("\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x905\n");
		sb.Append("\xCA\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB");
		sb.Append("\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x5\xCB\x916");
		sb.Append("\n\xCB\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC");
		sb.Append("\x3\xCC\x3\xCC\x5\xCC\x922\n\xCC\x3\xCD\x3\xCD\x3\xCD\a\xCD");
		sb.Append("\x927\n\xCD\f\xCD\xE\xCD\x92A\v\xCD\x3\xCE\x3\xCE\x3\xCE\x3");
		sb.Append("\xCE\x3\xCF\x3\xCF\x3\xCF\a\xCF\x933\n\xCF\f\xCF\xE\xCF\x936");
		sb.Append("\v\xCF\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x93D\n\xD0");
		sb.Append("\x3\xD1\x3\xD1\x5\xD1\x941\n\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD3");
		sb.Append("\x5\xD3\x947\n\xD3\x3\xD3\x5\xD3\x94A\n\xD3\x3\xD3\x5\xD3\x94D");
		sb.Append("\n\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\x952\n\xD3\x3\xD3\x3\xD3");
		sb.Append("\x5\xD3\x956\n\xD3\x3\xD3\x3\xD3\x5\xD3\x95A\n\xD3\x3\xD4\x6");
		sb.Append("\xD4\x95D\n\xD4\r\xD4\xE\xD4\x95E\x3\xD5\x3\xD5\x3\xD5\x3\xD5");
		sb.Append("\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x3\xD5\x5");
		sb.Append("\xD5\x96D\n\xD5\x3\xD6\x3\xD6\x5\xD6\x971\n\xD6\x3\xD7\x3\xD7");
		sb.Append("\x3\xD8\x3\xD8\x5\xD8\x977\n\xD8\x3\xD9\x3\xD9\x3\xD9\x3\xD9");
		sb.Append("\x5\xD9\x97D\n\xD9\x5\xD9\x97F\n\xD9\x3\xDA\x3\xDA\x3\xDA\a");
		sb.Append("\xDA\x984\n\xDA\f\xDA\xE\xDA\x987\v\xDA\x3\xDB\x5\xDB\x98A\n");
		sb.Append("\xDB\x3\xDB\x5\xDB\x98D\n\xDB\x3\xDB\x3\xDB\x3\xDB\x5\xDB\x992");
		sb.Append("\n\xDB\x3\xDB\x5\xDB\x995\n\xDB\x3\xDC\x3\xDC\x3\xDC\x3\xDD");
		sb.Append("\x3\xDD\x3\xDE\x5\xDE\x99D\n\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE");
		sb.Append("\x3\xDF\x5\xDF\x9A4\n\xDF\x3\xDF\x5\xDF\x9A7\n\xDF\x3\xDF\x3");
		sb.Append("\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xE0\x6\xE0\x9B0\n\xE0\r");
		sb.Append("\xE0\xE\xE0\x9B1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3");
		sb.Append("\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x5\xE1\x9C0\n\xE1\x3");
		sb.Append("\xE2\x5\xE2\x9C3\n\xE2\x3\xE2\x5\xE2\x9C6\n\xE2\x3\xE2\x3\xE2");
		sb.Append("\x3\xE2\x5\xE2\x9CB\n\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\x9D0\n");
		sb.Append("\xE2\x5\xE2\x9D2\n\xE2\x3\xE3\x5\xE3\x9D5\n\xE3\x3\xE3\x5\xE3");
		sb.Append("\x9D8\n\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE4\x5\xE4\x9DE\n\xE4\x3");
		sb.Append("\xE4\x5\xE4\x9E1\n\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE5\x3\xE5\x3");
		sb.Append("\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5\x9ED\n\xE5\x3\xE6\x3");
		sb.Append("\xE6\x5\xE6\x9F1\n\xE6\x3\xE7\x5\xE7\x9F4\n\xE7\x3\xE7\x5\xE7");
		sb.Append("\x9F7\n\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7");
		sb.Append("\x3\xE7\x3\xE7\x3\xE7\x5\xE7\xA03\n\xE7\x3\xE8\x3\xE8\a\xE8");
		sb.Append("\xA07\n\xE8\f\xE8\xE\xE8\xA0A\v\xE8\x3\xE9\x3\xE9\x3\xE9\x3");
		sb.Append("\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9");
		sb.Append("\x5\xE9\xA18\n\xE9\x3\xEA\x5\xEA\xA1B\n\xEA\x3\xEA\x3\xEA\x3");
		sb.Append("\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x5\xEA\xA25\n\xEA\x3");
		sb.Append("\xEB\x5\xEB\xA28\n\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEC\x5\xEC\xA2E");
		sb.Append("\n\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xED\x5\xED\xA34\n\xED\x3\xED");
		sb.Append("\x5\xED\xA37\n\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3\xEE");
		sb.Append("\x3\xEE\a\xEE\xA40\n\xEE\f\xEE\xE\xEE\xA43\v\xEE\x3\xEF\x3\xEF");
		sb.Append("\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3");
		sb.Append("\xEF\x5\xEF\xA50\n\xEF\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\xA56");
		sb.Append("\n\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x3\xF1\x5\xF1\xA5E");
		sb.Append("\n\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF2\x3\xF2\a\xF2\xA66");
		sb.Append("\n\xF2\f\xF2\xE\xF2\xA69\v\xF2\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x5");
		sb.Append("\xF3\xA6F\n\xF3\x3\xF4\x3\xF4\x3\xF4\x5\xF4\xA74\n\xF4\x3\xF5");
		sb.Append("\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF6\x3");
		sb.Append("\xF6\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7");
		sb.Append("\x3\xF7\x3\xF7\x3\xF7\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3");
		sb.Append("\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8\x3\xF8");
		sb.Append("\x3\xF8\x3\xF8\x5\xF8\xA9B\n\xF8\x3\xF9\x3\xF9\x3\xF9\x3\xF9");
		sb.Append("\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3");
		sb.Append("\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9\x3\xF9");
		sb.Append("\x3\xF9\x5\xF9\xAB3\n\xF9\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA");
		sb.Append("\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3\xFA\x3");
		sb.Append("\xFA\x3\xFA\x3\xFA\x5\xFA\xAC5\n\xFA\x3\xFB\x3\xFB\x5\xFB\xAC9");
		sb.Append("\n\xFB\x3\xFC\x5\xFC\xACC\n\xFC\x3\xFC\x5\xFC\xACF\n\xFC\x3");
		sb.Append("\xFC\x3\xFC\x3\xFC\x3\xFD\x6\xFD\xAD5\n\xFD\r\xFD\xE\xFD\xAD6");
		sb.Append("\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x5\xFE\xADF\n\xFE");
		sb.Append("\x3\xFF\x3\xFF\x3\xFF\x5\xFF\xAE4\n\xFF\x3\xFF\x3\xFF\x5\xFF");
		sb.Append("\xAE8\n\xFF\x3\x100\x3\x100\x3\x100\x3\x100\x5\x100\xAEE\n\x100");
		sb.Append("\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x5\x100\xAF5\n\x100");
		sb.Append("\x3\x100\x5\x100\xAF8\n\x100\x3\x101\x3\x101\x5\x101\xAFC\n");
		sb.Append("\x101\x3\x102\x5\x102\xAFF\n\x102\x3\x102\x3\x102\x3\x102\x3");
		sb.Append("\x102\x3\x102\x3\x102\x3\x103\x3\x103\x3\x104\x3\x104\x5\x104");
		sb.Append("\xB0B\n\x104\x3\x105\x3\x105\x3\x106\x3\x106\x5\x106\xB11\n");
		sb.Append("\x106\x3\x107\x3\x107\x5\x107\xB15\n\x107\x3\x108\x5\x108\xB18");
		sb.Append("\n\x108\x3\x108\x5\x108\xB1B\n\x108\x3\x108\x5\x108\xB1E\n\x108");
		sb.Append("\x3\x108\x3\x108\x3\x108\x5\x108\xB23\n\x108\x3\x108\x5\x108");
		sb.Append("\xB26\n\x108\x3\x108\x5\x108\xB29\n\x108\x3\x108\x3\x108\x5");
		sb.Append("\x108\xB2D\n\x108\x3\x109\x3\x109\a\x109\xB31\n\x109\f\x109");
		sb.Append("\xE\x109\xB34\v\x109\x3\x10A\x3\x10A\x3\x10A\x3\x10A\x3\x10A");
		sb.Append("\x3\x10A\x5\x10A\xB3C\n\x10A\x3\x10B\x3\x10B\x3\x10B\x3\x10C");
		sb.Append("\x3\x10C\x5\x10C\xB43\n\x10C\x3\x10C\x3\x10C\x3\x10D\x3\x10D");
		sb.Append("\a\x10D\xB49\n\x10D\f\x10D\xE\x10D\xB4C\v\x10D\x3\x10E\x5\x10E");
		sb.Append("\xB4F\n\x10E\x3\x10E\x5\x10E\xB52\n\x10E\x3\x10E\x3\x10E\x3");
		sb.Append("\x10E\x3\x10E\x3\x10E\x3\x10E\x5\x10E\xB5A\n\x10E\x3\x10F\x3");
		sb.Append("\x10F\a\x10F\xB5E\n\x10F\f\x10F\xE\x10F\xB61\v\x10F\x3\x10F");
		sb.Append("\x6\x10F\xB64\n\x10F\r\x10F\xE\x10F\xB65\x3\x110\x3\x110\x3");
		sb.Append("\x110\x3\x110\a\x110\xB6C\n\x110\f\x110\xE\x110\xB6F\v\x110");
		sb.Append("\x3\x111\x6\x111\xB72\n\x111\r\x111\xE\x111\xB73\x3\x112\x3");
		sb.Append("\x112\x5\x112\xB78\n\x112\x3\x112\x3\x112\x3\x113\x3\x113\a");
		sb.Append("\x113\xB7E\n\x113\f\x113\xE\x113\xB81\v\x113\x3\x114\x3\x114");
		sb.Append("\x3\x114\x3\x114\x3\x114\x5\x114\xB88\n\x114\x3\x114\x3\x114");
		sb.Append("\x5\x114\xB8C\n\x114\x3\x115\x3\x115\x3\x115\a\x115\xB91\n\x115");
		sb.Append("\f\x115\xE\x115\xB94\v\x115\x3\x116\x5\x116\xB97\n\x116\x3\x116");
		sb.Append("\x5\x116\xB9A\n\x116\x3\x116\x5\x116\xB9D\n\x116\x3\x116\x3");
		sb.Append("\x116\x3\x116\x5\x116\xBA2\n\x116\x3\x116\x5\x116\xBA5\n\x116");
		sb.Append("\x3\x116\x5\x116\xBA8\n\x116\x3\x116\x3\x116\x5\x116\xBAC\n");
		sb.Append("\x116\x3\x117\x3\x117\a\x117\xBB0\n\x117\f\x117\xE\x117\xBB3");
		sb.Append("\v\x117\x3\x118\x3\x118\x3\x118\x3\x118\x3\x118\x3\x118\x5\x118");
		sb.Append("\xBBB\n\x118\x3\x119\x3\x119\x3\x119\x3\x119\x3\x11A\x5\x11A");
		sb.Append("\xBC2\n\x11A\x3\x11A\x5\x11A\xBC5\n\x11A\x3\x11A\x3\x11A\x3");
		sb.Append("\x11A\x5\x11A\xBCA\n\x11A\x3\x11A\x5\x11A\xBCD\n\x11A\x3\x11A");
		sb.Append("\a\x11A\xBD0\n\x11A\f\x11A\xE\x11A\xBD3\v\x11A\x3\x11B\x3\x11B");
		sb.Append("\x3\x11C\x3\x11C\x3\x11C\x3\x11D\x3\x11D\x5\x11D\xBDC\n\x11D");
		sb.Append("\x3\x11D\x3\x11D\x3\x11E\x6\x11E\xBE1\n\x11E\r\x11E\xE\x11E");
		sb.Append("\xBE2\x3\x11F\x5\x11F\xBE6\n\x11F\x3\x11F\x5\x11F\xBE9\n\x11F");
		sb.Append("\x3\x11F\x3\x11F\x3\x11F\x5\x11F\xBEE\n\x11F\x3\x11F\x3\x11F");
		sb.Append("\x5\x11F\xBF2\n\x11F\x3\x11F\x3\x11F\x5\x11F\xBF6\n\x11F\x3");
		sb.Append("\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F");
		sb.Append("\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x5");
		sb.Append("\x11F\xC07\n\x11F\x3\x11F\x3\x11F\x3\x11F\x5\x11F\xC0C\n\x11F");
		sb.Append("\x3\x11F\x3\x11F\x5\x11F\xC10\n\x11F\x3\x11F\x3\x11F\x5\x11F");
		sb.Append("\xC14\n\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F\x3\x11F");
		sb.Append("\x3\x11F\x5\x11F\xC1D\n\x11F\x3\x120\x5\x120\xC20\n\x120\x3");
		sb.Append("\x120\x5\x120\xC23\n\x120\x3\x120\x3\x120\x3\x120\x5\x120\xC28");
		sb.Append("\n\x120\x3\x120\x3\x120\x5\x120\xC2C\n\x120\x3\x120\x3\x120");
		sb.Append("\x5\x120\xC30\n\x120\x3\x120\x3\x120\x3\x121\x5\x121\xC35\n");
		sb.Append("\x121\x3\x121\x5\x121\xC38\n\x121\x3\x121\x3\x121\x3\x121\x3");
		sb.Append("\x121\x3\x121\x3\x121\x3\x122\x5\x122\xC41\n\x122\x3\x122\x3");
		sb.Append("\x122\x3\x122\x5\x122\xC46\n\x122\x3\x122\x3\x122\x3\x122\x5");
		sb.Append("\x122\xC4B\n\x122\x3\x122\x3\x122\x3\x122\x5\x122\xC50\n\x122");
		sb.Append("\x3\x122\x3\x122\x3\x122\x5\x122\xC55\n\x122\x5\x122\xC57\n");
		sb.Append("\x122\x3\x123\x5\x123\xC5A\n\x123\x3\x123\x5\x123\xC5D\n\x123");
		sb.Append("\x3\x123\x3\x123\x3\x123\x3\x123\x3\x123\x3\x124\x5\x124\xC65");
		sb.Append("\n\x124\x3\x124\x5\x124\xC68\n\x124\x3\x124\x3\x124\x3\x124");
		sb.Append("\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124\x3\x125\x5");
		sb.Append("\x125\xC74\n\x125\x3\x125\x5\x125\xC77\n\x125\x3\x125\x3\x125");
		sb.Append("\x3\x125\x5\x125\xC7C\n\x125\x3\x125\x3\x125\x5\x125\xC80\n");
		sb.Append("\x125\x3\x126\x3\x126\x3\x126\x3\x127\x3\x127\x3\x127\x3\x127");
		sb.Append("\x3\x127\x5\x127\xC8A\n\x127\x3\x127\x3\x127\x5\x127\xC8E\n");
		sb.Append("\x127\x3\x128\x6\x128\xC91\n\x128\r\x128\xE\x128\xC92\x3\x129");
		sb.Append("\x3\x129\x3\x12A\x3\x12A\x3\x12A\a\x12A\xC9A\n\x12A\f\x12A\xE");
		sb.Append("\x12A\xC9D\v\x12A\x3\x12B\x5\x12B\xCA0\n\x12B\x3\x12B\x3\x12B");
		sb.Append("\x3\x12B\x5\x12B\xCA5\n\x12B\x3\x12C\x5\x12C\xCA8\n\x12C\x3");
		sb.Append("\x12C\x5\x12C\xCAB\n\x12C\x3\x12C\x3\x12C\x3\x12C\x3\x12C\x5");
		sb.Append("\x12C\xCB1\n\x12C\x3\x12C\x3\x12C\x5\x12C\xCB5\n\x12C\x3\x12C");
		sb.Append("\x3\x12C\x5\x12C\xCB9\n\x12C\x3\x12C\x3\x12C\x3\x12D\x3\x12D");
		sb.Append("\a\x12D\xCBF\n\x12D\f\x12D\xE\x12D\xCC2\v\x12D\x3\x12E\x3\x12E");
		sb.Append("\x3\x12E\x3\x12E\x3\x12E\x3\x12E\x5\x12E\xCCA\n\x12E\x3\x12F");
		sb.Append("\x3\x12F\x3\x130\x6\x130\xCCF\n\x130\r\x130\xE\x130\xCD0\x3");
		sb.Append("\x131\x3\x131\x3\x131\x3\x131\x5\x131\xCD7\n\x131\x3\x131\x3");
		sb.Append("\x131\x3\x132\x3\x132\x3\x132\x3\x133\x3\x133\x5\x133\xCE0\n");
		sb.Append("\x133\x3\x134\x3\x134\x3\x135\x6\x135\xCE5\n\x135\r\x135\xE");
		sb.Append("\x135\xCE6\x3\x136\x3\x136\x5\x136\xCEB\n\x136\x3\x136\x3\x136");
		sb.Append("\x5\x136\xCEF\n\x136\x3\x136\x3\x136\x3\x137\x3\x137\x3\x137");
		sb.Append("\x3\x138\x3\x138\x5\x138\xCF8\n\x138\x3\x139\x3\x139\x3\x139");
		sb.Append("\a\x139\xCFD\n\x139\f\x139\xE\x139\xD00\v\x139\x3\x13A\x3\x13A");
		sb.Append("\x5\x13A\xD04\n\x13A\x3\x13B\x3\x13B\x3\x13C\x3\x13C\x5\x13C");
		sb.Append("\xD0A\n\x13C\x3\x13C\x3\x13C\x3\x13D\x3\x13D\x3\x13D\a\x13D");
		sb.Append("\xD11\n\x13D\f\x13D\xE\x13D\xD14\v\x13D\x3\x13E\x3\x13E\x3\x13F");
		sb.Append("\x3\x13F\x3\x13F\a\x13F\xD1B\n\x13F\f\x13F\xE\x13F\xD1E\v\x13F");
		sb.Append("\x3\x140\x3\x140\x3\x140\x3\x140\x3\x141\x3\x141\x3\x142\x3");
		sb.Append("\x142\x3\x143\x3\x143\x3\x144\x3\x144\x3\x145\x3\x145\x3\x146");
		sb.Append("\x3\x146\x3\x147\x3\x147\x3\x148\x3\x148\x3\x149\x3\x149\x3");
		sb.Append("\x14A\x3\x14A\x3\x14B\x3\x14B\x3\x14C\x3\x14C\x3\x14D\x5\x14D");
		sb.Append("\xD3D\n\x14D\x3\x14D\x5\x14D\xD40\n\x14D\x3\x14D\x5\x14D\xD43");
		sb.Append("\n\x14D\x3\x14D\x3\x14D\x5\x14D\xD47\n\x14D\x3\x14D\x3\x14D");
		sb.Append("\x3\x14D\x3\x14D\x3\x14D\x3\x14D\x3\x14E\x5\x14E\xD50\n\x14E");
		sb.Append("\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3");
		sb.Append("\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E");
		sb.Append("\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x3\x14E\x5\x14E\xD67");
		sb.Append("\n\x14E\x3\x14F\x3\x14F\x5\x14F\xD6B\n\x14F\x3\x150\x3\x150");
		sb.Append("\x3\x150\x3\x151\x3\x151\x3\x152\x3\x152\x3\x152\a\x152\xD75");
		sb.Append("\n\x152\f\x152\xE\x152\xD78\v\x152\x3\x152\x3\x152\x3\x152\x3");
		sb.Append("\x152\x3\x152\a\x152\xD7F\n\x152\f\x152\xE\x152\xD82\v\x152");
		sb.Append("\x3\x152\x3\x152\x3\x152\x3\x152\x5\x152\xD88\n\x152\x3\x153");
		sb.Append("\x3\x153\x3\x154\x3\x154\x3\x155\x3\x155\x5\x155\xD90\n\x155");
		sb.Append("\x3\x156\x3\x156\x3\x156\x3\x157\x3\x157\x3\x157\x3\x158\x3");
		sb.Append("\x158\x3\x158\x3\x158\x3\x158\x3\x159\x3\x159\x3\x159\x3\x159");
		sb.Append("\x3\x159\x3\x159\x3\x159\x3\x15A\x3\x15A\x3\x15A\a\x15A\xDA7");
		sb.Append("\n\x15A\f\x15A\xE\x15A\xDAA\v\x15A\x3\x15B\x3\x15B\x3\x15B\x3");
		sb.Append("\x15B\x3\x15C\x3\x15C\x3\x15C\x5\x15C\xDB3\n\x15C\x3\x15D\x3");
		sb.Append("\x15D\x3\x15E\x5\x15E\xDB8\n\x15E\x3\x15E\x5\x15E\xDBB\n\x15E");
		sb.Append("\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15E\x3\x15F\x6\x15F\xDC3");
		sb.Append("\n\x15F\r\x15F\xE\x15F\xDC4\x3\x160\x3\x160\x3\x161\x3\x161");
		sb.Append("\x3\x162\x6\x162\xDCC\n\x162\r\x162\xE\x162\xDCD\x3\x163\x3");
		sb.Append("\x163\x3\x163\x3\x163\x3\x163\x3\x164\x3\x164\x3\x165\x3\x165");
		sb.Append("\x3\x165\x3\x165\x3\x165\x3\x165\x3\x166\x3\x166\x3\x167\x3");
		sb.Append("\x167\x3\x168\x3\x168\x3\x169\x3\x169\x3\x16A\x3\x16A\x3\x16B");
		sb.Append("\x3\x16B\x3\x16C\x3\x16C\x3\x16D\x3\x16D\x3\x16E\x3\x16E\x3");
		sb.Append("\x16F\x3\x16F\x3\x170\x3\x170\x3\x171\x3\x171\x3\x172\x3\x172");
		sb.Append("\x3\x173\x3\x173\x3\x174\x3\x174\x3\x175\x3\x175\x3\x176\x3");
		sb.Append("\x176\x3\x177\x3\x177\x3\x178\x3\x178\x3\x179\x3\x179\x3\x17A");
		sb.Append("\x3\x17A\x3\x17B\x3\x17B\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x3");
		sb.Append("\x17D\x3\x17D\x3\x17D\x3\x17D\x3\x17E\x3\x17E\x3\x17E\x3\x17E");
		sb.Append("\x3\x17F\x3\x17F\x3\x17F\x3\x17F\x3\x17F\x3\x17F\x5\x17F\xE1B");
		sb.Append("\n\x17F\x3\x180\x3\x180\x3\x181\x3\x181\x3\x182\x3\x182\x3\x182");
		sb.Append("\x5\x182\xE24\n\x182\x3\x182\x5\x182\xE27\n\x182\x3\x182\x5");
		sb.Append("\x182\xE2A\n\x182\x3\x182\x3\x182\x5\x182\xE2E\n\x182\x3\x183");
		sb.Append("\x3\x183\x3\x183\x5\x183\xE33\n\x183\x3\x183\x5\x183\xE36\n");
		sb.Append("\x183\x3\x183\x5\x183\xE39\n\x183\x3\x183\x3\x183\x5\x183\xE3D");
		sb.Append("\n\x183\x3\x184\x3\x184\x3\x184\x5\x184\xE42\n\x184\x3\x184");
		sb.Append("\x5\x184\xE45\n\x184\x3\x184\x5\x184\xE48\n\x184\x3\x184\x3");
		sb.Append("\x184\x5\x184\xE4C\n\x184\x3\x185\x3\x185\x3\x185\x5\x185\xE51");
		sb.Append("\n\x185\x3\x185\x3\x185\x5\x185\xE55\n\x185\x3\x186\x3\x186");
		sb.Append("\x3\x186\x3\x186\x5\x186\xE5B\n\x186\x3\x186\x3\x186\x5\x186");
		sb.Append("\xE5F\n\x186\x3\x186\x3\x186\x5\x186\xE63\n\x186\x3\x186\x3");
		sb.Append("\x186\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187\x3\x187");
		sb.Append("\x3\x187\x3\x187\x3\x187\x5\x187\xE71\n\x187\x3\x188\x3\x188");
		sb.Append("\x3\x188\x3\x189\x3\x189\x3\x189\x3\x189\x3\x189\x3\x18A\x3");
		sb.Append("\x18A\x3\x18A\x3\x18A\x3\x18A\x3\x18B\x3\x18B\x3\x18B\x3\x18B");
		sb.Append("\x3\x18B\x3\x18B\x3\x18B\x3\x18B\x3\x18C\x3\x18C\x3\x18C\x3");
		sb.Append("\x18C\x3\x18C\x3\x18C\x3\x18D\x3\x18D\x3\x18D\x5\x18D\xE91\n");
		sb.Append("\x18D\x3\x18D\x3\x18D\x5\x18D\xE95\n\x18D\x3\x18D\x3\x18D\x3");
		sb.Append("\x18E\x3\x18E\x5\x18E\xE9B\n\x18E\x3\x18E\x3\x18E\x5\x18E\xE9F");
		sb.Append("\n\x18E\x3\x18E\x3\x18E\x5\x18E\xEA3\n\x18E\x3\x18E\x3\x18E");
		sb.Append("\x3\x18F\x3\x18F\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x5");
		sb.Append("\x190\xEAE\n\x190\x3\x190\x3\x190\x3\x190\x3\x190\a\x190\xEB4");
		sb.Append("\n\x190\f\x190\xE\x190\xEB7\v\x190\x3\x191\x3\x191\x3\x191\x3");
		sb.Append("\x191\x3\x191\x3\x191\x3\x191\x3\x191\x3\x191\x5\x191\xEC2\n");
		sb.Append("\x191\x3\x191\x3\x191\x3\x191\x3\x192\x3\x192\x5\x192\xEC9\n");
		sb.Append("\x192\x3\x192\x3\x192\x5\x192\xECD\n\x192\x3\x192\x3\x192\x5");
		sb.Append("\x192\xED1\n\x192\x3\x192\x3\x192\x3\x193\x3\x193\x3\x193\x3");
		sb.Append("\x193\x3\x193\x3\x194\x3\x194\x3\x194\x3\x194\x3\x194\x3\x195");
		sb.Append("\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3\x195\x3");
		sb.Append("\x196\x3\x196\x3\x196\x3\x196\x3\x197\x3\x197\x5\x197\xEED\n");
		sb.Append("\x197\x3\x197\x3\x197\x5\x197\xEF1\n\x197\x3\x198\x3\x198\x5");
		sb.Append("\x198\xEF5\n\x198\x3\x198\x3\x198\x5\x198\xEF9\n\x198\x3\x198");
		sb.Append("\x2\x2\x199\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E");
		sb.Append(" \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`");
		sb.Append("\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90");
		sb.Append("\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE");
		sb.Append("\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC");
		sb.Append("\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA");
		sb.Append("\xEC\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104\x106");
		sb.Append("\x108\x10A\x10C\x10E\x110\x112\x114\x116\x118\x11A\x11C\x11E");
		sb.Append("\x120\x122\x124\x126\x128\x12A\x12C\x12E\x130\x132\x134\x136");
		sb.Append("\x138\x13A\x13C\x13E\x140\x142\x144\x146\x148\x14A\x14C\x14E");
		sb.Append("\x150\x152\x154\x156\x158\x15A\x15C\x15E\x160\x162\x164\x166");
		sb.Append("\x168\x16A\x16C\x16E\x170\x172\x174\x176\x178\x17A\x17C\x17E");
		sb.Append("\x180\x182\x184\x186\x188\x18A\x18C\x18E\x190\x192\x194\x196");
		sb.Append("\x198\x19A\x19C\x19E\x1A0\x1A2\x1A4\x1A6\x1A8\x1AA\x1AC\x1AE");
		sb.Append("\x1B0\x1B2\x1B4\x1B6\x1B8\x1BA\x1BC\x1BE\x1C0\x1C2\x1C4\x1C6");
		sb.Append("\x1C8\x1CA\x1CC\x1CE\x1D0\x1D2\x1D4\x1D6\x1D8\x1DA\x1DC\x1DE");
		sb.Append("\x1E0\x1E2\x1E4\x1E6\x1E8\x1EA\x1EC\x1EE\x1F0\x1F2\x1F4\x1F6");
		sb.Append("\x1F8\x1FA\x1FC\x1FE\x200\x202\x204\x206\x208\x20A\x20C\x20E");
		sb.Append("\x210\x212\x214\x216\x218\x21A\x21C\x21E\x220\x222\x224\x226");
		sb.Append("\x228\x22A\x22C\x22E\x230\x232\x234\x236\x238\x23A\x23C\x23E");
		sb.Append("\x240\x242\x244\x246\x248\x24A\x24C\x24E\x250\x252\x254\x256");
		sb.Append("\x258\x25A\x25C\x25E\x260\x262\x264\x266\x268\x26A\x26C\x26E");
		sb.Append("\x270\x272\x274\x276\x278\x27A\x27C\x27E\x280\x282\x284\x286");
		sb.Append("\x288\x28A\x28C\x28E\x290\x292\x294\x296\x298\x29A\x29C\x29E");
		sb.Append("\x2A0\x2A2\x2A4\x2A6\x2A8\x2AA\x2AC\x2AE\x2B0\x2B2\x2B4\x2B6");
		sb.Append("\x2B8\x2BA\x2BC\x2BE\x2C0\x2C2\x2C4\x2C6\x2C8\x2CA\x2CC\x2CE");
		sb.Append("\x2D0\x2D2\x2D4\x2D6\x2D8\x2DA\x2DC\x2DE\x2E0\x2E2\x2E4\x2E6");
		sb.Append("\x2E8\x2EA\x2EC\x2EE\x2F0\x2F2\x2F4\x2F6\x2F8\x2FA\x2FC\x2FE");
		sb.Append("\x300\x302\x304\x306\x308\x30A\x30C\x30E\x310\x312\x314\x316");
		sb.Append("\x318\x31A\x31C\x31E\x320\x322\x324\x326\x328\x32A\x32C\x32E");
		sb.Append("\x2\x12\x13\x2\f\xE\x10\x10\x14\x14  ##&&\x30\x31\x33\x33::");
		sb.Append("<=\x44\x44\x46\x46JJPPTUkkmn\n\x2\x15\x15\x18\x18\x37\x37??");
		sb.Append("RRVV\x62\x63\x66\x66\x4\x2\"\"--\x4\x2\x80\x80\x8B\x8B\x10\x2");
		sb.Append("\x12\x12\x15\x15\x18\x18\x1D\x1D\"\"--\x37\x37??\x43\x43RRV");
		sb.Append("VZZ\x62\x63\x66\x66\x5\x2w}\x8A\x8B\x93\x94\x5\x2yy\x8B\x8B");
		sb.Append("\x90\x91\x4\x2GGOO\x5\x2GGOO]]\a\x2**__~\x7F\x86\x87\x8E\x8F");
		sb.Append("\x4\x2\x36\x36GG\x5\x2\x39\x39\x41\x41KM\x4\x2))\x65\x65\x6");
		sb.Append("\x2\x39\x39\x41\x41KM\x65\x65\x4\x2**__\x13\x2\v\v\xF\xF\x11");
		sb.Append("\x13\x15\x1F!\"$%\'/\x32\x32\x34\x39;;>\x43\x45\x45GIKOQSVj");
		sb.Append("ll\x1023\x2\x330\x3\x2\x2\x2\x4\x333\x3\x2\x2\x2\x6\x335\x3");
		sb.Append("\x2\x2\x2\b\x337\x3\x2\x2\x2\n\x33D\x3\x2\x2\x2\f\x34A\x3\x2");
		sb.Append("\x2\x2\xE\x34C\x3\x2\x2\x2\x10\x359\x3\x2\x2\x2\x12\x35D\x3");
		sb.Append("\x2\x2\x2\x14\x362\x3\x2\x2\x2\x16\x364\x3\x2\x2\x2\x18\x366");
		sb.Append("\x3\x2\x2\x2\x1A\x368\x3\x2\x2\x2\x1C\x36B\x3\x2\x2\x2\x1E\x3AA");
		sb.Append("\x3\x2\x2\x2 \x3B0\x3\x2\x2\x2\"\x3B2\x3\x2\x2\x2$\x3B4\x3\x2");
		sb.Append("\x2\x2&\x3B6\x3\x2\x2\x2(\x3BA\x3\x2\x2\x2*\x3C2\x3\x2\x2\x2");
		sb.Append(",\x3C4\x3\x2\x2\x2.\x3C6\x3\x2\x2\x2\x30\x3C8\x3\x2\x2\x2\x32");
		sb.Append("\x3D1\x3\x2\x2\x2\x34\x3D5\x3\x2\x2\x2\x36\x3DD\x3\x2\x2\x2");
		sb.Append("\x38\x3DF\x3\x2\x2\x2:\x41E\x3\x2\x2\x2<\x420\x3\x2\x2\x2>\x424");
		sb.Append("\x3\x2\x2\x2@\x427\x3\x2\x2\x2\x42\x42B\x3\x2\x2\x2\x44\x42D");
		sb.Append("\x3\x2\x2\x2\x46\x42F\x3\x2\x2\x2H\x437\x3\x2\x2\x2J\x443\x3");
		sb.Append("\x2\x2\x2L\x445\x3\x2\x2\x2N\x454\x3\x2\x2\x2P\x45F\x3\x2\x2");
		sb.Append("\x2R\x461\x3\x2\x2\x2T\x469\x3\x2\x2\x2V\x46F\x3\x2\x2\x2X\x471");
		sb.Append("\x3\x2\x2\x2Z\x478\x3\x2\x2\x2\\\x485\x3\x2\x2\x2^\x487\x3\x2");
		sb.Append("\x2\x2`\x49A\x3\x2\x2\x2\x62\x4A0\x3\x2\x2\x2\x64\x4AC\x3\x2");
		sb.Append("\x2\x2\x66\x4AE\x3\x2\x2\x2h\x4BB\x3\x2\x2\x2j\x4BD\x3\x2\x2");
		sb.Append("\x2l\x4C9\x3\x2\x2\x2n\x4DE\x3\x2\x2\x2p\x4E4\x3\x2\x2\x2r\x4EB");
		sb.Append("\x3\x2\x2\x2t\x4F0\x3\x2\x2\x2v\x4F5\x3\x2\x2\x2x\x507\x3\x2");
		sb.Append("\x2\x2z\x509\x3\x2\x2\x2|\x55B\x3\x2\x2\x2~\x55D\x3\x2\x2\x2");
		sb.Append("\x80\x560\x3\x2\x2\x2\x82\x563\x3\x2\x2\x2\x84\x568\x3\x2\x2");
		sb.Append("\x2\x86\x574\x3\x2\x2\x2\x88\x57E\x3\x2\x2\x2\x8A\x589\x3\x2");
		sb.Append("\x2\x2\x8C\x59B\x3\x2\x2\x2\x8E\x5A8\x3\x2\x2\x2\x90\x5AA\x3");
		sb.Append("\x2\x2\x2\x92\x5AE\x3\x2\x2\x2\x94\x5B0\x3\x2\x2\x2\x96\x5BA");
		sb.Append("\x3\x2\x2\x2\x98\x5C2\x3\x2\x2\x2\x9A\x5CA\x3\x2\x2\x2\x9C\x5D2");
		sb.Append("\x3\x2\x2\x2\x9E\x5DA\x3\x2\x2\x2\xA0\x5E2\x3\x2\x2\x2\xA2\x5E7");
		sb.Append("\x3\x2\x2\x2\xA4\x5EF\x3\x2\x2\x2\xA6\x5F3\x3\x2\x2\x2\xA8\x604");
		sb.Append("\x3\x2\x2\x2\xAA\x606\x3\x2\x2\x2\xAC\x60C\x3\x2\x2\x2\xAE\x615");
		sb.Append("\x3\x2\x2\x2\xB0\x61A\x3\x2\x2\x2\xB2\x622\x3\x2\x2\x2\xB4\x624");
		sb.Append("\x3\x2\x2\x2\xB6\x62C\x3\x2\x2\x2\xB8\x630\x3\x2\x2\x2\xBA\x632");
		sb.Append("\x3\x2\x2\x2\xBC\x635\x3\x2\x2\x2\xBE\x63E\x3\x2\x2\x2\xC0\x644");
		sb.Append("\x3\x2\x2\x2\xC2\x650\x3\x2\x2\x2\xC4\x652\x3\x2\x2\x2\xC6\x657");
		sb.Append("\x3\x2\x2\x2\xC8\x65A\x3\x2\x2\x2\xCA\x666\x3\x2\x2\x2\xCC\x674");
		sb.Append("\x3\x2\x2\x2\xCE\x684\x3\x2\x2\x2\xD0\x687\x3\x2\x2\x2\xD2\x68F");
		sb.Append("\x3\x2\x2\x2\xD4\x695\x3\x2\x2\x2\xD6\x699\x3\x2\x2\x2\xD8\x69B");
		sb.Append("\x3\x2\x2\x2\xDA\x69E\x3\x2\x2\x2\xDC\x6A3\x3\x2\x2\x2\xDE\x6A7");
		sb.Append("\x3\x2\x2\x2\xE0\x6B6\x3\x2\x2\x2\xE2\x6BA\x3\x2\x2\x2\xE4\x6BF");
		sb.Append("\x3\x2\x2\x2\xE6\x6C1\x3\x2\x2\x2\xE8\x6C3\x3\x2\x2\x2\xEA\x6C8");
		sb.Append("\x3\x2\x2\x2\xEC\x6CC\x3\x2\x2\x2\xEE\x6DA\x3\x2\x2\x2\xF0\x6DC");
		sb.Append("\x3\x2\x2\x2\xF2\x6E3\x3\x2\x2\x2\xF4\x6E7\x3\x2\x2\x2\xF6\x6E9");
		sb.Append("\x3\x2\x2\x2\xF8\x6F3\x3\x2\x2\x2\xFA\x6F5\x3\x2\x2\x2\xFC\x6F8");
		sb.Append("\x3\x2\x2\x2\xFE\x6FA\x3\x2\x2\x2\x100\x702\x3\x2\x2\x2\x102");
		sb.Append("\x70A\x3\x2\x2\x2\x104\x70C\x3\x2\x2\x2\x106\x710\x3\x2\x2\x2");
		sb.Append("\x108\x713\x3\x2\x2\x2\x10A\x717\x3\x2\x2\x2\x10C\x71B\x3\x2");
		sb.Append("\x2\x2\x10E\x71D\x3\x2\x2\x2\x110\x726\x3\x2\x2\x2\x112\x72C");
		sb.Append("\x3\x2\x2\x2\x114\x732\x3\x2\x2\x2\x116\x739\x3\x2\x2\x2\x118");
		sb.Append("\x73C\x3\x2\x2\x2\x11A\x749\x3\x2\x2\x2\x11C\x74F\x3\x2\x2\x2");
		sb.Append("\x11E\x751\x3\x2\x2\x2\x120\x757\x3\x2\x2\x2\x122\x75F\x3\x2");
		sb.Append("\x2\x2\x124\x771\x3\x2\x2\x2\x126\x773\x3\x2\x2\x2\x128\x775");
		sb.Append("\x3\x2\x2\x2\x12A\x777\x3\x2\x2\x2\x12C\x77F\x3\x2\x2\x2\x12E");
		sb.Append("\x78D\x3\x2\x2\x2\x130\x78F\x3\x2\x2\x2\x132\x792\x3\x2\x2\x2");
		sb.Append("\x134\x7A1\x3\x2\x2\x2\x136\x7A3\x3\x2\x2\x2\x138\x7A9\x3\x2");
		sb.Append("\x2\x2\x13A\x7AF\x3\x2\x2\x2\x13C\x7BC\x3\x2\x2\x2\x13E\x7BE");
		sb.Append("\x3\x2\x2\x2\x140\x7C5\x3\x2\x2\x2\x142\x7CE\x3\x2\x2\x2\x144");
		sb.Append("\x7D1\x3\x2\x2\x2\x146\x7D4\x3\x2\x2\x2\x148\x7D7\x3\x2\x2\x2");
		sb.Append("\x14A\x7DA\x3\x2\x2\x2\x14C\x7E0\x3\x2\x2\x2\x14E\x7E8\x3\x2");
		sb.Append("\x2\x2\x150\x7F3\x3\x2\x2\x2\x152\x7F6\x3\x2\x2\x2\x154\x809");
		sb.Append("\x3\x2\x2\x2\x156\x80F\x3\x2\x2\x2\x158\x817\x3\x2\x2\x2\x15A");
		sb.Append("\x824\x3\x2\x2\x2\x15C\x828\x3\x2\x2\x2\x15E\x82E\x3\x2\x2\x2");
		sb.Append("\x160\x834\x3\x2\x2\x2\x162\x836\x3\x2\x2\x2\x164\x83C\x3\x2");
		sb.Append("\x2\x2\x166\x841\x3\x2\x2\x2\x168\x847\x3\x2\x2\x2\x16A\x84A");
		sb.Append("\x3\x2\x2\x2\x16C\x856\x3\x2\x2\x2\x16E\x85C\x3\x2\x2\x2\x170");
		sb.Append("\x873\x3\x2\x2\x2\x172\x883\x3\x2\x2\x2\x174\x885\x3\x2\x2\x2");
		sb.Append("\x176\x88A\x3\x2\x2\x2\x178\x897\x3\x2\x2\x2\x17A\x899\x3\x2");
		sb.Append("\x2\x2\x17C\x8A2\x3\x2\x2\x2\x17E\x8AA\x3\x2\x2\x2\x180\x8B1");
		sb.Append("\x3\x2\x2\x2\x182\x8C0\x3\x2\x2\x2\x184\x8C5\x3\x2\x2\x2\x186");
		sb.Append("\x8C7\x3\x2\x2\x2\x188\x8CF\x3\x2\x2\x2\x18A\x8D3\x3\x2\x2\x2");
		sb.Append("\x18C\x8DA\x3\x2\x2\x2\x18E\x8EE\x3\x2\x2\x2\x190\x8F1\x3\x2");
		sb.Append("\x2\x2\x192\x904\x3\x2\x2\x2\x194\x915\x3\x2\x2\x2\x196\x917");
		sb.Append("\x3\x2\x2\x2\x198\x923\x3\x2\x2\x2\x19A\x92B\x3\x2\x2\x2\x19C");
		sb.Append("\x92F\x3\x2\x2\x2\x19E\x93C\x3\x2\x2\x2\x1A0\x940\x3\x2\x2\x2");
		sb.Append("\x1A2\x942\x3\x2\x2\x2\x1A4\x946\x3\x2\x2\x2\x1A6\x95C\x3\x2");
		sb.Append("\x2\x2\x1A8\x96C\x3\x2\x2\x2\x1AA\x970\x3\x2\x2\x2\x1AC\x972");
		sb.Append("\x3\x2\x2\x2\x1AE\x976\x3\x2\x2\x2\x1B0\x97E\x3\x2\x2\x2\x1B2");
		sb.Append("\x980\x3\x2\x2\x2\x1B4\x994\x3\x2\x2\x2\x1B6\x996\x3\x2\x2\x2");
		sb.Append("\x1B8\x999\x3\x2\x2\x2\x1BA\x99C\x3\x2\x2\x2\x1BC\x9A3\x3\x2");
		sb.Append("\x2\x2\x1BE\x9AF\x3\x2\x2\x2\x1C0\x9BF\x3\x2\x2\x2\x1C2\x9C2");
		sb.Append("\x3\x2\x2\x2\x1C4\x9D4\x3\x2\x2\x2\x1C6\x9DD\x3\x2\x2\x2\x1C8");
		sb.Append("\x9EC\x3\x2\x2\x2\x1CA\x9F0\x3\x2\x2\x2\x1CC\x9F3\x3\x2\x2\x2");
		sb.Append("\x1CE\xA04\x3\x2\x2\x2\x1D0\xA17\x3\x2\x2\x2\x1D2\xA1A\x3\x2");
		sb.Append("\x2\x2\x1D4\xA27\x3\x2\x2\x2\x1D6\xA2D\x3\x2\x2\x2\x1D8\xA33");
		sb.Append("\x3\x2\x2\x2\x1DA\xA3D\x3\x2\x2\x2\x1DC\xA4F\x3\x2\x2\x2\x1DE");
		sb.Append("\xA51\x3\x2\x2\x2\x1E0\xA5D\x3\x2\x2\x2\x1E2\xA63\x3\x2\x2\x2");
		sb.Append("\x1E4\xA6E\x3\x2\x2\x2\x1E6\xA73\x3\x2\x2\x2\x1E8\xA75\x3\x2");
		sb.Append("\x2\x2\x1EA\xA7D\x3\x2\x2\x2\x1EC\xA7F\x3\x2\x2\x2\x1EE\xA9A");
		sb.Append("\x3\x2\x2\x2\x1F0\xAB2\x3\x2\x2\x2\x1F2\xAC4\x3\x2\x2\x2\x1F4");
		sb.Append("\xAC8\x3\x2\x2\x2\x1F6\xACB\x3\x2\x2\x2\x1F8\xAD4\x3\x2\x2\x2");
		sb.Append("\x1FA\xADE\x3\x2\x2\x2\x1FC\xAE0\x3\x2\x2\x2\x1FE\xAF7\x3\x2");
		sb.Append("\x2\x2\x200\xAFB\x3\x2\x2\x2\x202\xAFE\x3\x2\x2\x2\x204\xB06");
		sb.Append("\x3\x2\x2\x2\x206\xB0A\x3\x2\x2\x2\x208\xB0C\x3\x2\x2\x2\x20A");
		sb.Append("\xB10\x3\x2\x2\x2\x20C\xB14\x3\x2\x2\x2\x20E\xB17\x3\x2\x2\x2");
		sb.Append("\x210\xB2E\x3\x2\x2\x2\x212\xB3B\x3\x2\x2\x2\x214\xB3D\x3\x2");
		sb.Append("\x2\x2\x216\xB40\x3\x2\x2\x2\x218\xB46\x3\x2\x2\x2\x21A\xB4E");
		sb.Append("\x3\x2\x2\x2\x21C\xB5B\x3\x2\x2\x2\x21E\xB67\x3\x2\x2\x2\x220");
		sb.Append("\xB71\x3\x2\x2\x2\x222\xB75\x3\x2\x2\x2\x224\xB7B\x3\x2\x2\x2");
		sb.Append("\x226\xB8B\x3\x2\x2\x2\x228\xB8D\x3\x2\x2\x2\x22A\xB96\x3\x2");
		sb.Append("\x2\x2\x22C\xBAD\x3\x2\x2\x2\x22E\xBBA\x3\x2\x2\x2\x230\xBBC");
		sb.Append("\x3\x2\x2\x2\x232\xBC1\x3\x2\x2\x2\x234\xBD4\x3\x2\x2\x2\x236");
		sb.Append("\xBD6\x3\x2\x2\x2\x238\xBD9\x3\x2\x2\x2\x23A\xBE0\x3\x2\x2\x2");
		sb.Append("\x23C\xBE5\x3\x2\x2\x2\x23E\xC1F\x3\x2\x2\x2\x240\xC34\x3\x2");
		sb.Append("\x2\x2\x242\xC40\x3\x2\x2\x2\x244\xC59\x3\x2\x2\x2\x246\xC64");
		sb.Append("\x3\x2\x2\x2\x248\xC73\x3\x2\x2\x2\x24A\xC81\x3\x2\x2\x2\x24C");
		sb.Append("\xC8D\x3\x2\x2\x2\x24E\xC90\x3\x2\x2\x2\x250\xC94\x3\x2\x2\x2");
		sb.Append("\x252\xC96\x3\x2\x2\x2\x254\xC9F\x3\x2\x2\x2\x256\xCA7\x3\x2");
		sb.Append("\x2\x2\x258\xCBC\x3\x2\x2\x2\x25A\xCC9\x3\x2\x2\x2\x25C\xCCB");
		sb.Append("\x3\x2\x2\x2\x25E\xCCE\x3\x2\x2\x2\x260\xCD2\x3\x2\x2\x2\x262");
		sb.Append("\xCDA\x3\x2\x2\x2\x264\xCDF\x3\x2\x2\x2\x266\xCE1\x3\x2\x2\x2");
		sb.Append("\x268\xCE4\x3\x2\x2\x2\x26A\xCE8\x3\x2\x2\x2\x26C\xCF2\x3\x2");
		sb.Append("\x2\x2\x26E\xCF7\x3\x2\x2\x2\x270\xCF9\x3\x2\x2\x2\x272\xD01");
		sb.Append("\x3\x2\x2\x2\x274\xD05\x3\x2\x2\x2\x276\xD07\x3\x2\x2\x2\x278");
		sb.Append("\xD0D\x3\x2\x2\x2\x27A\xD15\x3\x2\x2\x2\x27C\xD17\x3\x2\x2\x2");
		sb.Append("\x27E\xD1F\x3\x2\x2\x2\x280\xD23\x3\x2\x2\x2\x282\xD25\x3\x2");
		sb.Append("\x2\x2\x284\xD27\x3\x2\x2\x2\x286\xD29\x3\x2\x2\x2\x288\xD2B");
		sb.Append("\x3\x2\x2\x2\x28A\xD2D\x3\x2\x2\x2\x28C\xD2F\x3\x2\x2\x2\x28E");
		sb.Append("\xD31\x3\x2\x2\x2\x290\xD33\x3\x2\x2\x2\x292\xD35\x3\x2\x2\x2");
		sb.Append("\x294\xD37\x3\x2\x2\x2\x296\xD39\x3\x2\x2\x2\x298\xD3C\x3\x2");
		sb.Append("\x2\x2\x29A\xD66\x3\x2\x2\x2\x29C\xD6A\x3\x2\x2\x2\x29E\xD6C");
		sb.Append("\x3\x2\x2\x2\x2A0\xD6F\x3\x2\x2\x2\x2A2\xD87\x3\x2\x2\x2\x2A4");
		sb.Append("\xD89\x3\x2\x2\x2\x2A6\xD8B\x3\x2\x2\x2\x2A8\xD8F\x3\x2\x2\x2");
		sb.Append("\x2AA\xD91\x3\x2\x2\x2\x2AC\xD94\x3\x2\x2\x2\x2AE\xD97\x3\x2");
		sb.Append("\x2\x2\x2B0\xD9C\x3\x2\x2\x2\x2B2\xDA3\x3\x2\x2\x2\x2B4\xDAB");
		sb.Append("\x3\x2\x2\x2\x2B6\xDB2\x3\x2\x2\x2\x2B8\xDB4\x3\x2\x2\x2\x2BA");
		sb.Append("\xDB7\x3\x2\x2\x2\x2BC\xDC2\x3\x2\x2\x2\x2BE\xDC6\x3\x2\x2\x2");
		sb.Append("\x2C0\xDC8\x3\x2\x2\x2\x2C2\xDCB\x3\x2\x2\x2\x2C4\xDCF\x3\x2");
		sb.Append("\x2\x2\x2C6\xDD4\x3\x2\x2\x2\x2C8\xDD6\x3\x2\x2\x2\x2CA\xDDC");
		sb.Append("\x3\x2\x2\x2\x2CC\xDDE\x3\x2\x2\x2\x2CE\xDE0\x3\x2\x2\x2\x2D0");
		sb.Append("\xDE2\x3\x2\x2\x2\x2D2\xDE4\x3\x2\x2\x2\x2D4\xDE6\x3\x2\x2\x2");
		sb.Append("\x2D6\xDE8\x3\x2\x2\x2\x2D8\xDEA\x3\x2\x2\x2\x2DA\xDEC\x3\x2");
		sb.Append("\x2\x2\x2DC\xDEE\x3\x2\x2\x2\x2DE\xDF0\x3\x2\x2\x2\x2E0\xDF2");
		sb.Append("\x3\x2\x2\x2\x2E2\xDF4\x3\x2\x2\x2\x2E4\xDF6\x3\x2\x2\x2\x2E6");
		sb.Append("\xDF8\x3\x2\x2\x2\x2E8\xDFA\x3\x2\x2\x2\x2EA\xDFC\x3\x2\x2\x2");
		sb.Append("\x2EC\xDFE\x3\x2\x2\x2\x2EE\xE00\x3\x2\x2\x2\x2F0\xE02\x3\x2");
		sb.Append("\x2\x2\x2F2\xE04\x3\x2\x2\x2\x2F4\xE06\x3\x2\x2\x2\x2F6\xE08");
		sb.Append("\x3\x2\x2\x2\x2F8\xE0C\x3\x2\x2\x2\x2FA\xE10\x3\x2\x2\x2\x2FC");
		sb.Append("\xE1A\x3\x2\x2\x2\x2FE\xE1C\x3\x2\x2\x2\x300\xE1E\x3\x2\x2\x2");
		sb.Append("\x302\xE20\x3\x2\x2\x2\x304\xE2F\x3\x2\x2\x2\x306\xE3E\x3\x2");
		sb.Append("\x2\x2\x308\xE4D\x3\x2\x2\x2\x30A\xE56\x3\x2\x2\x2\x30C\xE66");
		sb.Append("\x3\x2\x2\x2\x30E\xE72\x3\x2\x2\x2\x310\xE75\x3\x2\x2\x2\x312");
		sb.Append("\xE7A\x3\x2\x2\x2\x314\xE7F\x3\x2\x2\x2\x316\xE87\x3\x2\x2\x2");
		sb.Append("\x318\xE8D\x3\x2\x2\x2\x31A\xE98\x3\x2\x2\x2\x31C\xEA6\x3\x2");
		sb.Append("\x2\x2\x31E\xEAD\x3\x2\x2\x2\x320\xEB8\x3\x2\x2\x2\x322\xEC6");
		sb.Append("\x3\x2\x2\x2\x324\xED4\x3\x2\x2\x2\x326\xED9\x3\x2\x2\x2\x328");
		sb.Append("\xEDE\x3\x2\x2\x2\x32A\xEE6\x3\x2\x2\x2\x32C\xEF0\x3\x2\x2\x2");
		sb.Append("\x32E\xEF2\x3\x2\x2\x2\x330\x331\x5\xE2r\x2\x331\x332\a\x2\x2");
		sb.Append("\x3\x332\x3\x3\x2\x2\x2\x333\x334\x5\n\x6\x2\x334\x5\x3\x2\x2");
		sb.Append("\x2\x335\x336\x5\n\x6\x2\x336\a\x3\x2\x2\x2\x337\x338\t\x2\x2");
		sb.Append("\x2\x338\t\x3\x2\x2\x2\x339\x33A\x5\b\x5\x2\x33A\x33B\x5\f\a");
		sb.Append("\x2\x33B\x33E\x3\x2\x2\x2\x33C\x33E\x5\x16C\xB7\x2\x33D\x339");
		sb.Append("\x3\x2\x2\x2\x33D\x33C\x3\x2\x2\x2\x33E\x345\x3\x2\x2\x2\x33F");
		sb.Append("\x340\az\x2\x2\x340\x341\x5\b\x5\x2\x341\x342\x5\f\a\x2\x342");
		sb.Append("\x344\x3\x2\x2\x2\x343\x33F\x3\x2\x2\x2\x344\x347\x3\x2\x2\x2");
		sb.Append("\x345\x343\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\v\x3\x2\x2");
		sb.Append("\x2\x347\x345\x3\x2\x2\x2\x348\x34B\x5&\x14\x2\x349\x34B\x3");
		sb.Append("\x2\x2\x2\x34A\x348\x3\x2\x2\x2\x34A\x349\x3\x2\x2\x2\x34B\r");
		sb.Append("\x3\x2\x2\x2\x34C\x352\x5\x10\t\x2\x34D\x351\a\x8B\x2\x2\x34E");
		sb.Append("\x351\x5\x222\x112\x2\x34F\x351\a\x80\x2\x2\x350\x34D\x3\x2");
		sb.Append("\x2\x2\x350\x34E\x3\x2\x2\x2\x350\x34F\x3\x2\x2\x2\x351\x354");
		sb.Append("\x3\x2\x2\x2\x352\x350\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x353");
		sb.Append("\xF\x3\x2\x2\x2\x354\x352\x3\x2\x2\x2\x355\x35A\x5\x12\n\x2");
		sb.Append("\x356\x35A\x5 \x11\x2\x357\x358\ai\x2\x2\x358\x35A\a\x80\x2");
		sb.Append("\x2\x359\x355\x3\x2\x2\x2\x359\x356\x3\x2\x2\x2\x359\x357\x3");
		sb.Append("\x2\x2\x2\x35A\x11\x3\x2\x2\x2\x35B\x35E\x5\x14\v\x2\x35C\x35E");
		sb.Append("\a\x12\x2\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35C\x3\x2\x2\x2\x35E");
		sb.Append("\x13\x3\x2\x2\x2\x35F\x363\x5\x16\f\x2\x360\x363\x5\x18\r\x2");
		sb.Append("\x361\x363\a\x1D\x2\x2\x362\x35F\x3\x2\x2\x2\x362\x360\x3\x2");
		sb.Append("\x2\x2\x362\x361\x3\x2\x2\x2\x363\x15\x3\x2\x2\x2\x364\x365");
		sb.Append("\t\x3\x2\x2\x365\x17\x3\x2\x2\x2\x366\x367\t\x4\x2\x2\x367\x19");
		sb.Append("\x3\x2\x2\x2\x368\x369\x5\x1C\xF\x2\x369\x36A\a\x8B\x2\x2\x36A");
		sb.Append("\x1B\x3\x2\x2\x2\x36B\x370\x5\x10\t\x2\x36C\x36F\x5\x222\x112");
		sb.Append("\x2\x36D\x36F\a\x80\x2\x2\x36E\x36C\x3\x2\x2\x2\x36E\x36D\x3");
		sb.Append("\x2\x2\x2\x36F\x372\x3\x2\x2\x2\x370\x36E\x3\x2\x2\x2\x370\x371");
		sb.Append("\x3\x2\x2\x2\x371\x1D\x3\x2\x2\x2\x372\x370\x3\x2\x2\x2\x373");
		sb.Append("\x37D\x5\x12\n\x2\x374\x376\t\x5\x2\x2\x375\x374\x3\x2\x2\x2");
		sb.Append("\x376\x379\x3\x2\x2\x2\x377\x375\x3\x2\x2\x2\x377\x378\x3\x2");
		sb.Append("\x2\x2\x378\x37A\x3\x2\x2\x2\x379\x377\x3\x2\x2\x2\x37A\x37C");
		sb.Append("\x5\x222\x112\x2\x37B\x377\x3\x2\x2\x2\x37C\x37F\x3\x2\x2\x2");
		sb.Append("\x37D\x37B\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x383\x3\x2");
		sb.Append("\x2\x2\x37F\x37D\x3\x2\x2\x2\x380\x382\t\x5\x2\x2\x381\x380");
		sb.Append("\x3\x2\x2\x2\x382\x385\x3\x2\x2\x2\x383\x381\x3\x2\x2\x2\x383");
		sb.Append("\x384\x3\x2\x2\x2\x384\x386\x3\x2\x2\x2\x385\x383\x3\x2\x2\x2");
		sb.Append("\x386\x387\x5\x222\x112\x2\x387\x3AB\x3\x2\x2\x2\x388\x392\x5");
		sb.Append(" \x11\x2\x389\x38B\t\x5\x2\x2\x38A\x389\x3\x2\x2\x2\x38B\x38E");
		sb.Append("\x3\x2\x2\x2\x38C\x38A\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D");
		sb.Append("\x38F\x3\x2\x2\x2\x38E\x38C\x3\x2\x2\x2\x38F\x391\x5\x222\x112");
		sb.Append("\x2\x390\x38C\x3\x2\x2\x2\x391\x394\x3\x2\x2\x2\x392\x390\x3");
		sb.Append("\x2\x2\x2\x392\x393\x3\x2\x2\x2\x393\x3AB\x3\x2\x2\x2\x394\x392");
		sb.Append("\x3\x2\x2\x2\x395\x396\ai\x2\x2\x396\x3A0\a\x80\x2\x2\x397\x399");
		sb.Append("\t\x5\x2\x2\x398\x397\x3\x2\x2\x2\x399\x39C\x3\x2\x2\x2\x39A");
		sb.Append("\x398\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39D\x3\x2\x2\x2");
		sb.Append("\x39C\x39A\x3\x2\x2\x2\x39D\x39F\x5\x222\x112\x2\x39E\x39A\x3");
		sb.Append("\x2\x2\x2\x39F\x3A2\x3\x2\x2\x2\x3A0\x39E\x3\x2\x2\x2\x3A0\x3A1");
		sb.Append("\x3\x2\x2\x2\x3A1\x3A6\x3\x2\x2\x2\x3A2\x3A0\x3\x2\x2\x2\x3A3");
		sb.Append("\x3A5\t\x5\x2\x2\x3A4\x3A3\x3\x2\x2\x2\x3A5\x3A8\x3\x2\x2\x2");
		sb.Append("\x3A6\x3A4\x3\x2\x2\x2\x3A6\x3A7\x3\x2\x2\x2\x3A7\x3A9\x3\x2");
		sb.Append("\x2\x2\x3A8\x3A6\x3\x2\x2\x2\x3A9\x3AB\x5\x222\x112\x2\x3AA");
		sb.Append("\x373\x3\x2\x2\x2\x3AA\x388\x3\x2\x2\x2\x3AA\x395\x3\x2\x2\x2");
		sb.Append("\x3AB\x1F\x3\x2\x2\x2\x3AC\x3B1\x5\x6\x4\x2\x3AD\x3B1\a\x43");
		sb.Append("\x2\x2\x3AE\x3B1\x5\x2F2\x17A\x2\x3AF\x3B1\aZ\x2\x2\x3B0\x3AC");
		sb.Append("\x3\x2\x2\x2\x3B0\x3AD\x3\x2\x2\x2\x3B0\x3AE\x3\x2\x2\x2\x3B0");
		sb.Append("\x3AF\x3\x2\x2\x2\x3B1!\x3\x2\x2\x2\x3B2\x3B3\x5\x6\x4\x2\x3B3");
		sb.Append("#\x3\x2\x2\x2\x3B4\x3B5\x5\x6\x4\x2\x3B5%\x3\x2\x2\x2\x3B6\x3B7");
		sb.Append("\a\x89\x2\x2\x3B7\x3B8\x5(\x15\x2\x3B8\x3B9\a\x8A\x2\x2\x3B9");
		sb.Append("\'\x3\x2\x2\x2\x3BA\x3BF\x5*\x16\x2\x3BB\x3BC\a{\x2\x2\x3BC");
		sb.Append("\x3BE\x5*\x16\x2\x3BD\x3BB\x3\x2\x2\x2\x3BE\x3C1\x3\x2\x2\x2");
		sb.Append("\x3BF\x3BD\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0)\x3\x2\x2");
		sb.Append("\x2\x3C1\x3BF\x3\x2\x2\x2\x3C2\x3C3\x5\xE\b\x2\x3C3+\x3\x2\x2");
		sb.Append("\x2\x3C4\x3C5\ai\x2\x2\x3C5-\x3\x2\x2\x2\x3C6\x3C7\x5\xE2r\x2");
		sb.Append("\x3C7/\x3\x2\x2\x2\x3C8\x3CD\x5\x32\x1A\x2\x3C9\x3CA\a{\x2\x2");
		sb.Append("\x3CA\x3CC\x5\x32\x1A\x2\x3CB\x3C9\x3\x2\x2\x2\x3CC\x3CF\x3");
		sb.Append("\x2\x2\x2\x3CD\x3CB\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x31");
		sb.Append("\x3\x2\x2\x2\x3CF\x3CD\x3\x2\x2\x2\x3D0\x3D2\x5\x34\x1B\x2\x3D1");
		sb.Append("\x3D0\x3\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2");
		sb.Append("\x3D3\x3D4\x5\x36\x1C\x2\x3D4\x33\x3\x2\x2\x2\x3D5\x3D6\x5\b");
		sb.Append("\x5\x2\x3D6\x3D7\a|\x2\x2\x3D7\x35\x3\x2\x2\x2\x3D8\x3DE\x5");
		sb.Append("\xE2r\x2\x3D9\x3DA\aO\x2\x2\x3DA\x3DE\x5.\x18\x2\x3DB\x3DC\a");
		sb.Append("G\x2\x2\x3DC\x3DE\x5.\x18\x2\x3DD\x3D8\x3\x2\x2\x2\x3DD\x3D9");
		sb.Append("\x3\x2\x2\x2\x3DD\x3DB\x3\x2\x2\x2\x3DE\x37\x3\x2\x2\x2\x3DF");
		sb.Append("\x3E3\x5:\x1E\x2\x3E0\x3E2\x5<\x1F\x2\x3E1\x3E0\x3\x2\x2\x2");
		sb.Append("\x3E2\x3E5\x3\x2\x2\x2\x3E3\x3E1\x3\x2\x2\x2\x3E3\x3E4\x3\x2");
		sb.Append("\x2\x2\x3E4\x3F6\x3\x2\x2\x2\x3E5\x3E3\x3\x2\x2\x2\x3E6\x3ED");
		sb.Append("\x5\x32A\x196\x2\x3E7\x3ED\x5\x32C\x197\x2\x3E8\x3ED\a\x8E\x2");
		sb.Append("\x2\x3E9\x3ED\a\x8F\x2\x2\x3EA\x3EB\a\x92\x2\x2\x3EB\x3ED\x5");
		sb.Append("\b\x5\x2\x3EC\x3E6\x3\x2\x2\x2\x3EC\x3E7\x3\x2\x2\x2\x3EC\x3E8");
		sb.Append("\x3\x2\x2\x2\x3EC\x3E9\x3\x2\x2\x2\x3EC\x3EA\x3\x2\x2\x2\x3ED");
		sb.Append("\x3F1\x3\x2\x2\x2\x3EE\x3F0\x5<\x1F\x2\x3EF\x3EE\x3\x2\x2\x2");
		sb.Append("\x3F0\x3F3\x3\x2\x2\x2\x3F1\x3EF\x3\x2\x2\x2\x3F1\x3F2\x3\x2");
		sb.Append("\x2\x2\x3F2\x3F5\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2\x3F4\x3EC");
		sb.Append("\x3\x2\x2\x2\x3F5\x3F8\x3\x2\x2\x2\x3F6\x3F4\x3\x2\x2\x2\x3F6");
		sb.Append("\x3F7\x3\x2\x2\x2\x3F7\x39\x3\x2\x2\x2\x3F8\x3F6\x3\x2\x2\x2");
		sb.Append("\x3F9\x41F\x5\x2FC\x17F\x2\x3FA\x41F\x5> \x2\x3FB\x41F\x5@!");
		sb.Append("\x2\x3FC\x41F\x5\x44#\x2\x3FD\x41F\x5\x16C\xB7\x2\x3FE\x41F");
		sb.Append("\x5H%\x2\x3FF\x41F\x5J&\x2\x400\x416\a\x41\x2\x2\x401\x410\x5");
		sb.Append("\xE\b\x2\x402\x411\x5\x32E\x198\x2\x403\x411\x5N(\x2\x404\x405");
		sb.Append("\av\x2\x2\x405\x406\x5\x46$\x2\x406\x408\aw\x2\x2\x407\x409");
		sb.Append("\x5\x220\x111\x2\x408\x407\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2");
		sb.Append("\x409\x40B\x3\x2\x2\x2\x40A\x40C\x5\x226\x114\x2\x40B\x40A\x3");
		sb.Append("\x2\x2\x2\x40B\x40C\x3\x2\x2\x2\x40C\x411\x3\x2\x2\x2\x40D\x40E");
		sb.Append("\x5\x220\x111\x2\x40E\x40F\x5\x226\x114\x2\x40F\x411\x3\x2\x2");
		sb.Append("\x2\x410\x402\x3\x2\x2\x2\x410\x403\x3\x2\x2\x2\x410\x404\x3");
		sb.Append("\x2\x2\x2\x410\x40D\x3\x2\x2\x2\x411\x417\x3\x2\x2\x2\x412\x417");
		sb.Append("\x5\x64\x33\x2\x413\x414\x5\x222\x112\x2\x414\x415\x5\x226\x114");
		sb.Append("\x2\x415\x417\x3\x2\x2\x2\x416\x401\x3\x2\x2\x2\x416\x412\x3");
		sb.Append("\x2\x2\x2\x416\x413\x3\x2\x2\x2\x417\x41F\x3\x2\x2\x2\x418\x41F");
		sb.Append("\x5j\x36\x2\x419\x41F\x5r:\x2\x41A\x41F\x5t;\x2\x41B\x41F\x5");
		sb.Append("v<\x2\x41C\x41F\x5\xA6T\x2\x41D\x41F\x5\x2AE\x158\x2\x41E\x3F9");
		sb.Append("\x3\x2\x2\x2\x41E\x3FA\x3\x2\x2\x2\x41E\x3FB\x3\x2\x2\x2\x41E");
		sb.Append("\x3FC\x3\x2\x2\x2\x41E\x3FD\x3\x2\x2\x2\x41E\x3FE\x3\x2\x2\x2");
		sb.Append("\x41E\x3FF\x3\x2\x2\x2\x41E\x400\x3\x2\x2\x2\x41E\x418\x3\x2");
		sb.Append("\x2\x2\x41E\x419\x3\x2\x2\x2\x41E\x41A\x3\x2\x2\x2\x41E\x41B");
		sb.Append("\x3\x2\x2\x2\x41E\x41C\x3\x2\x2\x2\x41E\x41D\x3\x2\x2\x2\x41F");
		sb.Append(";\x3\x2\x2\x2\x420\x421\av\x2\x2\x421\x422\x5\x46$\x2\x422\x423");
		sb.Append("\aw\x2\x2\x423=\x3\x2\x2\x2\x424\x425\x5\b\x5\x2\x425\x426\x5");
		sb.Append("\f\a\x2\x426?\x3\x2\x2\x2\x427\x428\ax\x2\x2\x428\x429\x5\xE2");
		sb.Append("r\x2\x429\x42A\ay\x2\x2\x42A\x41\x3\x2\x2\x2\x42B\x42C\x5\x38");
		sb.Append("\x1D\x2\x42C\x43\x3\x2\x2\x2\x42D\x42E\t\x6\x2\x2\x42E\x45\x3");
		sb.Append("\x2\x2\x2\x42F\x434\x5\xE2r\x2\x430\x431\a{\x2\x2\x431\x433");
		sb.Append("\x5\xE2r\x2\x432\x430\x3\x2\x2\x2\x433\x436\x3\x2\x2\x2\x434");
		sb.Append("\x432\x3\x2\x2\x2\x434\x435\x3\x2\x2\x2\x435G\x3\x2\x2\x2\x436");
		sb.Append("\x434\x3\x2\x2\x2\x437\x438\a]\x2\x2\x438I\x3\x2\x2\x2\x439");
		sb.Append("\x43A\a\x11\x2\x2\x43A\x43B\az\x2\x2\x43B\x43C\x5\b\x5\x2\x43C");
		sb.Append("\x43D\x5\f\a\x2\x43D\x444\x3\x2\x2\x2\x43E\x43F\a\x11\x2\x2");
		sb.Append("\x43F\x440\av\x2\x2\x440\x441\x5\x46$\x2\x441\x442\aw\x2\x2");
		sb.Append("\x442\x444\x3\x2\x2\x2\x443\x439\x3\x2\x2\x2\x443\x43E\x3\x2");
		sb.Append("\x2\x2\x444K\x3\x2\x2\x2\x445\x446\a\x41\x2\x2\x446\x450\x5");
		sb.Append("\xE\b\x2\x447\x449\ax\x2\x2\x448\x44A\x5\x30\x19\x2\x449\x448");
		sb.Append("\x3\x2\x2\x2\x449\x44A\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B");
		sb.Append("\x44D\ay\x2\x2\x44C\x44E\x5N(\x2\x44D\x44C\x3\x2\x2\x2\x44D");
		sb.Append("\x44E\x3\x2\x2\x2\x44E\x451\x3\x2\x2\x2\x44F\x451\x5N(\x2\x450");
		sb.Append("\x447\x3\x2\x2\x2\x450\x44F\x3\x2\x2\x2\x451M\x3\x2\x2\x2\x452");
		sb.Append("\x455\x5P)\x2\x453\x455\x5X-\x2\x454\x452\x3\x2\x2\x2\x454\x453");
		sb.Append("\x3\x2\x2\x2\x455O\x3\x2\x2\x2\x456\x457\at\x2\x2\x457\x460");
		sb.Append("\au\x2\x2\x458\x459\at\x2\x2\x459\x45B\x5R*\x2\x45A\x45C\a{");
		sb.Append("\x2\x2\x45B\x45A\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45D");
		sb.Append("\x3\x2\x2\x2\x45D\x45E\au\x2\x2\x45E\x460\x3\x2\x2\x2\x45F\x456");
		sb.Append("\x3\x2\x2\x2\x45F\x458\x3\x2\x2\x2\x460Q\x3\x2\x2\x2\x461\x466");
		sb.Append("\x5T+\x2\x462\x463\a{\x2\x2\x463\x465\x5T+\x2\x464\x462\x3\x2");
		sb.Append("\x2\x2\x465\x468\x3\x2\x2\x2\x466\x464\x3\x2\x2\x2\x466\x467");
		sb.Append("\x3\x2\x2\x2\x467S\x3\x2\x2\x2\x468\x466\x3\x2\x2\x2\x469\x46A");
		sb.Append("\x5\b\x5\x2\x46A\x46B\a\x88\x2\x2\x46B\x46C\x5V,\x2\x46CU\x3");
		sb.Append("\x2\x2\x2\x46D\x470\x5\xE2r\x2\x46E\x470\x5N(\x2\x46F\x46D\x3");
		sb.Append("\x2\x2\x2\x46F\x46E\x3\x2\x2\x2\x470W\x3\x2\x2\x2\x471\x472");
		sb.Append("\at\x2\x2\x472\x474\x5Z.\x2\x473\x475\a{\x2\x2\x474\x473\x3");
		sb.Append("\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2\x476\x477");
		sb.Append("\au\x2\x2\x477Y\x3\x2\x2\x2\x478\x47D\x5\\/\x2\x479\x47A\a{");
		sb.Append("\x2\x2\x47A\x47C\x5\\/\x2\x47B\x479\x3\x2\x2\x2\x47C\x47F\x3");
		sb.Append("\x2\x2\x2\x47D\x47B\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2\x47E[");
		sb.Append("\x3\x2\x2\x2\x47F\x47D\x3\x2\x2\x2\x480\x486\x5\xE4s\x2\x481");
		sb.Append("\x482\at\x2\x2\x482\x483\x5\x46$\x2\x483\x484\au\x2\x2\x484");
		sb.Append("\x486\x3\x2\x2\x2\x485\x480\x3\x2\x2\x2\x485\x481\x3\x2\x2\x2");
		sb.Append("\x486]\x3\x2\x2\x2\x487\x498\a\x41\x2\x2\x488\x489\x5\x21C\x10F");
		sb.Append("\x2\x489\x48A\x5\x226\x114\x2\x48A\x499\x3\x2\x2\x2\x48B\x48C");
		sb.Append("\x5\x21E\x110\x2\x48C\x48D\av\x2\x2\x48D\x48E\x5\x46$\x2\x48E");
		sb.Append("\x490\aw\x2\x2\x48F\x491\x5\x220\x111\x2\x490\x48F\x3\x2\x2");
		sb.Append("\x2\x490\x491\x3\x2\x2\x2\x491\x493\x3\x2\x2\x2\x492\x494\x5");
		sb.Append("\x226\x114\x2\x493\x492\x3\x2\x2\x2\x493\x494\x3\x2\x2\x2\x494");
		sb.Append("\x499\x3\x2\x2\x2\x495\x496\x5\x222\x112\x2\x496\x497\x5\x226");
		sb.Append("\x114\x2\x497\x499\x3\x2\x2\x2\x498\x488\x3\x2\x2\x2\x498\x48B");
		sb.Append("\x3\x2\x2\x2\x498\x495\x3\x2\x2\x2\x499_\x3\x2\x2\x2\x49A\x49B");
		sb.Append("\a\x41\x2\x2\x49B\x49C\x5$\x13\x2\x49C\x49D\ax\x2\x2\x49D\x49E");
		sb.Append("\x5\xE2r\x2\x49E\x49F\ay\x2\x2\x49F\x61\x3\x2\x2\x2\x4A0\x4A1");
		sb.Append("\a\x41\x2\x2\x4A1\x4A2\x5\x64\x33\x2\x4A2\x63\x3\x2\x2\x2\x4A3");
		sb.Append("\x4A4\at\x2\x2\x4A4\x4AD\au\x2\x2\x4A5\x4A6\at\x2\x2\x4A6\x4A8");
		sb.Append("\x5\x66\x34\x2\x4A7\x4A9\a{\x2\x2\x4A8\x4A7\x3\x2\x2\x2\x4A8");
		sb.Append("\x4A9\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2\x2\x4AA\x4AB\au\x2\x2\x4AB");
		sb.Append("\x4AD\x3\x2\x2\x2\x4AC\x4A3\x3\x2\x2\x2\x4AC\x4A5\x3\x2\x2\x2");
		sb.Append("\x4AD\x65\x3\x2\x2\x2\x4AE\x4B3\x5h\x35\x2\x4AF\x4B0\a{\x2\x2");
		sb.Append("\x4B0\x4B2\x5h\x35\x2\x4B1\x4AF\x3\x2\x2\x2\x4B2\x4B5\x3\x2");
		sb.Append("\x2\x2\x4B3\x4B1\x3\x2\x2\x2\x4B3\x4B4\x3\x2\x2\x2\x4B4g\x3");
		sb.Append("\x2\x2\x2\x4B5\x4B3\x3\x2\x2\x2\x4B6\x4BC\x5\x38\x1D\x2\x4B7");
		sb.Append("\x4B8\x5\b\x5\x2\x4B8\x4B9\a\x88\x2\x2\x4B9\x4BA\x5\xE2r\x2");
		sb.Append("\x4BA\x4BC\x3\x2\x2\x2\x4BB\x4B6\x3\x2\x2\x2\x4BB\x4B7\x3\x2");
		sb.Append("\x2\x2\x4BCi\x3\x2\x2\x2\x4BD\x4BE\a\x61\x2\x2\x4BE\x4C7\ax");
		sb.Append("\x2\x2\x4BF\x4C0\x5l\x37\x2\x4C0\x4C1\ay\x2\x2\x4C1\x4C8\x3");
		sb.Append("\x2\x2\x2\x4C2\x4C3\x5\xE\b\x2\x4C3\x4C4\ay\x2\x2\x4C4\x4C8");
		sb.Append("\x3\x2\x2\x2\x4C5\x4C6\ai\x2\x2\x4C6\x4C8\ay\x2\x2\x4C7\x4BF");
		sb.Append("\x3\x2\x2\x2\x4C7\x4C2\x3\x2\x2\x2\x4C7\x4C5\x3\x2\x2\x2\x4C8");
		sb.Append("k\x3\x2\x2\x2\x4C9\x4D2\x5\b\x5\x2\x4CA\x4CC\x5n\x38\x2\x4CB");
		sb.Append("\x4CA\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4D3\x3\x2\x2\x2");
		sb.Append("\x4CD\x4CE\a\x8C\x2\x2\x4CE\x4D0\x5\b\x5\x2\x4CF\x4D1\x5n\x38");
		sb.Append("\x2\x4D0\x4CF\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4D3\x3");
		sb.Append("\x2\x2\x2\x4D2\x4CB\x3\x2\x2\x2\x4D2\x4CD\x3\x2\x2\x2\x4D3\x4DB");
		sb.Append("\x3\x2\x2\x2\x4D4\x4D5\az\x2\x2\x4D5\x4D7\x5\b\x5\x2\x4D6\x4D8");
		sb.Append("\x5n\x38\x2\x4D7\x4D6\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8");
		sb.Append("\x4DA\x3\x2\x2\x2\x4D9\x4D4\x3\x2\x2\x2\x4DA\x4DD\x3\x2\x2\x2");
		sb.Append("\x4DB\x4D9\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2\x4DCm\x3\x2\x2");
		sb.Append("\x2\x4DD\x4DB\x3\x2\x2\x2\x4DE\x4E0\a\x89\x2\x2\x4DF\x4E1\x5");
		sb.Append("p\x39\x2\x4E0\x4DF\x3\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4E2");
		sb.Append("\x3\x2\x2\x2\x4E2\x4E3\a\x8A\x2\x2\x4E3o\x3\x2\x2\x2\x4E4\x4E8");
		sb.Append("\a{\x2\x2\x4E5\x4E7\a{\x2\x2\x4E6\x4E5\x3\x2\x2\x2\x4E7\x4EA");
		sb.Append("\x3\x2\x2\x2\x4E8\x4E6\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9");
		sb.Append("q\x3\x2\x2\x2\x4EA\x4E8\x3\x2\x2\x2\x4EB\x4EC\a\x19\x2\x2\x4EC");
		sb.Append("\x4ED\ax\x2\x2\x4ED\x4EE\x5\xE2r\x2\x4EE\x4EF\ay\x2\x2\x4EF");
		sb.Append("s\x3\x2\x2\x2\x4F0\x4F1\a\x64\x2\x2\x4F1\x4F2\ax\x2\x2\x4F2");
		sb.Append("\x4F3\x5\xE2r\x2\x4F3\x4F4\ay\x2\x2\x4F4u\x3\x2\x2\x2\x4F5\x4F6");
		sb.Append("\a\x1E\x2\x2\x4F6\x4F7\ax\x2\x2\x4F7\x4F8\x5\xE\b\x2\x4F8\x4F9");
		sb.Append("\ay\x2\x2\x4F9w\x3\x2\x2\x2\x4FA\x508\x5\x82\x42\x2\x4FB\x508");
		sb.Append("\x5\x38\x1D\x2\x4FC\x4FD\a~\x2\x2\x4FD\x508\x5x=\x2\x4FE\x4FF");
		sb.Append("\a\x7F\x2\x2\x4FF\x508\x5x=\x2\x500\x501\a\x86\x2\x2\x501\x508");
		sb.Append("\x5x=\x2\x502\x503\a\x87\x2\x2\x503\x508\x5x=\x2\x504\x508\x5");
		sb.Append("~@\x2\x505\x508\x5\x80\x41\x2\x506\x508\x5\x2A8\x155\x2\x507");
		sb.Append("\x4FA\x3\x2\x2\x2\x507\x4FB\x3\x2\x2\x2\x507\x4FC\x3\x2\x2\x2");
		sb.Append("\x507\x4FE\x3\x2\x2\x2\x507\x500\x3\x2\x2\x2\x507\x502\x3\x2");
		sb.Append("\x2\x2\x507\x504\x3\x2\x2\x2\x507\x505\x3\x2\x2\x2\x507\x506");
		sb.Append("\x3\x2\x2\x2\x508y\x3\x2\x2\x2\x509\x50A\ax\x2\x2\x50A\x50B");
		sb.Append("\x5\xE\b\x2\x50B\x50C\ay\x2\x2\x50C\x50D\x5|?\x2\x50D{\x3\x2");
		sb.Append("\x2\x2\x50E\x55C\a\x87\x2\x2\x50F\x55C\a\x86\x2\x2\x510\x55C");
		sb.Append("\ax\x2\x2\x511\x55C\x5\b\x5\x2\x512\x55C\x5\x2FC\x17F\x2\x513");
		sb.Append("\x55C\a\v\x2\x2\x514\x55C\a\x11\x2\x2\x515\x55C\a\x12\x2\x2");
		sb.Append("\x516\x55C\a\x13\x2\x2\x517\x55C\a\x15\x2\x2\x518\x55C\a\x16");
		sb.Append("\x2\x2\x519\x55C\a\x17\x2\x2\x51A\x55C\a\x18\x2\x2\x51B\x55C");
		sb.Append("\a\x19\x2\x2\x51C\x55C\a\x1A\x2\x2\x51D\x55C\a\x1B\x2\x2\x51E");
		sb.Append("\x55C\a\x1C\x2\x2\x51F\x55C\a\x1D\x2\x2\x520\x55C\a\x1E\x2\x2");
		sb.Append("\x521\x55C\a\x1F\x2\x2\x522\x55C\a!\x2\x2\x523\x55C\a\"\x2\x2");
		sb.Append("\x524\x55C\a$\x2\x2\x525\x55C\a%\x2\x2\x526\x55C\a\'\x2\x2\x527");
		sb.Append("\x55C\a(\x2\x2\x528\x55C\a)\x2\x2\x529\x55C\a+\x2\x2\x52A\x55C");
		sb.Append("\a,\x2\x2\x52B\x55C\a-\x2\x2\x52C\x55C\a.\x2\x2\x52D\x55C\a");
		sb.Append("/\x2\x2\x52E\x55C\a\x32\x2\x2\x52F\x55C\a\x34\x2\x2\x530\x55C");
		sb.Append("\a\x35\x2\x2\x531\x55C\a\x36\x2\x2\x532\x55C\a\x37\x2\x2\x533");
		sb.Append("\x55C\a\x38\x2\x2\x534\x55C\a\x39\x2\x2\x535\x55C\a>\x2\x2\x536");
		sb.Append("\x55C\a?\x2\x2\x537\x55C\a@\x2\x2\x538\x55C\a\x41\x2\x2\x539");
		sb.Append("\x55C\a\x43\x2\x2\x53A\x55C\a\x45\x2\x2\x53B\x55C\aG\x2\x2\x53C");
		sb.Append("\x55C\aH\x2\x2\x53D\x55C\aI\x2\x2\x53E\x55C\aK\x2\x2\x53F\x55C");
		sb.Append("\aL\x2\x2\x540\x55C\aM\x2\x2\x541\x55C\aN\x2\x2\x542\x55C\a");
		sb.Append("O\x2\x2\x543\x55C\aQ\x2\x2\x544\x55C\aR\x2\x2\x545\x55C\aS\x2");
		sb.Append("\x2\x546\x55C\aV\x2\x2\x547\x55C\aW\x2\x2\x548\x55C\aX\x2\x2");
		sb.Append("\x549\x55C\aY\x2\x2\x54A\x55C\aZ\x2\x2\x54B\x55C\a[\x2\x2\x54C");
		sb.Append("\x55C\a\\\x2\x2\x54D\x55C\a]\x2\x2\x54E\x55C\a^\x2\x2\x54F\x55C");
		sb.Append("\a`\x2\x2\x550\x55C\a\x61\x2\x2\x551\x55C\a\x62\x2\x2\x552\x55C");
		sb.Append("\a\x63\x2\x2\x553\x55C\a\x64\x2\x2\x554\x55C\a\x65\x2\x2\x555");
		sb.Append("\x55C\a\x66\x2\x2\x556\x55C\ag\x2\x2\x557\x55C\ah\x2\x2\x558");
		sb.Append("\x55C\ai\x2\x2\x559\x55C\aj\x2\x2\x55A\x55C\al\x2\x2\x55B\x50E");
		sb.Append("\x3\x2\x2\x2\x55B\x50F\x3\x2\x2\x2\x55B\x510\x3\x2\x2\x2\x55B");
		sb.Append("\x511\x3\x2\x2\x2\x55B\x512\x3\x2\x2\x2\x55B\x513\x3\x2\x2\x2");
		sb.Append("\x55B\x514\x3\x2\x2\x2\x55B\x515\x3\x2\x2\x2\x55B\x516\x3\x2");
		sb.Append("\x2\x2\x55B\x517\x3\x2\x2\x2\x55B\x518\x3\x2\x2\x2\x55B\x519");
		sb.Append("\x3\x2\x2\x2\x55B\x51A\x3\x2\x2\x2\x55B\x51B\x3\x2\x2\x2\x55B");
		sb.Append("\x51C\x3\x2\x2\x2\x55B\x51D\x3\x2\x2\x2\x55B\x51E\x3\x2\x2\x2");
		sb.Append("\x55B\x51F\x3\x2\x2\x2\x55B\x520\x3\x2\x2\x2\x55B\x521\x3\x2");
		sb.Append("\x2\x2\x55B\x522\x3\x2\x2\x2\x55B\x523\x3\x2\x2\x2\x55B\x524");
		sb.Append("\x3\x2\x2\x2\x55B\x525\x3\x2\x2\x2\x55B\x526\x3\x2\x2\x2\x55B");
		sb.Append("\x527\x3\x2\x2\x2\x55B\x528\x3\x2\x2\x2\x55B\x529\x3\x2\x2\x2");
		sb.Append("\x55B\x52A\x3\x2\x2\x2\x55B\x52B\x3\x2\x2\x2\x55B\x52C\x3\x2");
		sb.Append("\x2\x2\x55B\x52D\x3\x2\x2\x2\x55B\x52E\x3\x2\x2\x2\x55B\x52F");
		sb.Append("\x3\x2\x2\x2\x55B\x530\x3\x2\x2\x2\x55B\x531\x3\x2\x2\x2\x55B");
		sb.Append("\x532\x3\x2\x2\x2\x55B\x533\x3\x2\x2\x2\x55B\x534\x3\x2\x2\x2");
		sb.Append("\x55B\x535\x3\x2\x2\x2\x55B\x536\x3\x2\x2\x2\x55B\x537\x3\x2");
		sb.Append("\x2\x2\x55B\x538\x3\x2\x2\x2\x55B\x539\x3\x2\x2\x2\x55B\x53A");
		sb.Append("\x3\x2\x2\x2\x55B\x53B\x3\x2\x2\x2\x55B\x53C\x3\x2\x2\x2\x55B");
		sb.Append("\x53D\x3\x2\x2\x2\x55B\x53E\x3\x2\x2\x2\x55B\x53F\x3\x2\x2\x2");
		sb.Append("\x55B\x540\x3\x2\x2\x2\x55B\x541\x3\x2\x2\x2\x55B\x542\x3\x2");
		sb.Append("\x2\x2\x55B\x543\x3\x2\x2\x2\x55B\x544\x3\x2\x2\x2\x55B\x545");
		sb.Append("\x3\x2\x2\x2\x55B\x546\x3\x2\x2\x2\x55B\x547\x3\x2\x2\x2\x55B");
		sb.Append("\x548\x3\x2\x2\x2\x55B\x549\x3\x2\x2\x2\x55B\x54A\x3\x2\x2\x2");
		sb.Append("\x55B\x54B\x3\x2\x2\x2\x55B\x54C\x3\x2\x2\x2\x55B\x54D\x3\x2");
		sb.Append("\x2\x2\x55B\x54E\x3\x2\x2\x2\x55B\x54F\x3\x2\x2\x2\x55B\x550");
		sb.Append("\x3\x2\x2\x2\x55B\x551\x3\x2\x2\x2\x55B\x552\x3\x2\x2\x2\x55B");
		sb.Append("\x553\x3\x2\x2\x2\x55B\x554\x3\x2\x2\x2\x55B\x555\x3\x2\x2\x2");
		sb.Append("\x55B\x556\x3\x2\x2\x2\x55B\x557\x3\x2\x2\x2\x55B\x558\x3\x2");
		sb.Append("\x2\x2\x55B\x559\x3\x2\x2\x2\x55B\x55A\x3\x2\x2\x2\x55C}\x3");
		sb.Append("\x2\x2\x2\x55D\x55E\a\x8E\x2\x2\x55E\x55F\x5x=\x2\x55F\x7F\x3");
		sb.Append("\x2\x2\x2\x560\x561\a\x8F\x2\x2\x561\x562\x5x=\x2\x562\x81\x3");
		sb.Append("\x2\x2\x2\x563\x564\ax\x2\x2\x564\x565\x5\xE\b\x2\x565\x566");
		sb.Append("\ay\x2\x2\x566\x567\x5x=\x2\x567\x83\x3\x2\x2\x2\x568\x571\x5");
		sb.Append("x=\x2\x569\x56A\a\x80\x2\x2\x56A\x570\x5x=\x2\x56B\x56C\a\x81");
		sb.Append("\x2\x2\x56C\x570\x5x=\x2\x56D\x56E\a\x82\x2\x2\x56E\x570\x5");
		sb.Append("x=\x2\x56F\x569\x3\x2\x2\x2\x56F\x56B\x3\x2\x2\x2\x56F\x56D");
		sb.Append("\x3\x2\x2\x2\x570\x573\x3\x2\x2\x2\x571\x56F\x3\x2\x2\x2\x571");
		sb.Append("\x572\x3\x2\x2\x2\x572\x85\x3\x2\x2\x2\x573\x571\x3\x2\x2\x2");
		sb.Append("\x574\x57B\x5\x84\x43\x2\x575\x576\a~\x2\x2\x576\x57A\x5\x84");
		sb.Append("\x43\x2\x577\x578\a\x7F\x2\x2\x578\x57A\x5\x84\x43\x2\x579\x575");
		sb.Append("\x3\x2\x2\x2\x579\x577\x3\x2\x2\x2\x57A\x57D\x3\x2\x2\x2\x57B");
		sb.Append("\x579\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C\x87\x3\x2\x2\x2");
		sb.Append("\x57D\x57B\x3\x2\x2\x2\x57E\x586\x5\x86\x44\x2\x57F\x580\a\x9F");
		sb.Append("\x2\x2\x580\x585\x5\x86\x44\x2\x581\x582\x5\x2F8\x17D\x2\x582");
		sb.Append("\x583\x5\x86\x44\x2\x583\x585\x3\x2\x2\x2\x584\x57F\x3\x2\x2");
		sb.Append("\x2\x584\x581\x3\x2\x2\x2\x585\x588\x3\x2\x2\x2\x586\x584\x3");
		sb.Append("\x2\x2\x2\x586\x587\x3\x2\x2\x2\x587\x89\x3\x2\x2\x2\x588\x586");
		sb.Append("\x3\x2\x2\x2\x589\x598\x5\x88\x45\x2\x58A\x58B\a\x89\x2\x2\x58B");
		sb.Append("\x597\x5\x88\x45\x2\x58C\x58D\a\x8A\x2\x2\x58D\x597\x5\x88\x45");
		sb.Append("\x2\x58E\x58F\a\x95\x2\x2\x58F\x597\x5\x88\x45\x2\x590\x591");
		sb.Append("\a\x96\x2\x2\x591\x597\x5\x88\x45\x2\x592\x593\a;\x2\x2\x593");
		sb.Append("\x597\x5\x90I\x2\x594\x595\a\xF\x2\x2\x595\x597\x5\xE\b\x2\x596");
		sb.Append("\x58A\x3\x2\x2\x2\x596\x58C\x3\x2\x2\x2\x596\x58E\x3\x2\x2\x2");
		sb.Append("\x596\x590\x3\x2\x2\x2\x596\x592\x3\x2\x2\x2\x596\x594\x3\x2");
		sb.Append("\x2\x2\x597\x59A\x3\x2\x2\x2\x598\x596\x3\x2\x2\x2\x598\x599");
		sb.Append("\x3\x2\x2\x2\x599\x8B\x3\x2\x2\x2\x59A\x598\x3\x2\x2\x2\x59B");
		sb.Append("\x59C\x5\b\x5\x2\x59C\x59D\a\x89\x2\x2\x59D\x5A2\x5\xE\b\x2");
		sb.Append("\x59E\x59F\a{\x2\x2\x59F\x5A1\x5\xE\b\x2\x5A0\x59E\x3\x2\x2");
		sb.Append("\x2\x5A1\x5A4\x3\x2\x2\x2\x5A2\x5A0\x3\x2\x2\x2\x5A2\x5A3\x3");
		sb.Append("\x2\x2\x2\x5A3\x5A5\x3\x2\x2\x2\x5A4\x5A2\x3\x2\x2\x2\x5A5\x5A6");
		sb.Append("\a\x8A\x2\x2\x5A6\x5A7\x5\x8EH\x2\x5A7\x8D\x3\x2\x2\x2\x5A8");
		sb.Append("\x5A9\t\a\x2\x2\x5A9\x8F\x3\x2\x2\x2\x5AA\x5AC\x5\x1C\xF\x2");
		sb.Append("\x5AB\x5AD\a\x8B\x2\x2\x5AC\x5AB\x3\x2\x2\x2\x5AC\x5AD\x3\x2");
		sb.Append("\x2\x2\x5AD\x91\x3\x2\x2\x2\x5AE\x5AF\t\b\x2\x2\x5AF\x93\x3");
		sb.Append("\x2\x2\x2\x5B0\x5B7\x5\x8A\x46\x2\x5B1\x5B2\a\x93\x2\x2\x5B2");
		sb.Append("\x5B6\x5\x8A\x46\x2\x5B3\x5B4\a\x94\x2\x2\x5B4\x5B6\x5\x8A\x46");
		sb.Append("\x2\x5B5\x5B1\x3\x2\x2\x2\x5B5\x5B3\x3\x2\x2\x2\x5B6\x5B9\x3");
		sb.Append("\x2\x2\x2\x5B7\x5B5\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\x95");
		sb.Append("\x3\x2\x2\x2\x5B9\x5B7\x3\x2\x2\x2\x5BA\x5BF\x5\x94K\x2\x5BB");
		sb.Append("\x5BC\a\x83\x2\x2\x5BC\x5BE\x5\x94K\x2\x5BD\x5BB\x3\x2\x2\x2");
		sb.Append("\x5BE\x5C1\x3\x2\x2\x2\x5BF\x5BD\x3\x2\x2\x2\x5BF\x5C0\x3\x2");
		sb.Append("\x2\x2\x5C0\x97\x3\x2\x2\x2\x5C1\x5BF\x3\x2\x2\x2\x5C2\x5C7");
		sb.Append("\x5\x96L\x2\x5C3\x5C4\a\x85\x2\x2\x5C4\x5C6\x5\x96L\x2\x5C5");
		sb.Append("\x5C3\x3\x2\x2\x2\x5C6\x5C9\x3\x2\x2\x2\x5C7\x5C5\x3\x2\x2\x2");
		sb.Append("\x5C7\x5C8\x3\x2\x2\x2\x5C8\x99\x3\x2\x2\x2\x5C9\x5C7\x3\x2");
		sb.Append("\x2\x2\x5CA\x5CF\x5\x98M\x2\x5CB\x5CC\a\x84\x2\x2\x5CC\x5CE");
		sb.Append("\x5\x98M\x2\x5CD\x5CB\x3\x2\x2\x2\x5CE\x5D1\x3\x2\x2\x2\x5CF");
		sb.Append("\x5CD\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x9B\x3\x2\x2\x2");
		sb.Append("\x5D1\x5CF\x3\x2\x2\x2\x5D2\x5D7\x5\x9AN\x2\x5D3\x5D4\a\x90");
		sb.Append("\x2\x2\x5D4\x5D6\x5\x9AN\x2\x5D5\x5D3\x3\x2\x2\x2\x5D6\x5D9");
		sb.Append("\x3\x2\x2\x2\x5D7\x5D5\x3\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8");
		sb.Append("\x9D\x3\x2\x2\x2\x5D9\x5D7\x3\x2\x2\x2\x5DA\x5DF\x5\x9CO\x2");
		sb.Append("\x5DB\x5DC\a\x91\x2\x2\x5DC\x5DE\x5\x9CO\x2\x5DD\x5DB\x3\x2");
		sb.Append("\x2\x2\x5DE\x5E1\x3\x2\x2\x2\x5DF\x5DD\x3\x2\x2\x2\x5DF\x5E0");
		sb.Append("\x3\x2\x2\x2\x5E0\x9F\x3\x2\x2\x2\x5E1\x5DF\x3\x2\x2\x2\x5E2");
		sb.Append("\x5E5\x5\x9EP\x2\x5E3\x5E4\a\x8D\x2\x2\x5E4\x5E6\x5\xA0Q\x2");
		sb.Append("\x5E5\x5E3\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\xA1\x3\x2");
		sb.Append("\x2\x2\x5E7\x5ED\x5\xA0Q\x2\x5E8\x5E9\a\x8B\x2\x2\x5E9\x5EA");
		sb.Append("\x5\xE2r\x2\x5EA\x5EB\a|\x2\x2\x5EB\x5EC\x5\xE2r\x2\x5EC\x5EE");
		sb.Append("\x3\x2\x2\x2\x5ED\x5E8\x3\x2\x2\x2\x5ED\x5EE\x3\x2\x2\x2\x5EE");
		sb.Append("\xA3\x3\x2\x2\x2\x5EF\x5F0\x5\xA8U\x2\x5F0\x5F1\x5\x2F6\x17C");
		sb.Append("\x2\x5F1\x5F2\x5\xB8]\x2\x5F2\xA5\x3\x2\x2\x2\x5F3\x5F5\a\x1F");
		sb.Append("\x2\x2\x5F4\x5F6\x5\xAAV\x2\x5F5\x5F4\x3\x2\x2\x2\x5F5\x5F6");
		sb.Append("\x3\x2\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8\x5\xF0y\x2\x5F8");
		sb.Append("\xA7\x3\x2\x2\x2\x5F9\x5FA\ax\x2\x2\x5FA\x605\ay\x2\x2\x5FB");
		sb.Append("\x5FC\ax\x2\x2\x5FC\x5FD\x5\xACW\x2\x5FD\x5FE\ay\x2\x2\x5FE");
		sb.Append("\x605\x3\x2\x2\x2\x5FF\x600\ax\x2\x2\x600\x601\x5\xB4[\x2\x601");
		sb.Append("\x602\ay\x2\x2\x602\x605\x3\x2\x2\x2\x603\x605\x5\xB6\\\x2\x604");
		sb.Append("\x5F9\x3\x2\x2\x2\x604\x5FB\x3\x2\x2\x2\x604\x5FF\x3\x2\x2\x2");
		sb.Append("\x604\x603\x3\x2\x2\x2\x605\xA9\x3\x2\x2\x2\x606\x608\ax\x2");
		sb.Append("\x2\x607\x609\x5\xACW\x2\x608\x607\x3\x2\x2\x2\x608\x609\x3");
		sb.Append("\x2\x2\x2\x609\x60A\x3\x2\x2\x2\x60A\x60B\ay\x2\x2\x60B\xAB");
		sb.Append("\x3\x2\x2\x2\x60C\x611\x5\xAEX\x2\x60D\x60E\a{\x2\x2\x60E\x610");
		sb.Append("\x5\xAEX\x2\x60F\x60D\x3\x2\x2\x2\x610\x613\x3\x2\x2\x2\x611");
		sb.Append("\x60F\x3\x2\x2\x2\x611\x612\x3\x2\x2\x2\x612\xAD\x3\x2\x2\x2");
		sb.Append("\x613\x611\x3\x2\x2\x2\x614\x616\x5\xB0Y\x2\x615\x614\x3\x2");
		sb.Append("\x2\x2\x615\x616\x3\x2\x2\x2\x616\x617\x3\x2\x2\x2\x617\x618");
		sb.Append("\x5\xE\b\x2\x618\x619\x5\b\x5\x2\x619\xAF\x3\x2\x2\x2\x61A\x61B");
		sb.Append("\t\t\x2\x2\x61B\xB1\x3\x2\x2\x2\x61C\x61E\ax\x2\x2\x61D\x61F");
		sb.Append("\x5\xB4[\x2\x61E\x61D\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2\x61F");
		sb.Append("\x620\x3\x2\x2\x2\x620\x623\ay\x2\x2\x621\x623\x5\xB6\\\x2\x622");
		sb.Append("\x61C\x3\x2\x2\x2\x622\x621\x3\x2\x2\x2\x623\xB3\x3\x2\x2\x2");
		sb.Append("\x624\x629\x5\xB6\\\x2\x625\x626\a{\x2\x2\x626\x628\x5\xB6\\");
		sb.Append("\x2\x627\x625\x3\x2\x2\x2\x628\x62B\x3\x2\x2\x2\x629\x627\x3");
		sb.Append("\x2\x2\x2\x629\x62A\x3\x2\x2\x2\x62A\xB5\x3\x2\x2\x2\x62B\x629");
		sb.Append("\x3\x2\x2\x2\x62C\x62D\x5\b\x5\x2\x62D\xB7\x3\x2\x2\x2\x62E");
		sb.Append("\x631\x5\xE2r\x2\x62F\x631\x5\xF0y\x2\x630\x62E\x3\x2\x2\x2");
		sb.Append("\x630\x62F\x3\x2\x2\x2\x631\xB9\x3\x2\x2\x2\x632\x633\x5\xBC");
		sb.Append("_\x2\x633\x634\x5\xBE`\x2\x634\xBB\x3\x2\x2\x2\x635\x637\x5");
		sb.Append("\x2CA\x166\x2\x636\x638\x5\xE\b\x2\x637\x636\x3\x2\x2\x2\x637");
		sb.Append("\x638\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639\x63A\x5\b\x5\x2");
		sb.Append("\x63A\x63B\a\x36\x2\x2\x63B\x63C\x5\xE2r\x2\x63C\xBD\x3\x2\x2");
		sb.Append("\x2\x63D\x63F\x5\xC0\x61\x2\x63E\x63D\x3\x2\x2\x2\x63E\x63F");
		sb.Append("\x3\x2\x2\x2\x63F\x640\x3\x2\x2\x2\x640\x642\x5\xD6l\x2\x641");
		sb.Append("\x643\x5\xDCo\x2\x642\x641\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2");
		sb.Append("\x643\xBF\x3\x2\x2\x2\x644\x648\x5\xC2\x62\x2\x645\x647\x5\xC2");
		sb.Append("\x62\x2\x646\x645\x3\x2\x2\x2\x647\x64A\x3\x2\x2\x2\x648\x646");
		sb.Append("\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\xC1\x3\x2\x2\x2\x64A");
		sb.Append("\x648\x3\x2\x2\x2\x64B\x651\x5\xBC_\x2\x64C\x651\x5\xC4\x63");
		sb.Append("\x2\x64D\x651\x5\xC6\x64\x2\x64E\x651\x5\xCCg\x2\x64F\x651\x5");
		sb.Append("\xCEh\x2\x650\x64B\x3\x2\x2\x2\x650\x64C\x3\x2\x2\x2\x650\x64D");
		sb.Append("\x3\x2\x2\x2\x650\x64E\x3\x2\x2\x2\x650\x64F\x3\x2\x2\x2\x651");
		sb.Append("\xC3\x3\x2\x2\x2\x652\x653\x5\x2CC\x167\x2\x653\x654\x5\b\x5");
		sb.Append("\x2\x654\x655\a\x88\x2\x2\x655\x656\x5\xE2r\x2\x656\xC5\x3\x2");
		sb.Append("\x2\x2\x657\x658\x5\x2CE\x168\x2\x658\x659\x5\xE8u\x2\x659\xC7");
		sb.Append("\x3\x2\x2\x2\x65A\x65C\x5\x2D0\x169\x2\x65B\x65D\x5\xE\b\x2");
		sb.Append("\x65C\x65B\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x65E\x3\x2");
		sb.Append("\x2\x2\x65E\x65F\x5\b\x5\x2\x65F\x660\a\x36\x2\x2\x660\x661");
		sb.Append("\x5\xE2r\x2\x661\x662\x5\x2D2\x16A\x2\x662\x663\x5\xE2r\x2\x663");
		sb.Append("\x664\x5\x2D4\x16B\x2\x664\x665\x5\xE2r\x2\x665\xC9\x3\x2\x2");
		sb.Append("\x2\x666\x668\x5\x2D0\x169\x2\x667\x669\x5\xE\b\x2\x668\x667");
		sb.Append("\x3\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66A\x3\x2\x2\x2\x66A");
		sb.Append("\x66B\x5\b\x5\x2\x66B\x66C\a\x36\x2\x2\x66C\x66D\x5\xE2r\x2");
		sb.Append("\x66D\x66E\x5\x2D2\x16A\x2\x66E\x66F\x5\xE2r\x2\x66F\x670\x5");
		sb.Append("\x2D4\x16B\x2\x670\x671\x5\xE2r\x2\x671\x672\x5\x2D6\x16C\x2");
		sb.Append("\x672\x673\x5\b\x5\x2\x673\xCB\x3\x2\x2\x2\x674\x676\x5\x2D0");
		sb.Append("\x169\x2\x675\x677\x5\xE\b\x2\x676\x675\x3\x2\x2\x2\x676\x677");
		sb.Append("\x3\x2\x2\x2\x677\x678\x3\x2\x2\x2\x678\x679\x5\b\x5\x2\x679");
		sb.Append("\x67A\a\x36\x2\x2\x67A\x67B\x5\xE2r\x2\x67B\x67C\x5\x2D2\x16A");
		sb.Append("\x2\x67C\x67D\x5\xE2r\x2\x67D\x67E\x5\x2D4\x16B\x2\x67E\x682");
		sb.Append("\x5\xE2r\x2\x67F\x680\x5\x2D6\x16C\x2\x680\x681\x5\b\x5\x2\x681");
		sb.Append("\x683\x3\x2\x2\x2\x682\x67F\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2");
		sb.Append("\x683\xCD\x3\x2\x2\x2\x684\x685\x5\x2D8\x16D\x2\x685\x686\x5");
		sb.Append("\xD0i\x2\x686\xCF\x3\x2\x2\x2\x687\x68C\x5\xD2j\x2\x688\x689");
		sb.Append("\a{\x2\x2\x689\x68B\x5\xD2j\x2\x68A\x688\x3\x2\x2\x2\x68B\x68E");
		sb.Append("\x3\x2\x2\x2\x68C\x68A\x3\x2\x2\x2\x68C\x68D\x3\x2\x2\x2\x68D");
		sb.Append("\xD1\x3\x2\x2\x2\x68E\x68C\x3\x2\x2\x2\x68F\x691\x5\xE2r\x2");
		sb.Append("\x690\x692\x5\xD4k\x2\x691\x690\x3\x2\x2\x2\x691\x692\x3\x2");
		sb.Append("\x2\x2\x692\xD3\x3\x2\x2\x2\x693\x696\x5\x2DA\x16E\x2\x694\x696");
		sb.Append("\x5\x2DC\x16F\x2\x695\x693\x3\x2\x2\x2\x695\x694\x3\x2\x2\x2");
		sb.Append("\x696\xD5\x3\x2\x2\x2\x697\x69A\x5\xD8m\x2\x698\x69A\x5\xDA");
		sb.Append("n\x2\x699\x697\x3\x2\x2\x2\x699\x698\x3\x2\x2\x2\x69A\xD7\x3");
		sb.Append("\x2\x2\x2\x69B\x69C\x5\x2DE\x170\x2\x69C\x69D\x5\xE2r\x2\x69D");
		sb.Append("\xD9\x3\x2\x2\x2\x69E\x69F\x5\x2E0\x171\x2\x69F\x6A0\x5\xE2");
		sb.Append("r\x2\x6A0\x6A1\x5\x2E2\x172\x2\x6A1\x6A2\x5\xE2r\x2\x6A2\xDB");
		sb.Append("\x3\x2\x2\x2\x6A3\x6A4\x5\x2D6\x16C\x2\x6A4\x6A5\x5\b\x5\x2");
		sb.Append("\x6A5\x6A6\x5\xBE`\x2\x6A6\xDD\x3\x2\x2\x2\x6A7\x6A8\x5x=\x2");
		sb.Append("\x6A8\x6A9\x5\xE0q\x2\x6A9\x6AA\x5\xE2r\x2\x6AA\xDF\x3\x2\x2");
		sb.Append("\x2\x6AB\x6B7\a\x88\x2\x2\x6AC\x6B7\a\x97\x2\x2\x6AD\x6B7\a");
		sb.Append("\x98\x2\x2\x6AE\x6B7\a\x99\x2\x2\x6AF\x6B7\a\x9A\x2\x2\x6B0");
		sb.Append("\x6B7\a\x9B\x2\x2\x6B1\x6B7\a\x9C\x2\x2\x6B2\x6B7\a\x9D\x2\x2");
		sb.Append("\x6B3\x6B7\a\x9E\x2\x2\x6B4\x6B7\a\xA0\x2\x2\x6B5\x6B7\x5\x2FA");
		sb.Append("\x17E\x2\x6B6\x6AB\x3\x2\x2\x2\x6B6\x6AC\x3\x2\x2\x2\x6B6\x6AD");
		sb.Append("\x3\x2\x2\x2\x6B6\x6AE\x3\x2\x2\x2\x6B6\x6AF\x3\x2\x2\x2\x6B6");
		sb.Append("\x6B0\x3\x2\x2\x2\x6B6\x6B1\x3\x2\x2\x2\x6B6\x6B2\x3\x2\x2\x2");
		sb.Append("\x6B6\x6B3\x3\x2\x2\x2\x6B6\x6B4\x3\x2\x2\x2\x6B6\x6B5\x3\x2");
		sb.Append("\x2\x2\x6B7\xE1\x3\x2\x2\x2\x6B8\x6BB\x5\xDEp\x2\x6B9\x6BB\x5");
		sb.Append("\xE4s\x2\x6BA\x6B8\x3\x2\x2\x2\x6BA\x6B9\x3\x2\x2\x2\x6BB\xE3");
		sb.Append("\x3\x2\x2\x2\x6BC\x6C0\x5\xA4S\x2\x6BD\x6C0\x5\xBA^\x2\x6BE");
		sb.Append("\x6C0\x5\xA2R\x2\x6BF\x6BC\x3\x2\x2\x2\x6BF\x6BD\x3\x2\x2\x2");
		sb.Append("\x6BF\x6BE\x3\x2\x2\x2\x6C0\xE5\x3\x2\x2\x2\x6C1\x6C2\x5\xE2");
		sb.Append("r\x2\x6C2\xE7\x3\x2\x2\x2\x6C3\x6C4\x5\xE2r\x2\x6C4\xE9\x3\x2");
		sb.Append("\x2\x2\x6C5\x6C9\x5\xF6|\x2\x6C6\x6C9\x5\xF8}\x2\x6C7\x6C9\x5");
		sb.Append("\xECw\x2\x6C8\x6C5\x3\x2\x2\x2\x6C8\x6C6\x3\x2\x2\x2\x6C8\x6C7");
		sb.Append("\x3\x2\x2\x2\x6C9\xEB\x3\x2\x2\x2\x6CA\x6CD\x5\xF0y\x2\x6CB");
		sb.Append("\x6CD\x5\xEEx\x2\x6CC\x6CA\x3\x2\x2\x2\x6CC\x6CB\x3\x2\x2\x2");
		sb.Append("\x6CD\xED\x3\x2\x2\x2\x6CE\x6DB\x5\xF4{\x2\x6CF\x6DB\x5\x106");
		sb.Append("\x84\x2\x6D0\x6DB\x5\x10A\x86\x2\x6D1\x6DB\x5\x11C\x8F\x2\x6D2");
		sb.Append("\x6DB\x5\x12E\x98\x2\x6D3\x6DB\x5\x13A\x9E\x2\x6D4\x6DB\x5\x146");
		sb.Append("\xA4\x2\x6D5\x6DB\x5\x148\xA5\x2\x6D6\x6DB\x5\x14A\xA6\x2\x6D7");
		sb.Append("\x6DB\x5\x14C\xA7\x2\x6D8\x6DB\x5\x150\xA9\x2\x6D9\x6DB\x5\x29C");
		sb.Append("\x14F\x2\x6DA\x6CE\x3\x2\x2\x2\x6DA\x6CF\x3\x2\x2\x2\x6DA\x6D0");
		sb.Append("\x3\x2\x2\x2\x6DA\x6D1\x3\x2\x2\x2\x6DA\x6D2\x3\x2\x2\x2\x6DA");
		sb.Append("\x6D3\x3\x2\x2\x2\x6DA\x6D4\x3\x2\x2\x2\x6DA\x6D5\x3\x2\x2\x2");
		sb.Append("\x6DA\x6D6\x3\x2\x2\x2\x6DA\x6D7\x3\x2\x2\x2\x6DA\x6D8\x3\x2");
		sb.Append("\x2\x2\x6DA\x6D9\x3\x2\x2\x2\x6DB\xEF\x3\x2\x2\x2\x6DC\x6DE");
		sb.Append("\at\x2\x2\x6DD\x6DF\x5\xF2z\x2\x6DE\x6DD\x3\x2\x2\x2\x6DE\x6DF");
		sb.Append("\x3\x2\x2\x2\x6DF\x6E0\x3\x2\x2\x2\x6E0\x6E1\au\x2\x2\x6E1\xF1");
		sb.Append("\x3\x2\x2\x2\x6E2\x6E4\x5\xEAv\x2\x6E3\x6E2\x3\x2\x2\x2\x6E4");
		sb.Append("\x6E5\x3\x2\x2\x2\x6E5\x6E3\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2");
		sb.Append("\x6E6\xF3\x3\x2\x2\x2\x6E7\x6E8\a}\x2\x2\x6E8\xF5\x3\x2\x2\x2");
		sb.Append("\x6E9\x6EA\x5\b\x5\x2\x6EA\x6EB\a|\x2\x2\x6EB\x6EC\x5\xEAv\x2");
		sb.Append("\x6EC\xF7\x3\x2\x2\x2\x6ED\x6EE\x5\xFA~\x2\x6EE\x6EF\a}\x2\x2");
		sb.Append("\x6EF\x6F4\x3\x2\x2\x2\x6F0\x6F1\x5\x104\x83\x2\x6F1\x6F2\a");
		sb.Append("}\x2\x2\x6F2\x6F4\x3\x2\x2\x2\x6F3\x6ED\x3\x2\x2\x2\x6F3\x6F0");
		sb.Append("\x3\x2\x2\x2\x6F4\xF9\x3\x2\x2\x2\x6F5\x6F6\x5\xFC\x7F\x2\x6F6");
		sb.Append("\x6F7\x5\xFE\x80\x2\x6F7\xFB\x3\x2\x2\x2\x6F8\x6F9\x5\xE\b\x2");
		sb.Append("\x6F9\xFD\x3\x2\x2\x2\x6FA\x6FF\x5\x100\x81\x2\x6FB\x6FC\a{");
		sb.Append("\x2\x2\x6FC\x6FE\x5\x100\x81\x2\x6FD\x6FB\x3\x2\x2\x2\x6FE\x701");
		sb.Append("\x3\x2\x2\x2\x6FF\x6FD\x3\x2\x2\x2\x6FF\x700\x3\x2\x2\x2\x700");
		sb.Append("\xFF\x3\x2\x2\x2\x701\x6FF\x3\x2\x2\x2\x702\x705\x5\b\x5\x2");
		sb.Append("\x703\x704\a\x88\x2\x2\x704\x706\x5\x102\x82\x2\x705\x703\x3");
		sb.Append("\x2\x2\x2\x705\x706\x3\x2\x2\x2\x706\x101\x3\x2\x2\x2\x707\x70B");
		sb.Append("\x5\xE2r\x2\x708\x70B\x5\x226\x114\x2\x709\x70B\x5\x2C6\x164");
		sb.Append("\x2\x70A\x707\x3\x2\x2\x2\x70A\x708\x3\x2\x2\x2\x70A\x709\x3");
		sb.Append("\x2\x2\x2\x70B\x103\x3\x2\x2\x2\x70C\x70D\a\x1B\x2\x2\x70D\x70E");
		sb.Append("\x5\xE\b\x2\x70E\x70F\x5\x198\xCD\x2\x70F\x105\x3\x2\x2\x2\x710");
		sb.Append("\x711\x5\x108\x85\x2\x711\x712\a}\x2\x2\x712\x107\x3\x2\x2\x2");
		sb.Append("\x713\x714\x5\xE2r\x2\x714\x109\x3\x2\x2\x2\x715\x718\x5\x10E");
		sb.Append("\x88\x2\x716\x718\x5\x110\x89\x2\x717\x715\x3\x2\x2\x2\x717");
		sb.Append("\x716\x3\x2\x2\x2\x718\x10B\x3\x2\x2\x2\x719\x71C\x5\xF0y\x2");
		sb.Append("\x71A\x71C\x5\xEEx\x2\x71B\x719\x3\x2\x2\x2\x71B\x71A\x3\x2");
		sb.Append("\x2\x2\x71C\x10D\x3\x2\x2\x2\x71D\x71E\a\x34\x2\x2\x71E\x71F");
		sb.Append("\ax\x2\x2\x71F\x720\x5\xE8u\x2\x720\x721\ay\x2\x2\x721\x724");
		sb.Append("\x5\x10C\x87\x2\x722\x723\a$\x2\x2\x723\x725\x5\x10C\x87\x2");
		sb.Append("\x724\x722\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x10F\x3\x2");
		sb.Append("\x2\x2\x726\x727\a\\\x2\x2\x727\x728\ax\x2\x2\x728\x729\x5\xE2");
		sb.Append("r\x2\x729\x72A\ay\x2\x2\x72A\x72B\x5\x112\x8A\x2\x72B\x111\x3");
		sb.Append("\x2\x2\x2\x72C\x72E\at\x2\x2\x72D\x72F\x5\x114\x8B\x2\x72E\x72D");
		sb.Append("\x3\x2\x2\x2\x72E\x72F\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730");
		sb.Append("\x731\au\x2\x2\x731\x113\x3\x2\x2\x2\x732\x736\x5\x116\x8C\x2");
		sb.Append("\x733\x735\x5\x116\x8C\x2\x734\x733\x3\x2\x2\x2\x735\x738\x3");
		sb.Append("\x2\x2\x2\x736\x734\x3\x2\x2\x2\x736\x737\x3\x2\x2\x2\x737\x115");
		sb.Append("\x3\x2\x2\x2\x738\x736\x3\x2\x2\x2\x739\x73A\x5\x118\x8D\x2");
		sb.Append("\x73A\x73B\x5\xF2z\x2\x73B\x117\x3\x2\x2\x2\x73C\x740\x5\x11A");
		sb.Append("\x8E\x2\x73D\x73F\x5\x11A\x8E\x2\x73E\x73D\x3\x2\x2\x2\x73F");
		sb.Append("\x742\x3\x2\x2\x2\x740\x73E\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2");
		sb.Append("\x741\x119\x3\x2\x2\x2\x742\x740\x3\x2\x2\x2\x743\x744\a\x16");
		sb.Append("\x2\x2\x744\x745\x5\xE6t\x2\x745\x746\a|\x2\x2\x746\x74A\x3");
		sb.Append("\x2\x2\x2\x747\x748\a\x1E\x2\x2\x748\x74A\a|\x2\x2\x749\x743");
		sb.Append("\x3\x2\x2\x2\x749\x747\x3\x2\x2\x2\x74A\x11B\x3\x2\x2\x2\x74B");
		sb.Append("\x750\x5\x11E\x90\x2\x74C\x750\x5\x120\x91\x2\x74D\x750\x5\x122");
		sb.Append("\x92\x2\x74E\x750\x5\x12C\x97\x2\x74F\x74B\x3\x2\x2\x2\x74F");
		sb.Append("\x74C\x3\x2\x2\x2\x74F\x74D\x3\x2\x2\x2\x74F\x74E\x3\x2\x2\x2");
		sb.Append("\x750\x11D\x3\x2\x2\x2\x751\x752\al\x2\x2\x752\x753\ax\x2\x2");
		sb.Append("\x753\x754\x5\xE8u\x2\x754\x755\ay\x2\x2\x755\x756\x5\xECw\x2");
		sb.Append("\x756\x11F\x3\x2\x2\x2\x757\x758\a!\x2\x2\x758\x759\x5\xECw");
		sb.Append("\x2\x759\x75A\al\x2\x2\x75A\x75B\ax\x2\x2\x75B\x75C\x5\xE8u");
		sb.Append("\x2\x75C\x75D\ay\x2\x2\x75D\x75E\a}\x2\x2\x75E\x121\x3\x2\x2");
		sb.Append("\x2\x75F\x760\a.\x2\x2\x760\x762\ax\x2\x2\x761\x763\x5\x124");
		sb.Append("\x93\x2\x762\x761\x3\x2\x2\x2\x762\x763\x3\x2\x2\x2\x763\x764");
		sb.Append("\x3\x2\x2\x2\x764\x766\a}\x2\x2\x765\x767\x5\x126\x94\x2\x766");
		sb.Append("\x765\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x768\x3\x2\x2\x2");
		sb.Append("\x768\x76A\a}\x2\x2\x769\x76B\x5\x128\x95\x2\x76A\x769\x3\x2");
		sb.Append("\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76D");
		sb.Append("\ay\x2\x2\x76D\x76E\x5\xECw\x2\x76E\x123\x3\x2\x2\x2\x76F\x772");
		sb.Append("\x5\xFA~\x2\x770\x772\x5\x12A\x96\x2\x771\x76F\x3\x2\x2\x2\x771");
		sb.Append("\x770\x3\x2\x2\x2\x772\x125\x3\x2\x2\x2\x773\x774\x5\xE8u\x2");
		sb.Append("\x774\x127\x3\x2\x2\x2\x775\x776\x5\x12A\x96\x2\x776\x129\x3");
		sb.Append("\x2\x2\x2\x777\x77C\x5\x108\x85\x2\x778\x779\a{\x2\x2\x779\x77B");
		sb.Append("\x5\x108\x85\x2\x77A\x778\x3\x2\x2\x2\x77B\x77E\x3\x2\x2\x2");
		sb.Append("\x77C\x77A\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x12B\x3\x2");
		sb.Append("\x2\x2\x77E\x77C\x3\x2\x2\x2\x77F\x780\a/\x2\x2\x780\x781\a");
		sb.Append("x\x2\x2\x781\x782\x5\xFC\x7F\x2\x782\x783\x5\b\x5\x2\x783\x784");
		sb.Append("\a\x36\x2\x2\x784\x785\x5\xE2r\x2\x785\x786\ay\x2\x2\x786\x787");
		sb.Append("\x5\xECw\x2\x787\x12D\x3\x2\x2\x2\x788\x78E\x5\x130\x99\x2\x789");
		sb.Append("\x78E\x5\x132\x9A\x2\x78A\x78E\x5\x134\x9B\x2\x78B\x78E\x5\x136");
		sb.Append("\x9C\x2\x78C\x78E\x5\x138\x9D\x2\x78D\x788\x3\x2\x2\x2\x78D");
		sb.Append("\x789\x3\x2\x2\x2\x78D\x78A\x3\x2\x2\x2\x78D\x78B\x3\x2\x2\x2");
		sb.Append("\x78D\x78C\x3\x2\x2\x2\x78E\x12F\x3\x2\x2\x2\x78F\x790\a\x13");
		sb.Append("\x2\x2\x790\x791\a}\x2\x2\x791\x131\x3\x2\x2\x2\x792\x793\a");
		sb.Append("\x1C\x2\x2\x793\x794\a}\x2\x2\x794\x133\x3\x2\x2\x2\x795\x796");
		sb.Append("\a\x32\x2\x2\x796\x797\x5\b\x5\x2\x797\x798\a}\x2\x2\x798\x7A2");
		sb.Append("\x3\x2\x2\x2\x799\x79A\a\x32\x2\x2\x79A\x79B\a\x16\x2\x2\x79B");
		sb.Append("\x79C\x5\xE6t\x2\x79C\x79D\a}\x2\x2\x79D\x7A2\x3\x2\x2\x2\x79E");
		sb.Append("\x79F\a\x32\x2\x2\x79F\x7A0\a\x1E\x2\x2\x7A0\x7A2\a}\x2\x2\x7A1");
		sb.Append("\x795\x3\x2\x2\x2\x7A1\x799\x3\x2\x2\x2\x7A1\x79E\x3\x2\x2\x2");
		sb.Append("\x7A2\x135\x3\x2\x2\x2\x7A3\x7A5\aQ\x2\x2\x7A4\x7A6\x5\xE2r");
		sb.Append("\x2\x7A5\x7A4\x3\x2\x2\x2\x7A5\x7A6\x3\x2\x2\x2\x7A6\x7A7\x3");
		sb.Append("\x2\x2\x2\x7A7\x7A8\a}\x2\x2\x7A8\x137\x3\x2\x2\x2\x7A9\x7AB");
		sb.Append("\a^\x2\x2\x7AA\x7AC\x5\xE2r\x2\x7AB\x7AA\x3\x2\x2\x2\x7AB\x7AC");
		sb.Append("\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE\a}\x2\x2\x7AE\x139");
		sb.Append("\x3\x2\x2\x2\x7AF\x7B0\a`\x2\x2\x7B0\x7B2\x5\xF0y\x2\x7B1\x7B3");
		sb.Append("\x5\x13C\x9F\x2\x7B2\x7B1\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2");
		sb.Append("\x7B3\x7B5\x3\x2\x2\x2\x7B4\x7B6\x5\x144\xA3\x2\x7B5\x7B4\x3");
		sb.Append("\x2\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x13B\x3\x2\x2\x2\x7B7\x7B9");
		sb.Append("\x5\x13E\xA0\x2\x7B8\x7BA\x5\x142\xA2\x2\x7B9\x7B8\x3\x2\x2");
		sb.Append("\x2\x7B9\x7BA\x3\x2\x2\x2\x7BA\x7BD\x3\x2\x2\x2\x7BB\x7BD\x5");
		sb.Append("\x142\xA2\x2\x7BC\x7B7\x3\x2\x2\x2\x7BC\x7BB\x3\x2\x2\x2\x7BD");
		sb.Append("\x13D\x3\x2\x2\x2\x7BE\x7C2\x5\x140\xA1\x2\x7BF\x7C1\x5\x140");
		sb.Append("\xA1\x2\x7C0\x7BF\x3\x2\x2\x2\x7C1\x7C4\x3\x2\x2\x2\x7C2\x7C0");
		sb.Append("\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2\x7C3\x13F\x3\x2\x2\x2\x7C4");
		sb.Append("\x7C2\x3\x2\x2\x2\x7C5\x7C6\a\x17\x2\x2\x7C6\x7C7\ax\x2\x2\x7C7");
		sb.Append("\x7C9\x5 \x11\x2\x7C8\x7CA\x5\b\x5\x2\x7C9\x7C8\x3\x2\x2\x2");
		sb.Append("\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2\x2\x7CB\x7CC\ay\x2");
		sb.Append("\x2\x7CC\x7CD\x5\xF0y\x2\x7CD\x141\x3\x2\x2\x2\x7CE\x7CF\a\x17");
		sb.Append("\x2\x2\x7CF\x7D0\x5\xF0y\x2\x7D0\x143\x3\x2\x2\x2\x7D1\x7D2");
		sb.Append("\a+\x2\x2\x7D2\x7D3\x5\xF0y\x2\x7D3\x145\x3\x2\x2\x2\x7D4\x7D5");
		sb.Append("\a\x19\x2\x2\x7D5\x7D6\x5\xF0y\x2\x7D6\x147\x3\x2\x2\x2\x7D7");
		sb.Append("\x7D8\a\x64\x2\x2\x7D8\x7D9\x5\xF0y\x2\x7D9\x149\x3\x2\x2\x2");
		sb.Append("\x7DA\x7DB\a>\x2\x2\x7DB\x7DC\ax\x2\x2\x7DC\x7DD\x5\xE2r\x2");
		sb.Append("\x7DD\x7DE\ay\x2\x2\x7DE\x7DF\x5\xECw\x2\x7DF\x14B\x3\x2\x2");
		sb.Append("\x2\x7E0\x7E1\ag\x2\x2\x7E1\x7E2\ax\x2\x2\x7E2\x7E3\x5\x14E");
		sb.Append("\xA8\x2\x7E3\x7E4\ay\x2\x2\x7E4\x7E5\x5\xECw\x2\x7E5\x14D\x3");
		sb.Append("\x2\x2\x2\x7E6\x7E9\x5\xFA~\x2\x7E7\x7E9\x5\xE2r\x2\x7E8\x7E6");
		sb.Append("\x3\x2\x2\x2\x7E8\x7E7\x3\x2\x2\x2\x7E9\x14F\x3\x2\x2\x2\x7EA");
		sb.Append("\x7EB\x5\x2E8\x175\x2\x7EB\x7EC\aQ\x2\x2\x7EC\x7ED\x5\xE2r\x2");
		sb.Append("\x7ED\x7EE\a}\x2\x2\x7EE\x7F4\x3\x2\x2\x2\x7EF\x7F0\x5\x2E8");
		sb.Append("\x175\x2\x7F0\x7F1\a\x13\x2\x2\x7F1\x7F2\a}\x2\x2\x7F2\x7F4");
		sb.Append("\x3\x2\x2\x2\x7F3\x7EA\x3\x2\x2\x2\x7F3\x7EF\x3\x2\x2\x2\x7F4");
		sb.Append("\x151\x3\x2\x2\x2\x7F5\x7F7\a\x4\x2\x2\x7F6\x7F5\x3\x2\x2\x2");
		sb.Append("\x7F6\x7F7\x3\x2\x2\x2\x7F7\x7F9\x3\x2\x2\x2\x7F8\x7FA\x5\x15A");
		sb.Append("\xAE\x2\x7F9\x7F8\x3\x2\x2\x2\x7F9\x7FA\x3\x2\x2\x2\x7FA\x7FC");
		sb.Append("\x3\x2\x2\x2\x7FB\x7FD\x5\x15E\xB0\x2\x7FC\x7FB\x3\x2\x2\x2");
		sb.Append("\x7FC\x7FD\x3\x2\x2\x2\x7FD\x801\x3\x2\x2\x2\x7FE\x800\x5\x260");
		sb.Append("\x131\x2\x7FF\x7FE\x3\x2\x2\x2\x800\x803\x3\x2\x2\x2\x801\x7FF");
		sb.Append("\x3\x2\x2\x2\x801\x802\x3\x2\x2\x2\x802\x805\x3\x2\x2\x2\x803");
		sb.Append("\x801\x3\x2\x2\x2\x804\x806\x5\x166\xB4\x2\x805\x804\x3\x2\x2");
		sb.Append("\x2\x805\x806\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x808\a");
		sb.Append("\x2\x2\x3\x808\x153\x3\x2\x2\x2\x809\x80A\a@\x2\x2\x80A\x80B");
		sb.Append("\x5\x156\xAC\x2\x80B\x80D\x5\x158\xAD\x2\x80C\x80E\a}\x2\x2");
		sb.Append("\x80D\x80C\x3\x2\x2\x2\x80D\x80E\x3\x2\x2\x2\x80E\x155\x3\x2");
		sb.Append("\x2\x2\x80F\x814\x5\b\x5\x2\x810\x811\az\x2\x2\x811\x813\x5");
		sb.Append("\b\x5\x2\x812\x810\x3\x2\x2\x2\x813\x816\x3\x2\x2\x2\x814\x812");
		sb.Append("\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815\x157\x3\x2\x2\x2\x816");
		sb.Append("\x814\x3\x2\x2\x2\x817\x819\at\x2\x2\x818\x81A\x5\x15A\xAE\x2");
		sb.Append("\x819\x818\x3\x2\x2\x2\x819\x81A\x3\x2\x2\x2\x81A\x81C\x3\x2");
		sb.Append("\x2\x2\x81B\x81D\x5\x15E\xB0\x2\x81C\x81B\x3\x2\x2\x2\x81C\x81D");
		sb.Append("\x3\x2\x2\x2\x81D\x81F\x3\x2\x2\x2\x81E\x820\x5\x166\xB4\x2");
		sb.Append("\x81F\x81E\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x821\x3\x2");
		sb.Append("\x2\x2\x821\x822\au\x2\x2\x822\x159\x3\x2\x2\x2\x823\x825\x5");
		sb.Append("\x15C\xAF\x2\x824\x823\x3\x2\x2\x2\x825\x826\x3\x2\x2\x2\x826");
		sb.Append("\x824\x3\x2\x2\x2\x826\x827\x3\x2\x2\x2\x827\x15B\x3\x2\x2\x2");
		sb.Append("\x828\x829\a)\x2\x2\x829\x82A\x5\x2E6\x174\x2\x82A\x82B\x5\b");
		sb.Append("\x5\x2\x82B\x82C\a}\x2\x2\x82C\x15D\x3\x2\x2\x2\x82D\x82F\x5");
		sb.Append("\x160\xB1\x2\x82E\x82D\x3\x2\x2\x2\x82F\x830\x3\x2\x2\x2\x830");
		sb.Append("\x82E\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x15F\x3\x2\x2\x2");
		sb.Append("\x832\x835\x5\x162\xB2\x2\x833\x835\x5\x164\xB3\x2\x834\x832");
		sb.Append("\x3\x2\x2\x2\x834\x833\x3\x2\x2\x2\x835\x161\x3\x2\x2\x2\x836");
		sb.Append("\x837\ag\x2\x2\x837\x838\x5\b\x5\x2\x838\x839\a\x88\x2\x2\x839");
		sb.Append("\x83A\x5\n\x6\x2\x83A\x83B\a}\x2\x2\x83B\x163\x3\x2\x2\x2\x83C");
		sb.Append("\x83D\ag\x2\x2\x83D\x83E\x5\x4\x3\x2\x83E\x83F\a}\x2\x2\x83F");
		sb.Append("\x165\x3\x2\x2\x2\x840\x842\x5\x168\xB5\x2\x841\x840\x3\x2\x2");
		sb.Append("\x2\x842\x843\x3\x2\x2\x2\x843\x841\x3\x2\x2\x2\x843\x844\x3");
		sb.Append("\x2\x2\x2\x844\x167\x3\x2\x2\x2\x845\x848\x5\x154\xAB\x2\x846");
		sb.Append("\x848\x5\x16A\xB6\x2\x847\x845\x3\x2\x2\x2\x847\x846\x3\x2\x2");
		sb.Append("\x2\x848\x169\x3\x2\x2\x2\x849\x84B\x5\x266\x134\x2\x84A\x849");
		sb.Append("\x3\x2\x2\x2\x84A\x84B\x3\x2\x2\x2\x84B\x84D\x3\x2\x2\x2\x84C");
		sb.Append("\x84E\x5\x190\xC9\x2\x84D\x84C\x3\x2\x2\x2\x84D\x84E\x3\x2\x2");
		sb.Append("\x2\x84E\x854\x3\x2\x2\x2\x84F\x855\x5\x302\x182\x2\x850\x855");
		sb.Append("\x5\x304\x183\x2\x851\x855\x5\x306\x184\x2\x852\x855\x5\x308");
		sb.Append("\x185\x2\x853\x855\x5\x30A\x186\x2\x854\x84F\x3\x2\x2\x2\x854");
		sb.Append("\x850\x3\x2\x2\x2\x854\x851\x3\x2\x2\x2\x854\x852\x3\x2\x2\x2");
		sb.Append("\x854\x853\x3\x2\x2\x2\x855\x16B\x3\x2\x2\x2\x856\x857\x5\b");
		sb.Append("\x5\x2\x857\x858\a\x8C\x2\x2\x858\x859\x5\b\x5\x2\x859\x85A");
		sb.Append("\x5\f\a\x2\x85A\x16D\x3\x2\x2\x2\x85B\x85D\x5\x266\x134\x2\x85C");
		sb.Append("\x85B\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D\x85F\x3\x2\x2\x2");
		sb.Append("\x85E\x860\x5\x170\xB9\x2\x85F\x85E\x3\x2\x2\x2\x85F\x860\x3");
		sb.Append("\x2\x2\x2\x860\x862\x3\x2\x2\x2\x861\x863\x5\x2E4\x173\x2\x862");
		sb.Append("\x861\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2");
		sb.Append("\x864\x865\a\x1A\x2\x2\x865\x867\x5\b\x5\x2\x866\x868\x5\x174");
		sb.Append("\xBB\x2\x867\x866\x3\x2\x2\x2\x867\x868\x3\x2\x2\x2\x868\x86A");
		sb.Append("\x3\x2\x2\x2\x869\x86B\x5\x17A\xBE\x2\x86A\x869\x3\x2\x2\x2");
		sb.Append("\x86A\x86B\x3\x2\x2\x2\x86B\x86D\x3\x2\x2\x2\x86C\x86E\x5\x17E");
		sb.Append("\xC0\x2\x86D\x86C\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E\x86F");
		sb.Append("\x3\x2\x2\x2\x86F\x871\x5\x18A\xC6\x2\x870\x872\a}\x2\x2\x871");
		sb.Append("\x870\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x16F\x3\x2\x2\x2");
		sb.Append("\x873\x877\x5\x172\xBA\x2\x874\x876\x5\x172\xBA\x2\x875\x874");
		sb.Append("\x3\x2\x2\x2\x876\x879\x3\x2\x2\x2\x877\x875\x3\x2\x2\x2\x877");
		sb.Append("\x878\x3\x2\x2\x2\x878\x171\x3\x2\x2\x2\x879\x877\x3\x2\x2\x2");
		sb.Append("\x87A\x884\a\x41\x2\x2\x87B\x884\aM\x2\x2\x87C\x884\aL\x2\x2");
		sb.Append("\x87D\x884\a\x39\x2\x2\x87E\x884\aK\x2\x2\x87F\x884\a\v\x2\x2");
		sb.Append("\x880\x884\aS\x2\x2\x881\x884\aY\x2\x2\x882\x884\x5\x282\x142");
		sb.Append("\x2\x883\x87A\x3\x2\x2\x2\x883\x87B\x3\x2\x2\x2\x883\x87C\x3");
		sb.Append("\x2\x2\x2\x883\x87D\x3\x2\x2\x2\x883\x87E\x3\x2\x2\x2\x883\x87F");
		sb.Append("\x3\x2\x2\x2\x883\x880\x3\x2\x2\x2\x883\x881\x3\x2\x2\x2\x883");
		sb.Append("\x882\x3\x2\x2\x2\x884\x173\x3\x2\x2\x2\x885\x886\a\x89\x2\x2");
		sb.Append("\x886\x887\x5\x176\xBC\x2\x887\x888\a\x8A\x2\x2\x888\x175\x3");
		sb.Append("\x2\x2\x2\x889\x88B\x5\x266\x134\x2\x88A\x889\x3\x2\x2\x2\x88A");
		sb.Append("\x88B\x3\x2\x2\x2\x88B\x88C\x3\x2\x2\x2\x88C\x894\x5\x178\xBD");
		sb.Append("\x2\x88D\x88F\a{\x2\x2\x88E\x890\x5\x266\x134\x2\x88F\x88E\x3");
		sb.Append("\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x891\x3\x2\x2\x2\x891\x893");
		sb.Append("\x5\x178\xBD\x2\x892\x88D\x3\x2\x2\x2\x893\x896\x3\x2\x2\x2");
		sb.Append("\x894\x892\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x177\x3\x2");
		sb.Append("\x2\x2\x896\x894\x3\x2\x2\x2\x897\x898\x5\b\x5\x2\x898\x179");
		sb.Append("\x3\x2\x2\x2\x899\x89A\a|\x2\x2\x89A\x89F\x5 \x11\x2\x89B\x89C");
		sb.Append("\a{\x2\x2\x89C\x89E\x5\"\x12\x2\x89D\x89B\x3\x2\x2\x2\x89E\x8A1");
		sb.Append("\x3\x2\x2\x2\x89F\x89D\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0");
		sb.Append("\x17B\x3\x2\x2\x2\x8A1\x89F\x3\x2\x2\x2\x8A2\x8A7\x5\"\x12\x2");
		sb.Append("\x8A3\x8A4\a{\x2\x2\x8A4\x8A6\x5\"\x12\x2\x8A5\x8A3\x3\x2\x2");
		sb.Append("\x2\x8A6\x8A9\x3\x2\x2\x2\x8A7\x8A5\x3\x2\x2\x2\x8A7\x8A8\x3");
		sb.Append("\x2\x2\x2\x8A8\x17D\x3\x2\x2\x2\x8A9\x8A7\x3\x2\x2\x2\x8AA\x8AE");
		sb.Append("\x5\x180\xC1\x2\x8AB\x8AD\x5\x180\xC1\x2\x8AC\x8AB\x3\x2\x2");
		sb.Append("\x2\x8AD\x8B0\x3\x2\x2\x2\x8AE\x8AC\x3\x2\x2\x2\x8AE\x8AF\x3");
		sb.Append("\x2\x2\x2\x8AF\x17F\x3\x2\x2\x2\x8B0\x8AE\x3\x2\x2\x2\x8B1\x8B2");
		sb.Append("\x5\x2CE\x168\x2\x8B2\x8B3\x5\x178\xBD\x2\x8B3\x8B4\a|\x2\x2");
		sb.Append("\x8B4\x8B5\x5\x182\xC2\x2\x8B5\x181\x3\x2\x2\x2\x8B6\x8C1\x5");
		sb.Append("\x188\xC5\x2\x8B7\x8BA\x5\x184\xC3\x2\x8B8\x8B9\a{\x2\x2\x8B9");
		sb.Append("\x8BB\x5\x186\xC4\x2\x8BA\x8B8\x3\x2\x2\x2\x8BA\x8BB\x3\x2\x2");
		sb.Append("\x2\x8BB\x8BE\x3\x2\x2\x2\x8BC\x8BD\a{\x2\x2\x8BD\x8BF\x5\x188");
		sb.Append("\xC5\x2\x8BE\x8BC\x3\x2\x2\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C1");
		sb.Append("\x3\x2\x2\x2\x8C0\x8B6\x3\x2\x2\x2\x8C0\x8B7\x3\x2\x2\x2\x8C1");
		sb.Append("\x183\x3\x2\x2\x2\x8C2\x8C6\x5 \x11\x2\x8C3\x8C6\a\x1A\x2\x2");
		sb.Append("\x8C4\x8C6\a[\x2\x2\x8C5\x8C2\x3\x2\x2\x2\x8C5\x8C3\x3\x2\x2");
		sb.Append("\x2\x8C5\x8C4\x3\x2\x2\x2\x8C6\x185\x3\x2\x2\x2\x8C7\x8CC\x5");
		sb.Append("\"\x12\x2\x8C8\x8C9\a{\x2\x2\x8C9\x8CB\x5\"\x12\x2\x8CA\x8C8");
		sb.Append("\x3\x2\x2\x2\x8CB\x8CE\x3\x2\x2\x2\x8CC\x8CA\x3\x2\x2\x2\x8CC");
		sb.Append("\x8CD\x3\x2\x2\x2\x8CD\x187\x3\x2\x2\x2\x8CE\x8CC\x3\x2\x2\x2");
		sb.Append("\x8CF\x8D0\a\x41\x2\x2\x8D0\x8D1\ax\x2\x2\x8D1\x8D2\ay\x2\x2");
		sb.Append("\x8D2\x189\x3\x2\x2\x2\x8D3\x8D5\at\x2\x2\x8D4\x8D6\x5\x18C");
		sb.Append("\xC7\x2\x8D5\x8D4\x3\x2\x2\x2\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D7");
		sb.Append("\x3\x2\x2\x2\x8D7\x8D8\au\x2\x2\x8D8\x18B\x3\x2\x2\x2\x8D9\x8DB");
		sb.Append("\x5\x18E\xC8\x2\x8DA\x8D9\x3\x2\x2\x2\x8DB\x8DC\x3\x2\x2\x2");
		sb.Append("\x8DC\x8DA\x3\x2\x2\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\x18D\x3\x2");
		sb.Append("\x2\x2\x8DE\x8E0\x5\x266\x134\x2\x8DF\x8DE\x3\x2\x2\x2\x8DF");
		sb.Append("\x8E0\x3\x2\x2\x2\x8E0\x8E2\x3\x2\x2\x2\x8E1\x8E3\x5\x190\xC9");
		sb.Append("\x2\x8E2\x8E1\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3\x8EB\x3");
		sb.Append("\x2\x2\x2\x8E4\x8EC\x5\x194\xCB\x2\x8E5\x8E6\a\x87\x2\x2\x8E6");
		sb.Append("\x8E7\x5\b\x5\x2\x8E7\x8E8\ax\x2\x2\x8E8\x8E9\ay\x2\x2\x8E9");
		sb.Append("\x8EA\x5\x20A\x106\x2\x8EA\x8EC\x3\x2\x2\x2\x8EB\x8E4\x3\x2");
		sb.Append("\x2\x2\x8EB\x8E5\x3\x2\x2\x2\x8EC\x8EF\x3\x2\x2\x2\x8ED\x8EF");
		sb.Append("\a\x3\x2\x2\x8EE\x8DF\x3\x2\x2\x2\x8EE\x8ED\x3\x2\x2\x2\x8EF");
		sb.Append("\x18F\x3\x2\x2\x2\x8F0\x8F2\x5\x192\xCA\x2\x8F1\x8F0\x3\x2\x2");
		sb.Append("\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F1\x3\x2\x2\x2\x8F3\x8F4\x3");
		sb.Append("\x2\x2\x2\x8F4\x191\x3\x2\x2\x2\x8F5\x905\a\x41\x2\x2\x8F6\x905");
		sb.Append("\aM\x2\x2\x8F7\x905\aL\x2\x2\x8F8\x905\a\x39\x2\x2\x8F9\x905");
		sb.Append("\aK\x2\x2\x8FA\x905\aN\x2\x2\x8FB\x905\aj\x2\x2\x8FC\x905\a");
		sb.Append("h\x2\x2\x8FD\x905\aS\x2\x2\x8FE\x905\aH\x2\x2\x8FF\x905\a\v");
		sb.Append("\x2\x2\x900\x905\aY\x2\x2\x901\x905\a\x65\x2\x2\x902\x905\a");
		sb.Append(")\x2\x2\x903\x905\x5\x2E4\x173\x2\x904\x8F5\x3\x2\x2\x2\x904");
		sb.Append("\x8F6\x3\x2\x2\x2\x904\x8F7\x3\x2\x2\x2\x904\x8F8\x3\x2\x2\x2");
		sb.Append("\x904\x8F9\x3\x2\x2\x2\x904\x8FA\x3\x2\x2\x2\x904\x8FB\x3\x2");
		sb.Append("\x2\x2\x904\x8FC\x3\x2\x2\x2\x904\x8FD\x3\x2\x2\x2\x904\x8FE");
		sb.Append("\x3\x2\x2\x2\x904\x8FF\x3\x2\x2\x2\x904\x900\x3\x2\x2\x2\x904");
		sb.Append("\x901\x3\x2\x2\x2\x904\x902\x3\x2\x2\x2\x904\x903\x3\x2\x2\x2");
		sb.Append("\x905\x193\x3\x2\x2\x2\x906\x916\x5\x312\x18A\x2\x907\x916\x5");
		sb.Append("\x196\xCC\x2\x908\x916\x5\x30C\x187\x2\x909\x90A\x5\x1F2\xFA");
		sb.Append("\x2\x90A\x90B\x5\x1F4\xFB\x2\x90B\x916\x3\x2\x2\x2\x90C\x916");
		sb.Append("\x5\x318\x18D\x2\x90D\x90E\x5,\x17\x2\x90E\x90F\x5\x31A\x18E");
		sb.Append("\x2\x90F\x916\x3\x2\x2\x2\x910\x916\x5\x302\x182\x2\x911\x916");
		sb.Append("\x5\x304\x183\x2\x912\x916\x5\x306\x184\x2\x913\x916\x5\x308");
		sb.Append("\x185\x2\x914\x916\x5\x30A\x186\x2\x915\x906\x3\x2\x2\x2\x915");
		sb.Append("\x907\x3\x2\x2\x2\x915\x908\x3\x2\x2\x2\x915\x909\x3\x2\x2\x2");
		sb.Append("\x915\x90C\x3\x2\x2\x2\x915\x90D\x3\x2\x2\x2\x915\x910\x3\x2");
		sb.Append("\x2\x2\x915\x911\x3\x2\x2\x2\x915\x912\x3\x2\x2\x2\x915\x913");
		sb.Append("\x3\x2\x2\x2\x915\x914\x3\x2\x2\x2\x916\x195\x3\x2\x2\x2\x917");
		sb.Append("\x921\x5\xE\b\x2\x918\x919\x5\"\x12\x2\x919\x91A\az\x2\x2\x91A");
		sb.Append("\x91B\x5\x314\x18B\x2\x91B\x922\x3\x2\x2\x2\x91C\x922\x5\x31A");
		sb.Append("\x18E\x2\x91D\x922\x5\x310\x189\x2\x91E\x922\x5\x314\x18B\x2");
		sb.Append("\x91F\x922\x5\x320\x191\x2\x920\x922\x5\x30E\x188\x2\x921\x918");
		sb.Append("\x3\x2\x2\x2\x921\x91C\x3\x2\x2\x2\x921\x91D\x3\x2\x2\x2\x921");
		sb.Append("\x91E\x3\x2\x2\x2\x921\x91F\x3\x2\x2\x2\x921\x920\x3\x2\x2\x2");
		sb.Append("\x922\x197\x3\x2\x2\x2\x923\x928\x5\x19A\xCE\x2\x924\x925\a");
		sb.Append("{\x2\x2\x925\x927\x5\x19A\xCE\x2\x926\x924\x3\x2\x2\x2\x927");
		sb.Append("\x92A\x3\x2\x2\x2\x928\x926\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2");
		sb.Append("\x929\x199\x3\x2\x2\x2\x92A\x928\x3\x2\x2\x2\x92B\x92C\x5\b");
		sb.Append("\x5\x2\x92C\x92D\a\x88\x2\x2\x92D\x92E\x5\xE6t\x2\x92E\x19B");
		sb.Append("\x3\x2\x2\x2\x92F\x934\x5\x19E\xD0\x2\x930\x931\a{\x2\x2\x931");
		sb.Append("\x933\x5\x19E\xD0\x2\x932\x930\x3\x2\x2\x2\x933\x936\x3\x2\x2");
		sb.Append("\x2\x934\x932\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x19D\x3");
		sb.Append("\x2\x2\x2\x936\x934\x3\x2\x2\x2\x937\x93D\x5\b\x5\x2\x938\x939");
		sb.Append("\x5\b\x5\x2\x939\x93A\a\x88\x2\x2\x93A\x93B\x5\x1A0\xD1\x2\x93B");
		sb.Append("\x93D\x3\x2\x2\x2\x93C\x937\x3\x2\x2\x2\x93C\x938\x3\x2\x2\x2");
		sb.Append("\x93D\x19F\x3\x2\x2\x2\x93E\x941\x5\xE2r\x2\x93F\x941\x5\x226");
		sb.Append("\x114\x2\x940\x93E\x3\x2\x2\x2\x940\x93F\x3\x2\x2\x2\x941\x1A1");
		sb.Append("\x3\x2\x2\x2\x942\x943\x5\x1A4\xD3\x2\x943\x944\x5\x1AE\xD8");
		sb.Append("\x2\x944\x1A3\x3\x2\x2\x2\x945\x947\x5\x266\x134\x2\x946\x945");
		sb.Append("\x3\x2\x2\x2\x946\x947\x3\x2\x2\x2\x947\x949\x3\x2\x2\x2\x948");
		sb.Append("\x94A\x5\x1A6\xD4\x2\x949\x948\x3\x2\x2\x2\x949\x94A\x3\x2\x2");
		sb.Append("\x2\x94A\x94C\x3\x2\x2\x2\x94B\x94D\x5\x2E4\x173\x2\x94C\x94B");
		sb.Append("\x3\x2\x2\x2\x94C\x94D\x3\x2\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E");
		sb.Append("\x94F\x5\x1AA\xD6\x2\x94F\x951\x5\x1AC\xD7\x2\x950\x952\x5\x174");
		sb.Append("\xBB\x2\x951\x950\x3\x2\x2\x2\x951\x952\x3\x2\x2\x2\x952\x953");
		sb.Append("\x3\x2\x2\x2\x953\x955\ax\x2\x2\x954\x956\x5\x1B0\xD9\x2\x955");
		sb.Append("\x954\x3\x2\x2\x2\x955\x956\x3\x2\x2\x2\x956\x957\x3\x2\x2\x2");
		sb.Append("\x957\x959\ay\x2\x2\x958\x95A\x5\x17E\xC0\x2\x959\x958\x3\x2");
		sb.Append("\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x1A5\x3\x2\x2\x2\x95B\x95D");
		sb.Append("\x5\x1A8\xD5\x2\x95C\x95B\x3\x2\x2\x2\x95D\x95E\x3\x2\x2\x2");
		sb.Append("\x95E\x95C\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x1A7\x3\x2");
		sb.Append("\x2\x2\x960\x96D\a\x41\x2\x2\x961\x96D\aM\x2\x2\x962\x96D\a");
		sb.Append("L\x2\x2\x963\x96D\a\x39\x2\x2\x964\x96D\aK\x2\x2\x965\x96D\a");
		sb.Append("Y\x2\x2\x966\x96D\ah\x2\x2\x967\x96D\aS\x2\x2\x968\x96D\aH\x2");
		sb.Append("\x2\x969\x96D\a\v\x2\x2\x96A\x96D\a)\x2\x2\x96B\x96D\x5\x28C");
		sb.Append("\x147\x2\x96C\x960\x3\x2\x2\x2\x96C\x961\x3\x2\x2\x2\x96C\x962");
		sb.Append("\x3\x2\x2\x2\x96C\x963\x3\x2\x2\x2\x96C\x964\x3\x2\x2\x2\x96C");
		sb.Append("\x965\x3\x2\x2\x2\x96C\x966\x3\x2\x2\x2\x96C\x967\x3\x2\x2\x2");
		sb.Append("\x96C\x968\x3\x2\x2\x2\x96C\x969\x3\x2\x2\x2\x96C\x96A\x3\x2");
		sb.Append("\x2\x2\x96C\x96B\x3\x2\x2\x2\x96D\x1A9\x3\x2\x2\x2\x96E\x971");
		sb.Append("\x5\xE\b\x2\x96F\x971\ai\x2\x2\x970\x96E\x3\x2\x2\x2\x970\x96F");
		sb.Append("\x3\x2\x2\x2\x971\x1AB\x3\x2\x2\x2\x972\x973\x5\"\x12\x2\x973");
		sb.Append("\x1AD\x3\x2\x2\x2\x974\x977\x5\xF0y\x2\x975\x977\a}\x2\x2\x976");
		sb.Append("\x974\x3\x2\x2\x2\x976\x975\x3\x2\x2\x2\x977\x1AF\x3\x2\x2\x2");
		sb.Append("\x978\x97F\x5\x1BA\xDE\x2\x979\x97C\x5\x1B2\xDA\x2\x97A\x97B");
		sb.Append("\a{\x2\x2\x97B\x97D\x5\x1BA\xDE\x2\x97C\x97A\x3\x2\x2\x2\x97C");
		sb.Append("\x97D\x3\x2\x2\x2\x97D\x97F\x3\x2\x2\x2\x97E\x978\x3\x2\x2\x2");
		sb.Append("\x97E\x979\x3\x2\x2\x2\x97F\x1B1\x3\x2\x2\x2\x980\x985\x5\x1B4");
		sb.Append("\xDB\x2\x981\x982\a{\x2\x2\x982\x984\x5\x1B4\xDB\x2\x983\x981");
		sb.Append("\x3\x2\x2\x2\x984\x987\x3\x2\x2\x2\x985\x983\x3\x2\x2\x2\x985");
		sb.Append("\x986\x3\x2\x2\x2\x986\x1B3\x3\x2\x2\x2\x987\x985\x3\x2\x2\x2");
		sb.Append("\x988\x98A\x5\x266\x134\x2\x989\x988\x3\x2\x2\x2\x989\x98A\x3");
		sb.Append("\x2\x2\x2\x98A\x98C\x3\x2\x2\x2\x98B\x98D\x5\x1B8\xDD\x2\x98C");
		sb.Append("\x98B\x3\x2\x2\x2\x98C\x98D\x3\x2\x2\x2\x98D\x98E\x3\x2\x2\x2");
		sb.Append("\x98E\x98F\x5\xE\b\x2\x98F\x991\x5\b\x5\x2\x990\x992\x5\x1B6");
		sb.Append("\xDC\x2\x991\x990\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992\x995");
		sb.Append("\x3\x2\x2\x2\x993\x995\x5\x2F4\x17B\x2\x994\x989\x3\x2\x2\x2");
		sb.Append("\x994\x993\x3\x2\x2\x2\x995\x1B5\x3\x2\x2\x2\x996\x997\a\x88");
		sb.Append("\x2\x2\x997\x998\x5\xE2r\x2\x998\x1B7\x3\x2\x2\x2\x999\x99A");
		sb.Append("\t\n\x2\x2\x99A\x1B9\x3\x2\x2\x2\x99B\x99D\x5\x266\x134\x2\x99C");
		sb.Append("\x99B\x3\x2\x2\x2\x99C\x99D\x3\x2\x2\x2\x99D\x99E\x3\x2\x2\x2");
		sb.Append("\x99E\x99F\aI\x2\x2\x99F\x9A0\x5\x21C\x10F\x2\x9A0\x9A1\x5\b");
		sb.Append("\x5\x2\x9A1\x1BB\x3\x2\x2\x2\x9A2\x9A4\x5\x266\x134\x2\x9A3");
		sb.Append("\x9A2\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A6\x3\x2\x2\x2");
		sb.Append("\x9A5\x9A7\x5\x1BE\xE0\x2\x9A6\x9A5\x3\x2\x2\x2\x9A6\x9A7\x3");
		sb.Append("\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9A9\x5\xE\b\x2\x9A9\x9AA");
		sb.Append("\x5\x1AC\xD7\x2\x9AA\x9AB\at\x2\x2\x9AB\x9AC\x5\x1C2\xE2\x2");
		sb.Append("\x9AC\x9AD\au\x2\x2\x9AD\x1BD\x3\x2\x2\x2\x9AE\x9B0\x5\x1C0");
		sb.Append("\xE1\x2\x9AF\x9AE\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2\x9B1\x9AF");
		sb.Append("\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2\x2\x9B2\x1BF\x3\x2\x2\x2\x9B3");
		sb.Append("\x9C0\a\x41\x2\x2\x9B4\x9C0\aM\x2\x2\x9B5\x9C0\aL\x2\x2\x9B6");
		sb.Append("\x9C0\a\x39\x2\x2\x9B7\x9C0\aK\x2\x2\x9B8\x9C0\aY\x2\x2\x9B9");
		sb.Append("\x9C0\ah\x2\x2\x9BA\x9C0\aS\x2\x2\x9BB\x9C0\aH\x2\x2\x9BC\x9C0");
		sb.Append("\a\v\x2\x2\x9BD\x9C0\a)\x2\x2\x9BE\x9C0\x5\x28E\x148\x2\x9BF");
		sb.Append("\x9B3\x3\x2\x2\x2\x9BF\x9B4\x3\x2\x2\x2\x9BF\x9B5\x3\x2\x2\x2");
		sb.Append("\x9BF\x9B6\x3\x2\x2\x2\x9BF\x9B7\x3\x2\x2\x2\x9BF\x9B8\x3\x2");
		sb.Append("\x2\x2\x9BF\x9B9\x3\x2\x2\x2\x9BF\x9BA\x3\x2\x2\x2\x9BF\x9BB");
		sb.Append("\x3\x2\x2\x2\x9BF\x9BC\x3\x2\x2\x2\x9BF\x9BD\x3\x2\x2\x2\x9BF");
		sb.Append("\x9BE\x3\x2\x2\x2\x9C0\x1C1\x3\x2\x2\x2\x9C1\x9C3\x5\x266\x134");
		sb.Append("\x2\x9C2\x9C1\x3\x2\x2\x2\x9C2\x9C3\x3\x2\x2\x2\x9C3\x9C5\x3");
		sb.Append("\x2\x2\x2\x9C4\x9C6\x5\x1C8\xE5\x2\x9C5\x9C4\x3\x2\x2\x2\x9C5");
		sb.Append("\x9C6\x3\x2\x2\x2\x9C6\x9D1\x3\x2\x2\x2\x9C7\x9C8\x5\x2EA\x176");
		sb.Append("\x2\x9C8\x9CA\x5\x1CA\xE6\x2\x9C9\x9CB\x5\x1C6\xE4\x2\x9CA\x9C9");
		sb.Append("\x3\x2\x2\x2\x9CA\x9CB\x3\x2\x2\x2\x9CB\x9D2\x3\x2\x2\x2\x9CC");
		sb.Append("\x9CD\x5\x2EC\x177\x2\x9CD\x9CF\x5\x1CA\xE6\x2\x9CE\x9D0\x5");
		sb.Append("\x1C4\xE3\x2\x9CF\x9CE\x3\x2\x2\x2\x9CF\x9D0\x3\x2\x2\x2\x9D0");
		sb.Append("\x9D2\x3\x2\x2\x2\x9D1\x9C7\x3\x2\x2\x2\x9D1\x9CC\x3\x2\x2\x2");
		sb.Append("\x9D2\x1C3\x3\x2\x2\x2\x9D3\x9D5\x5\x266\x134\x2\x9D4\x9D3\x3");
		sb.Append("\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5\x9D7\x3\x2\x2\x2\x9D6\x9D8");
		sb.Append("\x5\x1C8\xE5\x2\x9D7\x9D6\x3\x2\x2\x2\x9D7\x9D8\x3\x2\x2\x2");
		sb.Append("\x9D8\x9D9\x3\x2\x2\x2\x9D9\x9DA\x5\x2EA\x176\x2\x9DA\x9DB\x5");
		sb.Append("\x1CA\xE6\x2\x9DB\x1C5\x3\x2\x2\x2\x9DC\x9DE\x5\x266\x134\x2");
		sb.Append("\x9DD\x9DC\x3\x2\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE\x9E0\x3\x2");
		sb.Append("\x2\x2\x9DF\x9E1\x5\x1C8\xE5\x2\x9E0\x9DF\x3\x2\x2\x2\x9E0\x9E1");
		sb.Append("\x3\x2\x2\x2\x9E1\x9E2\x3\x2\x2\x2\x9E2\x9E3\x5\x2EC\x177\x2");
		sb.Append("\x9E3\x9E4\x5\x1CA\xE6\x2\x9E4\x1C7\x3\x2\x2\x2\x9E5\x9ED\a");
		sb.Append("L\x2\x2\x9E6\x9ED\a\x39\x2\x2\x9E7\x9ED\aK\x2\x2\x9E8\x9E9\a");
		sb.Append("L\x2\x2\x9E9\x9ED\a\x39\x2\x2\x9EA\x9EB\a\x39\x2\x2\x9EB\x9ED");
		sb.Append("\aL\x2\x2\x9EC\x9E5\x3\x2\x2\x2\x9EC\x9E6\x3\x2\x2\x2\x9EC\x9E7");
		sb.Append("\x3\x2\x2\x2\x9EC\x9E8\x3\x2\x2\x2\x9EC\x9EA\x3\x2\x2\x2\x9ED");
		sb.Append("\x1C9\x3\x2\x2\x2\x9EE\x9F1\x5\xF0y\x2\x9EF\x9F1\a}\x2\x2\x9F0");
		sb.Append("\x9EE\x3\x2\x2\x2\x9F0\x9EF\x3\x2\x2\x2\x9F1\x1CB\x3\x2\x2\x2");
		sb.Append("\x9F2\x9F4\x5\x266\x134\x2\x9F3\x9F2\x3\x2\x2\x2\x9F3\x9F4\x3");
		sb.Append("\x2\x2\x2\x9F4\x9F6\x3\x2\x2\x2\x9F5\x9F7\x5\x1CE\xE8\x2\x9F6");
		sb.Append("\x9F5\x3\x2\x2\x2\x9F6\x9F7\x3\x2\x2\x2\x9F7\x9F8\x3\x2\x2\x2");
		sb.Append("\x9F8\x9F9\a\'\x2\x2\x9F9\xA02\x5\xE\b\x2\x9FA\x9FB\x5\x19C");
		sb.Append("\xCF\x2\x9FB\x9FC\a}\x2\x2\x9FC\xA03\x3\x2\x2\x2\x9FD\x9FE\x5");
		sb.Append("\x1AC\xD7\x2\x9FE\x9FF\at\x2\x2\x9FF\xA00\x5\x1D2\xEA\x2\xA00");
		sb.Append("\xA01\au\x2\x2\xA01\xA03\x3\x2\x2\x2\xA02\x9FA\x3\x2\x2\x2\xA02");
		sb.Append("\x9FD\x3\x2\x2\x2\xA03\x1CD\x3\x2\x2\x2\xA04\xA08\x5\x1D0\xE9");
		sb.Append("\x2\xA05\xA07\x5\x1D0\xE9\x2\xA06\xA05\x3\x2\x2\x2\xA07\xA0A");
		sb.Append("\x3\x2\x2\x2\xA08\xA06\x3\x2\x2\x2\xA08\xA09\x3\x2\x2\x2\xA09");
		sb.Append("\x1CF\x3\x2\x2\x2\xA0A\xA08\x3\x2\x2\x2\xA0B\xA18\a\x41\x2\x2");
		sb.Append("\xA0C\xA18\aM\x2\x2\xA0D\xA18\aL\x2\x2\xA0E\xA18\a\x39\x2\x2");
		sb.Append("\xA0F\xA18\aK\x2\x2\xA10\xA18\aY\x2\x2\xA11\xA18\ah\x2\x2\xA12");
		sb.Append("\xA18\aS\x2\x2\xA13\xA18\aH\x2\x2\xA14\xA18\a\v\x2\x2\xA15\xA18");
		sb.Append("\a)\x2\x2\xA16\xA18\x5\x290\x149\x2\xA17\xA0B\x3\x2\x2\x2\xA17");
		sb.Append("\xA0C\x3\x2\x2\x2\xA17\xA0D\x3\x2\x2\x2\xA17\xA0E\x3\x2\x2\x2");
		sb.Append("\xA17\xA0F\x3\x2\x2\x2\xA17\xA10\x3\x2\x2\x2\xA17\xA11\x3\x2");
		sb.Append("\x2\x2\xA17\xA12\x3\x2\x2\x2\xA17\xA13\x3\x2\x2\x2\xA17\xA14");
		sb.Append("\x3\x2\x2\x2\xA17\xA15\x3\x2\x2\x2\xA17\xA16\x3\x2\x2\x2\xA18");
		sb.Append("\x1D1\x3\x2\x2\x2\xA19\xA1B\x5\x266\x134\x2\xA1A\xA19\x3\x2");
		sb.Append("\x2\x2\xA1A\xA1B\x3\x2\x2\x2\xA1B\xA24\x3\x2\x2\x2\xA1C\xA1D");
		sb.Append("\x5\x2EE\x178\x2\xA1D\xA1E\x5\xF0y\x2\xA1E\xA1F\x5\x1D6\xEC");
		sb.Append("\x2\xA1F\xA25\x3\x2\x2\x2\xA20\xA21\x5\x2F0\x179\x2\xA21\xA22");
		sb.Append("\x5\xF0y\x2\xA22\xA23\x5\x1D4\xEB\x2\xA23\xA25\x3\x2\x2\x2\xA24");
		sb.Append("\xA1C\x3\x2\x2\x2\xA24\xA20\x3\x2\x2\x2\xA25\x1D3\x3\x2\x2\x2");
		sb.Append("\xA26\xA28\x5\x266\x134\x2\xA27\xA26\x3\x2\x2\x2\xA27\xA28\x3");
		sb.Append("\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2A\x5\x2EE\x178\x2\xA2A");
		sb.Append("\xA2B\x5\xF0y\x2\xA2B\x1D5\x3\x2\x2\x2\xA2C\xA2E\x5\x266\x134");
		sb.Append("\x2\xA2D\xA2C\x3\x2\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA2F\x3");
		sb.Append("\x2\x2\x2\xA2F\xA30\x5\x2F0\x179\x2\xA30\xA31\x5\xF0y\x2\xA31");
		sb.Append("\x1D7\x3\x2\x2\x2\xA32\xA34\x5\x266\x134\x2\xA33\xA32\x3\x2");
		sb.Append("\x2\x2\xA33\xA34\x3\x2\x2\x2\xA34\xA36\x3\x2\x2\x2\xA35\xA37");
		sb.Append("\x5\x1DA\xEE\x2\xA36\xA35\x3\x2\x2\x2\xA36\xA37\x3\x2\x2\x2");
		sb.Append("\xA37\xA38\x3\x2\x2\x2\xA38\xA39\x5\x1DE\xF0\x2\xA39\xA3A\a");
		sb.Append("t\x2\x2\xA3A\xA3B\x5\x1C2\xE2\x2\xA3B\xA3C\au\x2\x2\xA3C\x1D9");
		sb.Append("\x3\x2\x2\x2\xA3D\xA41\x5\x1DC\xEF\x2\xA3E\xA40\x5\x1DC\xEF");
		sb.Append("\x2\xA3F\xA3E\x3\x2\x2\x2\xA40\xA43\x3\x2\x2\x2\xA41\xA3F\x3");
		sb.Append("\x2\x2\x2\xA41\xA42\x3\x2\x2\x2\xA42\x1DB\x3\x2\x2\x2\xA43\xA41");
		sb.Append("\x3\x2\x2\x2\xA44\xA50\a\x41\x2\x2\xA45\xA50\aM\x2\x2\xA46\xA50");
		sb.Append("\aL\x2\x2\xA47\xA50\a\x39\x2\x2\xA48\xA50\aK\x2\x2\xA49\xA50");
		sb.Append("\ah\x2\x2\xA4A\xA50\aS\x2\x2\xA4B\xA50\aH\x2\x2\xA4C\xA50\a");
		sb.Append("\v\x2\x2\xA4D\xA50\a)\x2\x2\xA4E\xA50\x5\x292\x14A\x2\xA4F\xA44");
		sb.Append("\x3\x2\x2\x2\xA4F\xA45\x3\x2\x2\x2\xA4F\xA46\x3\x2\x2\x2\xA4F");
		sb.Append("\xA47\x3\x2\x2\x2\xA4F\xA48\x3\x2\x2\x2\xA4F\xA49\x3\x2\x2\x2");
		sb.Append("\xA4F\xA4A\x3\x2\x2\x2\xA4F\xA4B\x3\x2\x2\x2\xA4F\xA4C\x3\x2");
		sb.Append("\x2\x2\xA4F\xA4D\x3\x2\x2\x2\xA4F\xA4E\x3\x2\x2\x2\xA50\x1DD");
		sb.Append("\x3\x2\x2\x2\xA51\xA55\x5\xE\b\x2\xA52\xA53\x5\"\x12\x2\xA53");
		sb.Append("\xA54\az\x2\x2\xA54\xA56\x3\x2\x2\x2\xA55\xA52\x3\x2\x2\x2\xA55");
		sb.Append("\xA56\x3\x2\x2\x2\xA56\xA57\x3\x2\x2\x2\xA57\xA58\a]\x2\x2\xA58");
		sb.Append("\xA59\av\x2\x2\xA59\xA5A\x5\x1B0\xD9\x2\xA5A\xA5B\aw\x2\x2\xA5B");
		sb.Append("\x1DF\x3\x2\x2\x2\xA5C\xA5E\x5\x266\x134\x2\xA5D\xA5C\x3\x2");
		sb.Append("\x2\x2\xA5D\xA5E\x3\x2\x2\x2\xA5E\xA5F\x3\x2\x2\x2\xA5F\xA60");
		sb.Append("\x5\x1E2\xF2\x2\xA60\xA61\x5\x1E6\xF4\x2\xA61\xA62\x5\x1F4\xFB");
		sb.Append("\x2\xA62\x1E1\x3\x2\x2\x2\xA63\xA67\x5\x1E4\xF3\x2\xA64\xA66");
		sb.Append("\x5\x1E4\xF3\x2\xA65\xA64\x3\x2\x2\x2\xA66\xA69\x3\x2\x2\x2");
		sb.Append("\xA67\xA65\x3\x2\x2\x2\xA67\xA68\x3\x2\x2\x2\xA68\x1E3\x3\x2");
		sb.Append("\x2\x2\xA69\xA67\x3\x2\x2\x2\xA6A\xA6F\aM\x2\x2\xA6B\xA6F\a");
		sb.Append("Y\x2\x2\xA6C\xA6F\a)\x2\x2\xA6D\xA6F\x5\x294\x14B\x2\xA6E\xA6A");
		sb.Append("\x3\x2\x2\x2\xA6E\xA6B\x3\x2\x2\x2\xA6E\xA6C\x3\x2\x2\x2\xA6E");
		sb.Append("\xA6D\x3\x2\x2\x2\xA6F\x1E5\x3\x2\x2\x2\xA70\xA74\x5\x1E8\xF5");
		sb.Append("\x2\xA71\xA74\x5\x1EC\xF7\x2\xA72\xA74\x5\x1F2\xFA\x2\xA73\xA70");
		sb.Append("\x3\x2\x2\x2\xA73\xA71\x3\x2\x2\x2\xA73\xA72\x3\x2\x2\x2\xA74");
		sb.Append("\x1E7\x3\x2\x2\x2\xA75\xA76\x5\xE\b\x2\xA76\xA77\a\x45\x2\x2");
		sb.Append("\xA77\xA78\x5\x1EA\xF6\x2\xA78\xA79\ax\x2\x2\xA79\xA7A\x5\xE");
		sb.Append("\b\x2\xA7A\xA7B\x5\b\x5\x2\xA7B\xA7C\ay\x2\x2\xA7C\x1E9\x3\x2");
		sb.Append("\x2\x2\xA7D\xA7E\t\v\x2\x2\xA7E\x1EB\x3\x2\x2\x2\xA7F\xA80\x5");
		sb.Append("\xE\b\x2\xA80\xA81\a\x45\x2\x2\xA81\xA82\x5\x1EE\xF8\x2\xA82");
		sb.Append("\xA83\ax\x2\x2\xA83\xA84\x5\xE\b\x2\xA84\xA85\x5\b\x5\x2\xA85");
		sb.Append("\xA86\a{\x2\x2\xA86\xA87\x5\xE\b\x2\xA87\xA88\x5\b\x5\x2\xA88");
		sb.Append("\xA89\ay\x2\x2\xA89\x1ED\x3\x2\x2\x2\xA8A\xA9B\a~\x2\x2\xA8B");
		sb.Append("\xA9B\a\x7F\x2\x2\xA8C\xA9B\a\x80\x2\x2\xA8D\xA9B\a\x81\x2\x2");
		sb.Append("\xA8E\xA9B\a\x82\x2\x2\xA8F\xA9B\a\x83\x2\x2\xA90\xA9B\a\x84");
		sb.Append("\x2\x2\xA91\xA9B\a\x85\x2\x2\xA92\xA9B\a\x9F\x2\x2\xA93\xA9B");
		sb.Append("\x5\x2F8\x17D\x2\xA94\xA9B\a\x93\x2\x2\xA95\xA9B\a\x94\x2\x2");
		sb.Append("\xA96\xA9B\a\x8A\x2\x2\xA97\xA9B\a\x89\x2\x2\xA98\xA9B\a\x96");
		sb.Append("\x2\x2\xA99\xA9B\a\x95\x2\x2\xA9A\xA8A\x3\x2\x2\x2\xA9A\xA8B");
		sb.Append("\x3\x2\x2\x2\xA9A\xA8C\x3\x2\x2\x2\xA9A\xA8D\x3\x2\x2\x2\xA9A");
		sb.Append("\xA8E\x3\x2\x2\x2\xA9A\xA8F\x3\x2\x2\x2\xA9A\xA90\x3\x2\x2\x2");
		sb.Append("\xA9A\xA91\x3\x2\x2\x2\xA9A\xA92\x3\x2\x2\x2\xA9A\xA93\x3\x2");
		sb.Append("\x2\x2\xA9A\xA94\x3\x2\x2\x2\xA9A\xA95\x3\x2\x2\x2\xA9A\xA96");
		sb.Append("\x3\x2\x2\x2\xA9A\xA97\x3\x2\x2\x2\xA9A\xA98\x3\x2\x2\x2\xA9A");
		sb.Append("\xA99\x3\x2\x2\x2\xA9B\x1EF\x3\x2\x2\x2\xA9C\xAB3\a~\x2\x2\xA9D");
		sb.Append("\xAB3\a\x7F\x2\x2\xA9E\xAB3\a\x86\x2\x2\xA9F\xAB3\a\x87\x2\x2");
		sb.Append("\xAA0\xAB3\a\x8E\x2\x2\xAA1\xAB3\a\x8F\x2\x2\xAA2\xAB3\a_\x2");
		sb.Append("\x2\xAA3\xAB3\a*\x2\x2\xAA4\xAB3\a\x80\x2\x2\xAA5\xAB3\a\x81");
		sb.Append("\x2\x2\xAA6\xAB3\a\x82\x2\x2\xAA7\xAB3\a\x83\x2\x2\xAA8\xAB3");
		sb.Append("\a\x84\x2\x2\xAA9\xAB3\a\x85\x2\x2\xAAA\xAB3\a\x9F\x2\x2\xAAB");
		sb.Append("\xAB3\x5\x2F8\x17D\x2\xAAC\xAB3\a\x93\x2\x2\xAAD\xAB3\a\x94");
		sb.Append("\x2\x2\xAAE\xAB3\a\x8A\x2\x2\xAAF\xAB3\a\x89\x2\x2\xAB0\xAB3");
		sb.Append("\a\x96\x2\x2\xAB1\xAB3\a\x95\x2\x2\xAB2\xA9C\x3\x2\x2\x2\xAB2");
		sb.Append("\xA9D\x3\x2\x2\x2\xAB2\xA9E\x3\x2\x2\x2\xAB2\xA9F\x3\x2\x2\x2");
		sb.Append("\xAB2\xAA0\x3\x2\x2\x2\xAB2\xAA1\x3\x2\x2\x2\xAB2\xAA2\x3\x2");
		sb.Append("\x2\x2\xAB2\xAA3\x3\x2\x2\x2\xAB2\xAA4\x3\x2\x2\x2\xAB2\xAA5");
		sb.Append("\x3\x2\x2\x2\xAB2\xAA6\x3\x2\x2\x2\xAB2\xAA7\x3\x2\x2\x2\xAB2");
		sb.Append("\xAA8\x3\x2\x2\x2\xAB2\xAA9\x3\x2\x2\x2\xAB2\xAAA\x3\x2\x2\x2");
		sb.Append("\xAB2\xAAB\x3\x2\x2\x2\xAB2\xAAC\x3\x2\x2\x2\xAB2\xAAD\x3\x2");
		sb.Append("\x2\x2\xAB2\xAAE\x3\x2\x2\x2\xAB2\xAAF\x3\x2\x2\x2\xAB2\xAB0");
		sb.Append("\x3\x2\x2\x2\xAB2\xAB1\x3\x2\x2\x2\xAB3\x1F1\x3\x2\x2\x2\xAB4");
		sb.Append("\xAB5\a\x35\x2\x2\xAB5\xAB6\a\x45\x2\x2\xAB6\xAB7\x5\xE\b\x2");
		sb.Append("\xAB7\xAB8\ax\x2\x2\xAB8\xAB9\x5\xE\b\x2\xAB9\xABA\x5\b\x5\x2");
		sb.Append("\xABA\xABB\ay\x2\x2\xABB\xAC5\x3\x2\x2\x2\xABC\xABD\a(\x2\x2");
		sb.Append("\xABD\xABE\a\x45\x2\x2\xABE\xABF\x5\xE\b\x2\xABF\xAC0\ax\x2");
		sb.Append("\x2\xAC0\xAC1\x5\xE\b\x2\xAC1\xAC2\x5\b\x5\x2\xAC2\xAC3\ay\x2");
		sb.Append("\x2\xAC3\xAC5\x3\x2\x2\x2\xAC4\xAB4\x3\x2\x2\x2\xAC4\xABC\x3");
		sb.Append("\x2\x2\x2\xAC5\x1F3\x3\x2\x2\x2\xAC6\xAC9\x5\xF0y\x2\xAC7\xAC9");
		sb.Append("\a}\x2\x2\xAC8\xAC6\x3\x2\x2\x2\xAC8\xAC7\x3\x2\x2\x2\xAC9\x1F5");
		sb.Append("\x3\x2\x2\x2\xACA\xACC\x5\x266\x134\x2\xACB\xACA\x3\x2\x2\x2");
		sb.Append("\xACB\xACC\x3\x2\x2\x2\xACC\xACE\x3\x2\x2\x2\xACD\xACF\x5\x1F8");
		sb.Append("\xFD\x2\xACE\xACD\x3\x2\x2\x2\xACE\xACF\x3\x2\x2\x2\xACF\xAD0");
		sb.Append("\x3\x2\x2\x2\xAD0\xAD1\x5\x1FC\xFF\x2\xAD1\xAD2\x5\x200\x101");
		sb.Append("\x2\xAD2\x1F7\x3\x2\x2\x2\xAD3\xAD5\x5\x1FA\xFE\x2\xAD4\xAD3");
		sb.Append("\x3\x2\x2\x2\xAD5\xAD6\x3\x2\x2\x2\xAD6\xAD4\x3\x2\x2\x2\xAD6");
		sb.Append("\xAD7\x3\x2\x2\x2\xAD7\x1F9\x3\x2\x2\x2\xAD8\xADF\aM\x2\x2\xAD9");
		sb.Append("\xADF\aL\x2\x2\xADA\xADF\a\x39\x2\x2\xADB\xADF\aK\x2\x2\xADC");
		sb.Append("\xADF\a)\x2\x2\xADD\xADF\x5\x296\x14C\x2\xADE\xAD8\x3\x2\x2");
		sb.Append("\x2\xADE\xAD9\x3\x2\x2\x2\xADE\xADA\x3\x2\x2\x2\xADE\xADB\x3");
		sb.Append("\x2\x2\x2\xADE\xADC\x3\x2\x2\x2\xADE\xADD\x3\x2\x2\x2\xADF\x1FB");
		sb.Append("\x3\x2\x2\x2\xAE0\xAE1\x5\b\x5\x2\xAE1\xAE3\ax\x2\x2\xAE2\xAE4");
		sb.Append("\x5\x1B0\xD9\x2\xAE3\xAE2\x3\x2\x2\x2\xAE3\xAE4\x3\x2\x2\x2");
		sb.Append("\xAE4\xAE5\x3\x2\x2\x2\xAE5\xAE7\ay\x2\x2\xAE6\xAE8\x5\x1FE");
		sb.Append("\x100\x2\xAE7\xAE6\x3\x2\x2\x2\xAE7\xAE8\x3\x2\x2\x2\xAE8\x1FD");
		sb.Append("\x3\x2\x2\x2\xAE9\xAEA\a|\x2\x2\xAEA\xAEB\a\x11\x2\x2\xAEB\xAED");
		sb.Append("\ax\x2\x2\xAEC\xAEE\x5\x30\x19\x2\xAED\xAEC\x3\x2\x2\x2\xAED");
		sb.Append("\xAEE\x3\x2\x2\x2\xAEE\xAEF\x3\x2\x2\x2\xAEF\xAF8\ay\x2\x2\xAF0");
		sb.Append("\xAF1\a|\x2\x2\xAF1\xAF2\a]\x2\x2\xAF2\xAF4\ax\x2\x2\xAF3\xAF5");
		sb.Append("\x5\x30\x19\x2\xAF4\xAF3\x3\x2\x2\x2\xAF4\xAF5\x3\x2\x2\x2\xAF5");
		sb.Append("\xAF6\x3\x2\x2\x2\xAF6\xAF8\ay\x2\x2\xAF7\xAE9\x3\x2\x2\x2\xAF7");
		sb.Append("\xAF0\x3\x2\x2\x2\xAF8\x1FF\x3\x2\x2\x2\xAF9\xAFC\x5\xF0y\x2");
		sb.Append("\xAFA\xAFC\a}\x2\x2\xAFB\xAF9\x3\x2\x2\x2\xAFB\xAFA\x3\x2\x2");
		sb.Append("\x2\xAFC\x201\x3\x2\x2\x2\xAFD\xAFF\x5\x266\x134\x2\xAFE\xAFD");
		sb.Append("\x3\x2\x2\x2\xAFE\xAFF\x3\x2\x2\x2\xAFF\xB00\x3\x2\x2\x2\xB00");
		sb.Append("\xB01\x5\x204\x103\x2\xB01\xB02\x5\b\x5\x2\xB02\xB03\ax\x2\x2");
		sb.Append("\xB03\xB04\ay\x2\x2\xB04\xB05\x5\x206\x104\x2\xB05\x203\x3\x2");
		sb.Append("\x2\x2\xB06\xB07\x5\x29A\x14E\x2\xB07\x205\x3\x2\x2\x2\xB08");
		sb.Append("\xB0B\x5\xF0y\x2\xB09\xB0B\a}\x2\x2\xB0A\xB08\x3\x2\x2\x2\xB0A");
		sb.Append("\xB09\x3\x2\x2\x2\xB0B\x207\x3\x2\x2\x2\xB0C\xB0D\x5\x298\x14D");
		sb.Append("\x2\xB0D\x209\x3\x2\x2\x2\xB0E\xB11\x5\xF0y\x2\xB0F\xB11\a}");
		sb.Append("\x2\x2\xB10\xB0E\x3\x2\x2\x2\xB10\xB0F\x3\x2\x2\x2\xB11\x20B");
		sb.Append("\x3\x2\x2\x2\xB12\xB15\x5\xF0y\x2\xB13\xB15\a}\x2\x2\xB14\xB12");
		sb.Append("\x3\x2\x2\x2\xB14\xB13\x3\x2\x2\x2\xB15\x20D\x3\x2\x2\x2\xB16");
		sb.Append("\xB18\x5\x266\x134\x2\xB17\xB16\x3\x2\x2\x2\xB17\xB18\x3\x2");
		sb.Append("\x2\x2\xB18\xB1A\x3\x2\x2\x2\xB19\xB1B\x5\x210\x109\x2\xB1A");
		sb.Append("\xB19\x3\x2\x2\x2\xB1A\xB1B\x3\x2\x2\x2\xB1B\xB1D\x3\x2\x2\x2");
		sb.Append("\xB1C\xB1E\x5\x2E4\x173\x2\xB1D\xB1C\x3\x2\x2\x2\xB1D\xB1E\x3");
		sb.Append("\x2\x2\x2\xB1E\xB1F\x3\x2\x2\x2\xB1F\xB20\a[\x2\x2\xB20\xB22");
		sb.Append("\x5\b\x5\x2\xB21\xB23\x5\x174\xBB\x2\xB22\xB21\x3\x2\x2\x2\xB22");
		sb.Append("\xB23\x3\x2\x2\x2\xB23\xB25\x3\x2\x2\x2\xB24\xB26\x5\x214\x10B");
		sb.Append("\x2\xB25\xB24\x3\x2\x2\x2\xB25\xB26\x3\x2\x2\x2\xB26\xB28\x3");
		sb.Append("\x2\x2\x2\xB27\xB29\x5\x17E\xC0\x2\xB28\xB27\x3\x2\x2\x2\xB28");
		sb.Append("\xB29\x3\x2\x2\x2\xB29\xB2A\x3\x2\x2\x2\xB2A\xB2C\x5\x216\x10C");
		sb.Append("\x2\xB2B\xB2D\a}\x2\x2\xB2C\xB2B\x3\x2\x2\x2\xB2C\xB2D\x3\x2");
		sb.Append("\x2\x2\xB2D\x20F\x3\x2\x2\x2\xB2E\xB32\x5\x212\x10A\x2\xB2F");
		sb.Append("\xB31\x5\x212\x10A\x2\xB30\xB2F\x3\x2\x2\x2\xB31\xB34\x3\x2");
		sb.Append("\x2\x2\xB32\xB30\x3\x2\x2\x2\xB32\xB33\x3\x2\x2\x2\xB33\x211");
		sb.Append("\x3\x2\x2\x2\xB34\xB32\x3\x2\x2\x2\xB35\xB3C\a\x41\x2\x2\xB36");
		sb.Append("\xB3C\aM\x2\x2\xB37\xB3C\aL\x2\x2\xB38\xB3C\a\x39\x2\x2\xB39");
		sb.Append("\xB3C\aK\x2\x2\xB3A\xB3C\x5\x284\x143\x2\xB3B\xB35\x3\x2\x2");
		sb.Append("\x2\xB3B\xB36\x3\x2\x2\x2\xB3B\xB37\x3\x2\x2\x2\xB3B\xB38\x3");
		sb.Append("\x2\x2\x2\xB3B\xB39\x3\x2\x2\x2\xB3B\xB3A\x3\x2\x2\x2\xB3C\x213");
		sb.Append("\x3\x2\x2\x2\xB3D\xB3E\a|\x2\x2\xB3E\xB3F\x5\x17C\xBF\x2\xB3F");
		sb.Append("\x215\x3\x2\x2\x2\xB40\xB42\at\x2\x2\xB41\xB43\x5\x218\x10D");
		sb.Append("\x2\xB42\xB41\x3\x2\x2\x2\xB42\xB43\x3\x2\x2\x2\xB43\xB44\x3");
		sb.Append("\x2\x2\x2\xB44\xB45\au\x2\x2\xB45\x217\x3\x2\x2\x2\xB46\xB4A");
		sb.Append("\x5\x21A\x10E\x2\xB47\xB49\x5\x21A\x10E\x2\xB48\xB47\x3\x2\x2");
		sb.Append("\x2\xB49\xB4C\x3\x2\x2\x2\xB4A\xB48\x3\x2\x2\x2\xB4A\xB4B\x3");
		sb.Append("\x2\x2\x2\xB4B\x219\x3\x2\x2\x2\xB4C\xB4A\x3\x2\x2\x2\xB4D\xB4F");
		sb.Append("\x5\x266\x134\x2\xB4E\xB4D\x3\x2\x2\x2\xB4E\xB4F\x3\x2\x2\x2");
		sb.Append("\xB4F\xB51\x3\x2\x2\x2\xB50\xB52\x5\x190\xC9\x2\xB51\xB50\x3");
		sb.Append("\x2\x2\x2\xB51\xB52\x3\x2\x2\x2\xB52\xB59\x3\x2\x2\x2\xB53\xB5A");
		sb.Append("\x5\x194\xCB\x2\xB54\xB55\a,\x2\x2\xB55\xB56\x5\x2C0\x161\x2");
		sb.Append("\xB56\xB57\x5\x2C2\x162\x2\xB57\xB58\a}\x2\x2\xB58\xB5A\x3\x2");
		sb.Append("\x2\x2\xB59\xB53\x3\x2\x2\x2\xB59\xB54\x3\x2\x2\x2\xB5A\x21B");
		sb.Append("\x3\x2\x2\x2\xB5B\xB63\x5\x10\t\x2\xB5C\xB5E\t\x5\x2\x2\xB5D");
		sb.Append("\xB5C\x3\x2\x2\x2\xB5E\xB61\x3\x2\x2\x2\xB5F\xB5D\x3\x2\x2\x2");
		sb.Append("\xB5F\xB60\x3\x2\x2\x2\xB60\xB62\x3\x2\x2\x2\xB61\xB5F\x3\x2");
		sb.Append("\x2\x2\xB62\xB64\x5\x222\x112\x2\xB63\xB5F\x3\x2\x2\x2\xB64");
		sb.Append("\xB65\x3\x2\x2\x2\xB65\xB63\x3\x2\x2\x2\xB65\xB66\x3\x2\x2\x2");
		sb.Append("\xB66\x21D\x3\x2\x2\x2\xB67\xB6D\x5\x10\t\x2\xB68\xB6C\x5\x222");
		sb.Append("\x112\x2\xB69\xB6C\a\x8B\x2\x2\xB6A\xB6C\a\x80\x2\x2\xB6B\xB68");
		sb.Append("\x3\x2\x2\x2\xB6B\xB69\x3\x2\x2\x2\xB6B\xB6A\x3\x2\x2\x2\xB6C");
		sb.Append("\xB6F\x3\x2\x2\x2\xB6D\xB6B\x3\x2\x2\x2\xB6D\xB6E\x3\x2\x2\x2");
		sb.Append("\xB6E\x21F\x3\x2\x2\x2\xB6F\xB6D\x3\x2\x2\x2\xB70\xB72\x5\x222");
		sb.Append("\x112\x2\xB71\xB70\x3\x2\x2\x2\xB72\xB73\x3\x2\x2\x2\xB73\xB71");
		sb.Append("\x3\x2\x2\x2\xB73\xB74\x3\x2\x2\x2\xB74\x221\x3\x2\x2\x2\xB75");
		sb.Append("\xB77\av\x2\x2\xB76\xB78\x5\x224\x113\x2\xB77\xB76\x3\x2\x2");
		sb.Append("\x2\xB77\xB78\x3\x2\x2\x2\xB78\xB79\x3\x2\x2\x2\xB79\xB7A\a");
		sb.Append("w\x2\x2\xB7A\x223\x3\x2\x2\x2\xB7B\xB7F\a{\x2\x2\xB7C\xB7E\a");
		sb.Append("{\x2\x2\xB7D\xB7C\x3\x2\x2\x2\xB7E\xB81\x3\x2\x2\x2\xB7F\xB7D");
		sb.Append("\x3\x2\x2\x2\xB7F\xB80\x3\x2\x2\x2\xB80\x225\x3\x2\x2\x2\xB81");
		sb.Append("\xB7F\x3\x2\x2\x2\xB82\xB83\at\x2\x2\xB83\xB8C\au\x2\x2\xB84");
		sb.Append("\xB85\at\x2\x2\xB85\xB87\x5\x228\x115\x2\xB86\xB88\a{\x2\x2");
		sb.Append("\xB87\xB86\x3\x2\x2\x2\xB87\xB88\x3\x2\x2\x2\xB88\xB89\x3\x2");
		sb.Append("\x2\x2\xB89\xB8A\au\x2\x2\xB8A\xB8C\x3\x2\x2\x2\xB8B\xB82\x3");
		sb.Append("\x2\x2\x2\xB8B\xB84\x3\x2\x2\x2\xB8C\x227\x3\x2\x2\x2\xB8D\xB92");
		sb.Append("\x5\x1A0\xD1\x2\xB8E\xB8F\a{\x2\x2\xB8F\xB91\x5\x1A0\xD1\x2");
		sb.Append("\xB90\xB8E\x3\x2\x2\x2\xB91\xB94\x3\x2\x2\x2\xB92\xB90\x3\x2");
		sb.Append("\x2\x2\xB92\xB93\x3\x2\x2\x2\xB93\x229\x3\x2\x2\x2\xB94\xB92");
		sb.Append("\x3\x2\x2\x2\xB95\xB97\x5\x266\x134\x2\xB96\xB95\x3\x2\x2\x2");
		sb.Append("\xB96\xB97\x3\x2\x2\x2\xB97\xB99\x3\x2\x2\x2\xB98\xB9A\x5\x22C");
		sb.Append("\x117\x2\xB99\xB98\x3\x2\x2\x2\xB99\xB9A\x3\x2\x2\x2\xB9A\xB9C");
		sb.Append("\x3\x2\x2\x2\xB9B\xB9D\x5\x2E4\x173\x2\xB9C\xB9B\x3\x2\x2\x2");
		sb.Append("\xB9C\xB9D\x3\x2\x2\x2\xB9D\xB9E\x3\x2\x2\x2\xB9E\xB9F\a\x38");
		sb.Append("\x2\x2\xB9F\xBA1\x5\b\x5\x2\xBA0\xBA2\x5\x230\x119\x2\xBA1\xBA0");
		sb.Append("\x3\x2\x2\x2\xBA1\xBA2\x3\x2\x2\x2\xBA2\xBA4\x3\x2\x2\x2\xBA3");
		sb.Append("\xBA5\x5\x236\x11C\x2\xBA4\xBA3\x3\x2\x2\x2\xBA4\xBA5\x3\x2");
		sb.Append("\x2\x2\xBA5\xBA7\x3\x2\x2\x2\xBA6\xBA8\x5\x17E\xC0\x2\xBA7\xBA6");
		sb.Append("\x3\x2\x2\x2\xBA7\xBA8\x3\x2\x2\x2\xBA8\xBA9\x3\x2\x2\x2\xBA9");
		sb.Append("\xBAB\x5\x238\x11D\x2\xBAA\xBAC\a}\x2\x2\xBAB\xBAA\x3\x2\x2");
		sb.Append("\x2\xBAB\xBAC\x3\x2\x2\x2\xBAC\x22B\x3\x2\x2\x2\xBAD\xBB1\x5");
		sb.Append("\x22E\x118\x2\xBAE\xBB0\x5\x22E\x118\x2\xBAF\xBAE\x3\x2\x2\x2");
		sb.Append("\xBB0\xBB3\x3\x2\x2\x2\xBB1\xBAF\x3\x2\x2\x2\xBB1\xBB2\x3\x2");
		sb.Append("\x2\x2\xBB2\x22D\x3\x2\x2\x2\xBB3\xBB1\x3\x2\x2\x2\xBB4\xBBB");
		sb.Append("\a\x41\x2\x2\xBB5\xBBB\aM\x2\x2\xBB6\xBBB\aL\x2\x2\xBB7\xBBB");
		sb.Append("\a\x39\x2\x2\xBB8\xBBB\aK\x2\x2\xBB9\xBBB\x5\x286\x144\x2\xBBA");
		sb.Append("\xBB4\x3\x2\x2\x2\xBBA\xBB5\x3\x2\x2\x2\xBBA\xBB6\x3\x2\x2\x2");
		sb.Append("\xBBA\xBB7\x3\x2\x2\x2\xBBA\xBB8\x3\x2\x2\x2\xBBA\xBB9\x3\x2");
		sb.Append("\x2\x2\xBBB\x22F\x3\x2\x2\x2\xBBC\xBBD\a\x89\x2\x2\xBBD\xBBE");
		sb.Append("\x5\x232\x11A\x2\xBBE\xBBF\a\x8A\x2\x2\xBBF\x231\x3\x2\x2\x2");
		sb.Append("\xBC0\xBC2\x5\x266\x134\x2\xBC1\xBC0\x3\x2\x2\x2\xBC1\xBC2\x3");
		sb.Append("\x2\x2\x2\xBC2\xBC4\x3\x2\x2\x2\xBC3\xBC5\x5\x234\x11B\x2\xBC4");
		sb.Append("\xBC3\x3\x2\x2\x2\xBC4\xBC5\x3\x2\x2\x2\xBC5\xBC6\x3\x2\x2\x2");
		sb.Append("\xBC6\xBD1\x5\x178\xBD\x2\xBC7\xBC9\a{\x2\x2\xBC8\xBCA\x5\x266");
		sb.Append("\x134\x2\xBC9\xBC8\x3\x2\x2\x2\xBC9\xBCA\x3\x2\x2\x2\xBCA\xBCC");
		sb.Append("\x3\x2\x2\x2\xBCB\xBCD\x5\x234\x11B\x2\xBCC\xBCB\x3\x2\x2\x2");
		sb.Append("\xBCC\xBCD\x3\x2\x2\x2\xBCD\xBCE\x3\x2\x2\x2\xBCE\xBD0\x5\x178");
		sb.Append("\xBD\x2\xBCF\xBC7\x3\x2\x2\x2\xBD0\xBD3\x3\x2\x2\x2\xBD1\xBCF");
		sb.Append("\x3\x2\x2\x2\xBD1\xBD2\x3\x2\x2\x2\xBD2\x233\x3\x2\x2\x2\xBD3");
		sb.Append("\xBD1\x3\x2\x2\x2\xBD4\xBD5\t\f\x2\x2\xBD5\x235\x3\x2\x2\x2");
		sb.Append("\xBD6\xBD7\a|\x2\x2\xBD7\xBD8\x5\x17C\xBF\x2\xBD8\x237\x3\x2");
		sb.Append("\x2\x2\xBD9\xBDB\at\x2\x2\xBDA\xBDC\x5\x23A\x11E\x2\xBDB\xBDA");
		sb.Append("\x3\x2\x2\x2\xBDB\xBDC\x3\x2\x2\x2\xBDC\xBDD\x3\x2\x2\x2\xBDD");
		sb.Append("\xBDE\au\x2\x2\xBDE\x239\x3\x2\x2\x2\xBDF\xBE1\x5\x23C\x11F");
		sb.Append("\x2\xBE0\xBDF\x3\x2\x2\x2\xBE1\xBE2\x3\x2\x2\x2\xBE2\xBE0\x3");
		sb.Append("\x2\x2\x2\xBE2\xBE3\x3\x2\x2\x2\xBE3\x23B\x3\x2\x2\x2\xBE4\xBE6");
		sb.Append("\x5\x266\x134\x2\xBE5\xBE4\x3\x2\x2\x2\xBE5\xBE6\x3\x2\x2\x2");
		sb.Append("\xBE6\xBE8\x3\x2\x2\x2\xBE7\xBE9\a\x41\x2\x2\xBE8\xBE7\x3\x2");
		sb.Append("\x2\x2\xBE8\xBE9\x3\x2\x2\x2\xBE9\xC1C\x3\x2\x2\x2\xBEA\xC06");
		sb.Append("\x5\xE\b\x2\xBEB\xBED\x5\b\x5\x2\xBEC\xBEE\x5\x174\xBB\x2\xBED");
		sb.Append("\xBEC\x3\x2\x2\x2\xBED\xBEE\x3\x2\x2\x2\xBEE\xBEF\x3\x2\x2\x2");
		sb.Append("\xBEF\xBF1\ax\x2\x2\xBF0\xBF2\x5\x1B0\xD9\x2\xBF1\xBF0\x3\x2");
		sb.Append("\x2\x2\xBF1\xBF2\x3\x2\x2\x2\xBF2\xBF3\x3\x2\x2\x2\xBF3\xBF5");
		sb.Append("\ay\x2\x2\xBF4\xBF6\x5\x17E\xC0\x2\xBF5\xBF4\x3\x2\x2\x2\xBF5");
		sb.Append("\xBF6\x3\x2\x2\x2\xBF6\xBF7\x3\x2\x2\x2\xBF7\xBF8\a}\x2\x2\xBF8");
		sb.Append("\xC07\x3\x2\x2\x2\xBF9\xBFA\x5\b\x5\x2\xBFA\xBFB\at\x2\x2\xBFB");
		sb.Append("\xBFC\x5\x242\x122\x2\xBFC\xBFD\au\x2\x2\xBFD\xC07\x3\x2\x2");
		sb.Append("\x2\xBFE\xBFF\a]\x2\x2\xBFF\xC00\av\x2\x2\xC00\xC01\x5\x1B0");
		sb.Append("\xD9\x2\xC01\xC02\aw\x2\x2\xC02\xC03\at\x2\x2\xC03\xC04\x5\x242");
		sb.Append("\x122\x2\xC04\xC05\au\x2\x2\xC05\xC07\x3\x2\x2\x2\xC06\xBEB");
		sb.Append("\x3\x2\x2\x2\xC06\xBF9\x3\x2\x2\x2\xC06\xBFE\x3\x2\x2\x2\xC07");
		sb.Append("\xC1D\x3\x2\x2\x2\xC08\xC09\ai\x2\x2\xC09\xC0B\x5\b\x5\x2\xC0A");
		sb.Append("\xC0C\x5\x174\xBB\x2\xC0B\xC0A\x3\x2\x2\x2\xC0B\xC0C\x3\x2\x2");
		sb.Append("\x2\xC0C\xC0D\x3\x2\x2\x2\xC0D\xC0F\ax\x2\x2\xC0E\xC10\x5\x1B0");
		sb.Append("\xD9\x2\xC0F\xC0E\x3\x2\x2\x2\xC0F\xC10\x3\x2\x2\x2\xC10\xC11");
		sb.Append("\x3\x2\x2\x2\xC11\xC13\ay\x2\x2\xC12\xC14\x5\x17E\xC0\x2\xC13");
		sb.Append("\xC12\x3\x2\x2\x2\xC13\xC14\x3\x2\x2\x2\xC14\xC15\x3\x2\x2\x2");
		sb.Append("\xC15\xC16\a}\x2\x2\xC16\xC1D\x3\x2\x2\x2\xC17\xC18\a\'\x2\x2");
		sb.Append("\xC18\xC19\x5\xE\b\x2\xC19\xC1A\x5\b\x5\x2\xC1A\xC1B\a}\x2\x2");
		sb.Append("\xC1B\xC1D\x3\x2\x2\x2\xC1C\xBEA\x3\x2\x2\x2\xC1C\xC08\x3\x2");
		sb.Append("\x2\x2\xC1C\xC17\x3\x2\x2\x2\xC1D\x23D\x3\x2\x2\x2\xC1E\xC20");
		sb.Append("\x5\x266\x134\x2\xC1F\xC1E\x3\x2\x2\x2\xC1F\xC20\x3\x2\x2\x2");
		sb.Append("\xC20\xC22\x3\x2\x2\x2\xC21\xC23\a\x41\x2\x2\xC22\xC21\x3\x2");
		sb.Append("\x2\x2\xC22\xC23\x3\x2\x2\x2\xC23\xC24\x3\x2\x2\x2\xC24\xC25");
		sb.Append("\x5\x1AA\xD6\x2\xC25\xC27\x5\b\x5\x2\xC26\xC28\x5\x174\xBB\x2");
		sb.Append("\xC27\xC26\x3\x2\x2\x2\xC27\xC28\x3\x2\x2\x2\xC28\xC29\x3\x2");
		sb.Append("\x2\x2\xC29\xC2B\ax\x2\x2\xC2A\xC2C\x5\x1B0\xD9\x2\xC2B\xC2A");
		sb.Append("\x3\x2\x2\x2\xC2B\xC2C\x3\x2\x2\x2\xC2C\xC2D\x3\x2\x2\x2\xC2D");
		sb.Append("\xC2F\ay\x2\x2\xC2E\xC30\x5\x17E\xC0\x2\xC2F\xC2E\x3\x2\x2\x2");
		sb.Append("\xC2F\xC30\x3\x2\x2\x2\xC30\xC31\x3\x2\x2\x2\xC31\xC32\a}\x2");
		sb.Append("\x2\xC32\x23F\x3\x2\x2\x2\xC33\xC35\x5\x266\x134\x2\xC34\xC33");
		sb.Append("\x3\x2\x2\x2\xC34\xC35\x3\x2\x2\x2\xC35\xC37\x3\x2\x2\x2\xC36");
		sb.Append("\xC38\a\x41\x2\x2\xC37\xC36\x3\x2\x2\x2\xC37\xC38\x3\x2\x2\x2");
		sb.Append("\xC38\xC39\x3\x2\x2\x2\xC39\xC3A\x5\xE\b\x2\xC3A\xC3B\x5\b\x5");
		sb.Append("\x2\xC3B\xC3C\at\x2\x2\xC3C\xC3D\x5\x242\x122\x2\xC3D\xC3E\a");
		sb.Append("u\x2\x2\xC3E\x241\x3\x2\x2\x2\xC3F\xC41\x5\x266\x134\x2\xC40");
		sb.Append("\xC3F\x3\x2\x2\x2\xC40\xC41\x3\x2\x2\x2\xC41\xC56\x3\x2\x2\x2");
		sb.Append("\xC42\xC43\x5\x2EA\x176\x2\xC43\xC4A\a}\x2\x2\xC44\xC46\x5\x266");
		sb.Append("\x134\x2\xC45\xC44\x3\x2\x2\x2\xC45\xC46\x3\x2\x2\x2\xC46\xC47");
		sb.Append("\x3\x2\x2\x2\xC47\xC48\x5\x2EC\x177\x2\xC48\xC49\a}\x2\x2\xC49");
		sb.Append("\xC4B\x3\x2\x2\x2\xC4A\xC45\x3\x2\x2\x2\xC4A\xC4B\x3\x2\x2\x2");
		sb.Append("\xC4B\xC57\x3\x2\x2\x2\xC4C\xC4D\x5\x2EC\x177\x2\xC4D\xC54\a");
		sb.Append("}\x2\x2\xC4E\xC50\x5\x266\x134\x2\xC4F\xC4E\x3\x2\x2\x2\xC4F");
		sb.Append("\xC50\x3\x2\x2\x2\xC50\xC51\x3\x2\x2\x2\xC51\xC52\x5\x2EA\x176");
		sb.Append("\x2\xC52\xC53\a}\x2\x2\xC53\xC55\x3\x2\x2\x2\xC54\xC4F\x3\x2");
		sb.Append("\x2\x2\xC54\xC55\x3\x2\x2\x2\xC55\xC57\x3\x2\x2\x2\xC56\xC42");
		sb.Append("\x3\x2\x2\x2\xC56\xC4C\x3\x2\x2\x2\xC57\x243\x3\x2\x2\x2\xC58");
		sb.Append("\xC5A\x5\x266\x134\x2\xC59\xC58\x3\x2\x2\x2\xC59\xC5A\x3\x2");
		sb.Append("\x2\x2\xC5A\xC5C\x3\x2\x2\x2\xC5B\xC5D\a\x41\x2\x2\xC5C\xC5B");
		sb.Append("\x3\x2\x2\x2\xC5C\xC5D\x3\x2\x2\x2\xC5D\xC5E\x3\x2\x2\x2\xC5E");
		sb.Append("\xC5F\a\'\x2\x2\xC5F\xC60\x5\xE\b\x2\xC60\xC61\x5\b\x5\x2\xC61");
		sb.Append("\xC62\a}\x2\x2\xC62\x245\x3\x2\x2\x2\xC63\xC65\x5\x266\x134");
		sb.Append("\x2\xC64\xC63\x3\x2\x2\x2\xC64\xC65\x3\x2\x2\x2\xC65\xC67\x3");
		sb.Append("\x2\x2\x2\xC66\xC68\a\x41\x2\x2\xC67\xC66\x3\x2\x2\x2\xC67\xC68");
		sb.Append("\x3\x2\x2\x2\xC68\xC69\x3\x2\x2\x2\xC69\xC6A\x5\xE\b\x2\xC6A");
		sb.Append("\xC6B\a]\x2\x2\xC6B\xC6C\av\x2\x2\xC6C\xC6D\x5\x1B0\xD9\x2\xC6D");
		sb.Append("\xC6E\aw\x2\x2\xC6E\xC6F\at\x2\x2\xC6F\xC70\x5\x242\x122\x2");
		sb.Append("\xC70\xC71\au\x2\x2\xC71\x247\x3\x2\x2\x2\xC72\xC74\x5\x266");
		sb.Append("\x134\x2\xC73\xC72\x3\x2\x2\x2\xC73\xC74\x3\x2\x2\x2\xC74\xC76");
		sb.Append("\x3\x2\x2\x2\xC75\xC77\x5\x24E\x128\x2\xC76\xC75\x3\x2\x2\x2");
		sb.Append("\xC76\xC77\x3\x2\x2\x2\xC77\xC78\x3\x2\x2\x2\xC78\xC79\a%\x2");
		sb.Append("\x2\xC79\xC7B\x5\b\x5\x2\xC7A\xC7C\x5\x24A\x126\x2\xC7B\xC7A");
		sb.Append("\x3\x2\x2\x2\xC7B\xC7C\x3\x2\x2\x2\xC7C\xC7D\x3\x2\x2\x2\xC7D");
		sb.Append("\xC7F\x5\x24C\x127\x2\xC7E\xC80\a}\x2\x2\xC7F\xC7E\x3\x2\x2");
		sb.Append("\x2\xC7F\xC80\x3\x2\x2\x2\xC80\x249\x3\x2\x2\x2\xC81\xC82\a");
		sb.Append("|\x2\x2\xC82\xC83\x5\x16\f\x2\xC83\x24B\x3\x2\x2\x2\xC84\xC85");
		sb.Append("\at\x2\x2\xC85\xC8E\au\x2\x2\xC86\xC87\at\x2\x2\xC87\xC89\x5");
		sb.Append("\x252\x12A\x2\xC88\xC8A\a{\x2\x2\xC89\xC88\x3\x2\x2\x2\xC89");
		sb.Append("\xC8A\x3\x2\x2\x2\xC8A\xC8B\x3\x2\x2\x2\xC8B\xC8C\au\x2\x2\xC8C");
		sb.Append("\xC8E\x3\x2\x2\x2\xC8D\xC84\x3\x2\x2\x2\xC8D\xC86\x3\x2\x2\x2");
		sb.Append("\xC8E\x24D\x3\x2\x2\x2\xC8F\xC91\x5\x250\x129\x2\xC90\xC8F\x3");
		sb.Append("\x2\x2\x2\xC91\xC92\x3\x2\x2\x2\xC92\xC90\x3\x2\x2\x2\xC92\xC93");
		sb.Append("\x3\x2\x2\x2\xC93\x24F\x3\x2\x2\x2\xC94\xC95\t\r\x2\x2\xC95");
		sb.Append("\x251\x3\x2\x2\x2\xC96\xC9B\x5\x254\x12B\x2\xC97\xC98\a{\x2");
		sb.Append("\x2\xC98\xC9A\x5\x254\x12B\x2\xC99\xC97\x3\x2\x2\x2\xC9A\xC9D");
		sb.Append("\x3\x2\x2\x2\xC9B\xC99\x3\x2\x2\x2\xC9B\xC9C\x3\x2\x2\x2\xC9C");
		sb.Append("\x253\x3\x2\x2\x2\xC9D\xC9B\x3\x2\x2\x2\xC9E\xCA0\x5\x266\x134");
		sb.Append("\x2\xC9F\xC9E\x3\x2\x2\x2\xC9F\xCA0\x3\x2\x2\x2\xCA0\xCA1\x3");
		sb.Append("\x2\x2\x2\xCA1\xCA4\x5\b\x5\x2\xCA2\xCA3\a\x88\x2\x2\xCA3\xCA5");
		sb.Append("\x5\xE6t\x2\xCA4\xCA2\x3\x2\x2\x2\xCA4\xCA5\x3\x2\x2\x2\xCA5");
		sb.Append("\x255\x3\x2\x2\x2\xCA6\xCA8\x5\x266\x134\x2\xCA7\xCA6\x3\x2");
		sb.Append("\x2\x2\xCA7\xCA8\x3\x2\x2\x2\xCA8\xCAA\x3\x2\x2\x2\xCA9\xCAB");
		sb.Append("\x5\x258\x12D\x2\xCAA\xCA9\x3\x2\x2\x2\xCAA\xCAB\x3\x2\x2\x2");
		sb.Append("\xCAB\xCAC\x3\x2\x2\x2\xCAC\xCAD\a\x1F\x2\x2\xCAD\xCAE\x5\x1AA");
		sb.Append("\xD6\x2\xCAE\xCB0\x5\b\x5\x2\xCAF\xCB1\x5\x230\x119\x2\xCB0");
		sb.Append("\xCAF\x3\x2\x2\x2\xCB0\xCB1\x3\x2\x2\x2\xCB1\xCB2\x3\x2\x2\x2");
		sb.Append("\xCB2\xCB4\ax\x2\x2\xCB3\xCB5\x5\x1B0\xD9\x2\xCB4\xCB3\x3\x2");
		sb.Append("\x2\x2\xCB4\xCB5\x3\x2\x2\x2\xCB5\xCB6\x3\x2\x2\x2\xCB6\xCB8");
		sb.Append("\ay\x2\x2\xCB7\xCB9\x5\x17E\xC0\x2\xCB8\xCB7\x3\x2\x2\x2\xCB8");
		sb.Append("\xCB9\x3\x2\x2\x2\xCB9\xCBA\x3\x2\x2\x2\xCBA\xCBB\a}\x2\x2\xCBB");
		sb.Append("\x257\x3\x2\x2\x2\xCBC\xCC0\x5\x25A\x12E\x2\xCBD\xCBF\x5\x25A");
		sb.Append("\x12E\x2\xCBE\xCBD\x3\x2\x2\x2\xCBF\xCC2\x3\x2\x2\x2\xCC0\xCBE");
		sb.Append("\x3\x2\x2\x2\xCC0\xCC1\x3\x2\x2\x2\xCC1\x259\x3\x2\x2\x2\xCC2");
		sb.Append("\xCC0\x3\x2\x2\x2\xCC3\xCCA\a\x41\x2\x2\xCC4\xCCA\aM\x2\x2\xCC5");
		sb.Append("\xCCA\aL\x2\x2\xCC6\xCCA\a\x39\x2\x2\xCC7\xCCA\aK\x2\x2\xCC8");
		sb.Append("\xCCA\x5\x288\x145\x2\xCC9\xCC3\x3\x2\x2\x2\xCC9\xCC4\x3\x2");
		sb.Append("\x2\x2\xCC9\xCC5\x3\x2\x2\x2\xCC9\xCC6\x3\x2\x2\x2\xCC9\xCC7");
		sb.Append("\x3\x2\x2\x2\xCC9\xCC8\x3\x2\x2\x2\xCCA\x25B\x3\x2\x2\x2\xCCB");
		sb.Append("\xCCC\x5\x25E\x130\x2\xCCC\x25D\x3\x2\x2\x2\xCCD\xCCF\x5\x260");
		sb.Append("\x131\x2\xCCE\xCCD\x3\x2\x2\x2\xCCF\xCD0\x3\x2\x2\x2\xCD0\xCCE");
		sb.Append("\x3\x2\x2\x2\xCD0\xCD1\x3\x2\x2\x2\xCD1\x25F\x3\x2\x2\x2\xCD2");
		sb.Append("\xCD3\av\x2\x2\xCD3\xCD4\x5\x262\x132\x2\xCD4\xCD6\x5\x270\x139");
		sb.Append("\x2\xCD5\xCD7\a{\x2\x2\xCD6\xCD5\x3\x2\x2\x2\xCD6\xCD7\x3\x2");
		sb.Append("\x2\x2\xCD7\xCD8\x3\x2\x2\x2\xCD8\xCD9\aw\x2\x2\xCD9\x261\x3");
		sb.Append("\x2\x2\x2\xCDA\xCDB\x5\x264\x133\x2\xCDB\xCDC\a|\x2\x2\xCDC");
		sb.Append("\x263\x3\x2\x2\x2\xCDD\xCE0\x5\x300\x181\x2\xCDE\xCE0\x5\b\x5");
		sb.Append("\x2\xCDF\xCDD\x3\x2\x2\x2\xCDF\xCDE\x3\x2\x2\x2\xCE0\x265\x3");
		sb.Append("\x2\x2\x2\xCE1\xCE2\x5\x268\x135\x2\xCE2\x267\x3\x2\x2\x2\xCE3");
		sb.Append("\xCE5\x5\x26A\x136\x2\xCE4\xCE3\x3\x2\x2\x2\xCE5\xCE6\x3\x2");
		sb.Append("\x2\x2\xCE6\xCE4\x3\x2\x2\x2\xCE6\xCE7\x3\x2\x2\x2\xCE7\x269");
		sb.Append("\x3\x2\x2\x2\xCE8\xCEA\av\x2\x2\xCE9\xCEB\x5\x26C\x137\x2\xCEA");
		sb.Append("\xCE9\x3\x2\x2\x2\xCEA\xCEB\x3\x2\x2\x2\xCEB\xCEC\x3\x2\x2\x2");
		sb.Append("\xCEC\xCEE\x5\x270\x139\x2\xCED\xCEF\a{\x2\x2\xCEE\xCED\x3\x2");
		sb.Append("\x2\x2\xCEE\xCEF\x3\x2\x2\x2\xCEF\xCF0\x3\x2\x2\x2\xCF0\xCF1");
		sb.Append("\aw\x2\x2\xCF1\x26B\x3\x2\x2\x2\xCF2\xCF3\x5\x26E\x138\x2\xCF3");
		sb.Append("\xCF4\a|\x2\x2\xCF4\x26D\x3\x2\x2\x2\xCF5\xCF8\x5\x300\x181");
		sb.Append("\x2\xCF6\xCF8\x5\b\x5\x2\xCF7\xCF5\x3\x2\x2\x2\xCF7\xCF6\x3");
		sb.Append("\x2\x2\x2\xCF8\x26F\x3\x2\x2\x2\xCF9\xCFE\x5\x272\x13A\x2\xCFA");
		sb.Append("\xCFB\a{\x2\x2\xCFB\xCFD\x5\x272\x13A\x2\xCFC\xCFA\x3\x2\x2");
		sb.Append("\x2\xCFD\xD00\x3\x2\x2\x2\xCFE\xCFC\x3\x2\x2\x2\xCFE\xCFF\x3");
		sb.Append("\x2\x2\x2\xCFF\x271\x3\x2\x2\x2\xD00\xCFE\x3\x2\x2\x2\xD01\xD03");
		sb.Append("\x5\x274\x13B\x2\xD02\xD04\x5\x276\x13C\x2\xD03\xD02\x3\x2\x2");
		sb.Append("\x2\xD03\xD04\x3\x2\x2\x2\xD04\x273\x3\x2\x2\x2\xD05\xD06\x5");
		sb.Append("\x6\x4\x2\xD06\x275\x3\x2\x2\x2\xD07\xD09\ax\x2\x2\xD08\xD0A");
		sb.Append("\x5\x278\x13D\x2\xD09\xD08\x3\x2\x2\x2\xD09\xD0A\x3\x2\x2\x2");
		sb.Append("\xD0A\xD0B\x3\x2\x2\x2\xD0B\xD0C\ay\x2\x2\xD0C\x277\x3\x2\x2");
		sb.Append("\x2\xD0D\xD12\x5\x27A\x13E\x2\xD0E\xD0F\a{\x2\x2\xD0F\xD11\x5");
		sb.Append("\x27A\x13E\x2\xD10\xD0E\x3\x2\x2\x2\xD11\xD14\x3\x2\x2\x2\xD12");
		sb.Append("\xD10\x3\x2\x2\x2\xD12\xD13\x3\x2\x2\x2\xD13\x279\x3\x2\x2\x2");
		sb.Append("\xD14\xD12\x3\x2\x2\x2\xD15\xD16\x5\x280\x141\x2\xD16\x27B\x3");
		sb.Append("\x2\x2\x2\xD17\xD1C\x5\x27E\x140\x2\xD18\xD19\a{\x2\x2\xD19");
		sb.Append("\xD1B\x5\x27E\x140\x2\xD1A\xD18\x3\x2\x2\x2\xD1B\xD1E\x3\x2");
		sb.Append("\x2\x2\xD1C\xD1A\x3\x2\x2\x2\xD1C\xD1D\x3\x2\x2\x2\xD1D\x27D");
		sb.Append("\x3\x2\x2\x2\xD1E\xD1C\x3\x2\x2\x2\xD1F\xD20\x5\b\x5\x2\xD20");
		sb.Append("\xD21\a\x88\x2\x2\xD21\xD22\x5\x280\x141\x2\xD22\x27F\x3\x2");
		sb.Append("\x2\x2\xD23\xD24\x5\xE2r\x2\xD24\x281\x3\x2\x2\x2\xD25\xD26");
		sb.Append("\a\x65\x2\x2\xD26\x283\x3\x2\x2\x2\xD27\xD28\a\x65\x2\x2\xD28");
		sb.Append("\x285\x3\x2\x2\x2\xD29\xD2A\a\x65\x2\x2\xD2A\x287\x3\x2\x2\x2");
		sb.Append("\xD2B\xD2C\a\x65\x2\x2\xD2C\x289\x3\x2\x2\x2\xD2D\xD2E\a\x65");
		sb.Append("\x2\x2\xD2E\x28B\x3\x2\x2\x2\xD2F\xD30\a\x65\x2\x2\xD30\x28D");
		sb.Append("\x3\x2\x2\x2\xD31\xD32\a\x65\x2\x2\xD32\x28F\x3\x2\x2\x2\xD33");
		sb.Append("\xD34\a\x65\x2\x2\xD34\x291\x3\x2\x2\x2\xD35\xD36\a\x65\x2\x2");
		sb.Append("\xD36\x293\x3\x2\x2\x2\xD37\xD38\a\x65\x2\x2\xD38\x295\x3\x2");
		sb.Append("\x2\x2\xD39\xD3A\a\x65\x2\x2\xD3A\x297\x3\x2\x2\x2\xD3B\xD3D");
		sb.Append("\x5\x266\x134\x2\xD3C\xD3B\x3\x2\x2\x2\xD3C\xD3D\x3\x2\x2\x2");
		sb.Append("\xD3D\xD46\x3\x2\x2\x2\xD3E\xD40\a)\x2\x2\xD3F\xD3E\x3\x2\x2");
		sb.Append("\x2\xD3F\xD40\x3\x2\x2\x2\xD40\xD42\x3\x2\x2\x2\xD41\xD43\a");
		sb.Append("\x65\x2\x2\xD42\xD41\x3\x2\x2\x2\xD42\xD43\x3\x2\x2\x2\xD43");
		sb.Append("\xD47\x3\x2\x2\x2\xD44\xD45\a\x65\x2\x2\xD45\xD47\a)\x2\x2\xD46");
		sb.Append("\xD3F\x3\x2\x2\x2\xD46\xD44\x3\x2\x2\x2\xD47\xD48\x3\x2\x2\x2");
		sb.Append("\xD48\xD49\a\x87\x2\x2\xD49\xD4A\x5\b\x5\x2\xD4A\xD4B\ax\x2");
		sb.Append("\x2\xD4B\xD4C\ay\x2\x2\xD4C\xD4D\x5\x20A\x106\x2\xD4D\x299\x3");
		sb.Append("\x2\x2\x2\xD4E\xD50\t\xE\x2\x2\xD4F\xD4E\x3\x2\x2\x2\xD4F\xD50");
		sb.Append("\x3\x2\x2\x2\xD50\xD51\x3\x2\x2\x2\xD51\xD67\aY\x2\x2\xD52\xD53");
		sb.Append("\a)\x2\x2\xD53\xD54\a\x65\x2\x2\xD54\xD67\aY\x2\x2\xD55\xD56");
		sb.Append("\a\x65\x2\x2\xD56\xD57\a)\x2\x2\xD57\xD67\aY\x2\x2\xD58\xD59");
		sb.Append("\a)\x2\x2\xD59\xD5A\aY\x2\x2\xD5A\xD67\a\x65\x2\x2\xD5B\xD5C");
		sb.Append("\a\x65\x2\x2\xD5C\xD5D\aY\x2\x2\xD5D\xD67\a)\x2\x2\xD5E\xD5F");
		sb.Append("\aY\x2\x2\xD5F\xD67\t\xE\x2\x2\xD60\xD61\aY\x2\x2\xD61\xD62");
		sb.Append("\a)\x2\x2\xD62\xD67\a\x65\x2\x2\xD63\xD64\aY\x2\x2\xD64\xD65");
		sb.Append("\a\x65\x2\x2\xD65\xD67\a)\x2\x2\xD66\xD4F\x3\x2\x2\x2\xD66\xD52");
		sb.Append("\x3\x2\x2\x2\xD66\xD55\x3\x2\x2\x2\xD66\xD58\x3\x2\x2\x2\xD66");
		sb.Append("\xD5B\x3\x2\x2\x2\xD66\xD5E\x3\x2\x2\x2\xD66\xD60\x3\x2\x2\x2");
		sb.Append("\xD66\xD63\x3\x2\x2\x2\xD67\x29B\x3\x2\x2\x2\xD68\xD6B\x5\x29E");
		sb.Append("\x150\x2\xD69\xD6B\x5\x2B0\x159\x2\xD6A\xD68\x3\x2\x2\x2\xD6A");
		sb.Append("\xD69\x3\x2\x2\x2\xD6B\x29D\x3\x2\x2\x2\xD6C\xD6D\a\x65\x2\x2");
		sb.Append("\xD6D\xD6E\x5\xF0y\x2\xD6E\x29F\x3\x2\x2\x2\xD6F\xD70\x5\x2A2");
		sb.Append("\x152\x2\xD70\x2A1\x3\x2\x2\x2\xD71\xD76\x5\x12\n\x2\xD72\xD75");
		sb.Append("\x5\x222\x112\x2\xD73\xD75\a\x8B\x2\x2\xD74\xD72\x3\x2\x2\x2");
		sb.Append("\xD74\xD73\x3\x2\x2\x2\xD75\xD78\x3\x2\x2\x2\xD76\xD74\x3\x2");
		sb.Append("\x2\x2\xD76\xD77\x3\x2\x2\x2\xD77\xD79\x3\x2\x2\x2\xD78\xD76");
		sb.Append("\x3\x2\x2\x2\xD79\xD7A\a\x80\x2\x2\xD7A\xD88\x3\x2\x2\x2\xD7B");
		sb.Append("\xD80\x5 \x11\x2\xD7C\xD7F\x5\x222\x112\x2\xD7D\xD7F\a\x8B\x2");
		sb.Append("\x2\xD7E\xD7C\x3\x2\x2\x2\xD7E\xD7D\x3\x2\x2\x2\xD7F\xD82\x3");
		sb.Append("\x2\x2\x2\xD80\xD7E\x3\x2\x2\x2\xD80\xD81\x3\x2\x2\x2\xD81\xD83");
		sb.Append("\x3\x2\x2\x2\xD82\xD80\x3\x2\x2\x2\xD83\xD84\a\x80\x2\x2\xD84");
		sb.Append("\xD88\x3\x2\x2\x2\xD85\xD86\ai\x2\x2\xD86\xD88\a\x80\x2\x2\xD87");
		sb.Append("\xD71\x3\x2\x2\x2\xD87\xD7B\x3\x2\x2\x2\xD87\xD85\x3\x2\x2\x2");
		sb.Append("\xD88\x2A3\x3\x2\x2\x2\xD89\xD8A\x5\xE\b\x2\xD8A\x2A5\x3\x2");
		sb.Append("\x2\x2\xD8B\xD8C\x5\x38\x1D\x2\xD8C\x2A7\x3\x2\x2\x2\xD8D\xD90");
		sb.Append("\x5\x2AA\x156\x2\xD8E\xD90\x5\x2AC\x157\x2\xD8F\xD8D\x3\x2\x2");
		sb.Append("\x2\xD8F\xD8E\x3\x2\x2\x2\xD90\x2A9\x3\x2\x2\x2\xD91\xD92\a");
		sb.Append("\x80\x2\x2\xD92\xD93\x5x=\x2\xD93\x2AB\x3\x2\x2\x2\xD94\xD95");
		sb.Append("\a\x83\x2\x2\xD95\xD96\x5x=\x2\xD96\x2AD\x3\x2\x2\x2\xD97\xD98");
		sb.Append("\aW\x2\x2\xD98\xD99\ax\x2\x2\xD99\xD9A\x5\x2A4\x153\x2\xD9A");
		sb.Append("\xD9B\ay\x2\x2\xD9B\x2AF\x3\x2\x2\x2\xD9C\xD9D\a,\x2\x2\xD9D");
		sb.Append("\xD9E\ax\x2\x2\xD9E\xD9F\x5\x2A2\x152\x2\xD9F\xDA0\x5\x2B2\x15A");
		sb.Append("\x2\xDA0\xDA1\ay\x2\x2\xDA1\xDA2\x5\xECw\x2\xDA2\x2B1\x3\x2");
		sb.Append("\x2\x2\xDA3\xDA8\x5\x2B4\x15B\x2\xDA4\xDA5\a{\x2\x2\xDA5\xDA7");
		sb.Append("\x5\x2B4\x15B\x2\xDA6\xDA4\x3\x2\x2\x2\xDA7\xDAA\x3\x2\x2\x2");
		sb.Append("\xDA8\xDA6\x3\x2\x2\x2\xDA8\xDA9\x3\x2\x2\x2\xDA9\x2B3\x3\x2");
		sb.Append("\x2\x2\xDAA\xDA8\x3\x2\x2\x2\xDAB\xDAC\x5\b\x5\x2\xDAC\xDAD");
		sb.Append("\a\x88\x2\x2\xDAD\xDAE\x5\x2B6\x15C\x2\xDAE\x2B5\x3\x2\x2\x2");
		sb.Append("\xDAF\xDB0\a\x83\x2\x2\xDB0\xDB3\x5.\x18\x2\xDB1\xDB3\x5\xE2");
		sb.Append("r\x2\xDB2\xDAF\x3\x2\x2\x2\xDB2\xDB1\x3\x2\x2\x2\xDB3\x2B7\x3");
		sb.Append("\x2\x2\x2\xDB4\xDB5\x5\x2BA\x15E\x2\xDB5\x2B9\x3\x2\x2\x2\xDB6");
		sb.Append("\xDB8\x5\x266\x134\x2\xDB7\xDB6\x3\x2\x2\x2\xDB7\xDB8\x3\x2");
		sb.Append("\x2\x2\xDB8\xDBA\x3\x2\x2\x2\xDB9\xDBB\x5\x2BC\x15F\x2\xDBA");
		sb.Append("\xDB9\x3\x2\x2\x2\xDBA\xDBB\x3\x2\x2\x2\xDBB\xDBC\x3\x2\x2\x2");
		sb.Append("\xDBC\xDBD\a,\x2\x2\xDBD\xDBE\x5\x2C0\x161\x2\xDBE\xDBF\x5\x2C2");
		sb.Append("\x162\x2\xDBF\xDC0\a}\x2\x2\xDC0\x2BB\x3\x2\x2\x2\xDC1\xDC3");
		sb.Append("\x5\x2BE\x160\x2\xDC2\xDC1\x3\x2\x2\x2\xDC3\xDC4\x3\x2\x2\x2");
		sb.Append("\xDC4\xDC2\x3\x2\x2\x2\xDC4\xDC5\x3\x2\x2\x2\xDC5\x2BD\x3\x2");
		sb.Append("\x2\x2\xDC6\xDC7\t\xF\x2\x2\xDC7\x2BF\x3\x2\x2\x2\xDC8\xDC9");
		sb.Append("\x5\xE\b\x2\xDC9\x2C1\x3\x2\x2\x2\xDCA\xDCC\x5\x2C4\x163\x2");
		sb.Append("\xDCB\xDCA\x3\x2\x2\x2\xDCC\xDCD\x3\x2\x2\x2\xDCD\xDCB\x3\x2");
		sb.Append("\x2\x2\xDCD\xDCE\x3\x2\x2\x2\xDCE\x2C3\x3\x2\x2\x2\xDCF\xDD0");
		sb.Append("\x5\b\x5\x2\xDD0\xDD1\av\x2\x2\xDD1\xDD2\x5\xE6t\x2\xDD2\xDD3");
		sb.Append("\aw\x2\x2\xDD3\x2C5\x3\x2\x2\x2\xDD4\xDD5\x5\x2C8\x165\x2\xDD5");
		sb.Append("\x2C7\x3\x2\x2\x2\xDD6\xDD7\aX\x2\x2\xDD7\xDD8\x5\x2A4\x153");
		sb.Append("\x2\xDD8\xDD9\av\x2\x2\xDD9\xDDA\x5\xE2r\x2\xDDA\xDDB\aw\x2");
		sb.Append("\x2\xDDB\x2C9\x3\x2\x2\x2\xDDC\xDDD\a\x30\x2\x2\xDDD\x2CB\x3");
		sb.Append("\x2\x2\x2\xDDE\xDDF\a=\x2\x2\xDDF\x2CD\x3\x2\x2\x2\xDE0\xDE1");
		sb.Append("\ak\x2\x2\xDE1\x2CF\x3\x2\x2\x2\xDE2\xDE3\a<\x2\x2\xDE3\x2D1");
		sb.Append("\x3\x2\x2\x2\xDE4\xDE5\a\x44\x2\x2\xDE5\x2D3\x3\x2\x2\x2\xDE6");
		sb.Append("\xDE7\a&\x2\x2\xDE7\x2D5\x3\x2\x2\x2\xDE8\xDE9\a:\x2\x2\xDE9");
		sb.Append("\x2D7\x3\x2\x2\x2\xDEA\xDEB\a\x46\x2\x2\xDEB\x2D9\x3\x2\x2\x2");
		sb.Append("\xDEC\xDED\a\x10\x2\x2\xDED\x2DB\x3\x2\x2\x2\xDEE\xDEF\a \x2");
		sb.Append("\x2\xDEF\x2DD\x3\x2\x2\x2\xDF0\xDF1\aT\x2\x2\xDF1\x2DF\x3\x2");
		sb.Append("\x2\x2\xDF2\xDF3\a\x33\x2\x2\xDF3\x2E1\x3\x2\x2\x2\xDF4\xDF5");
		sb.Append("\a\x14\x2\x2\xDF5\x2E3\x3\x2\x2\x2\xDF6\xDF7\aJ\x2\x2\xDF7\x2E5");
		sb.Append("\x3\x2\x2\x2\xDF8\xDF9\a\r\x2\x2\xDF9\x2E7\x3\x2\x2\x2\xDFA");
		sb.Append("\xDFB\am\x2\x2\xDFB\x2E9\x3\x2\x2\x2\xDFC\xDFD\a\x31\x2\x2\xDFD");
		sb.Append("\x2EB\x3\x2\x2\x2\xDFE\xDFF\aU\x2\x2\xDFF\x2ED\x3\x2\x2\x2\xE00");
		sb.Append("\xE01\a\f\x2\x2\xE01\x2EF\x3\x2\x2\x2\xE02\xE03\aP\x2\x2\xE03");
		sb.Append("\x2F1\x3\x2\x2\x2\xE04\xE05\a#\x2\x2\xE05\x2F3\x3\x2\x2\x2\xE06");
		sb.Append("\xE07\a\xE\x2\x2\xE07\x2F5\x3\x2\x2\x2\xE08\xE09\a\x88\x2\x2");
		sb.Append("\xE09\xE0A\a\x8A\x2\x2\xE0A\xE0B\x6\x17C\x2\x3\xE0B\x2F7\x3");
		sb.Append("\x2\x2\x2\xE0C\xE0D\a\x8A\x2\x2\xE0D\xE0E\a\x8A\x2\x2\xE0E\xE0F");
		sb.Append("\x6\x17D\x3\x3\xE0F\x2F9\x3\x2\x2\x2\xE10\xE11\a\x8A\x2\x2\xE11");
		sb.Append("\xE12\a\x96\x2\x2\xE12\xE13\x6\x17E\x4\x3\xE13\x2FB\x3\x2\x2");
		sb.Append("\x2\xE14\xE1B\x5\x2FE\x180\x2\xE15\xE1B\ao\x2\x2\xE16\xE1B\a");
		sb.Append("q\x2\x2\xE17\xE1B\ar\x2\x2\xE18\xE1B\as\x2\x2\xE19\xE1B\a\x42");
		sb.Append("\x2\x2\xE1A\xE14\x3\x2\x2\x2\xE1A\xE15\x3\x2\x2\x2\xE1A\xE16");
		sb.Append("\x3\x2\x2\x2\xE1A\xE17\x3\x2\x2\x2\xE1A\xE18\x3\x2\x2\x2\xE1A");
		sb.Append("\xE19\x3\x2\x2\x2\xE1B\x2FD\x3\x2\x2\x2\xE1C\xE1D\t\x10\x2\x2");
		sb.Append("\xE1D\x2FF\x3\x2\x2\x2\xE1E\xE1F\t\x11\x2\x2\xE1F\x301\x3\x2");
		sb.Append("\x2\x2\xE20\xE21\a\x1A\x2\x2\xE21\xE23\x5\b\x5\x2\xE22\xE24");
		sb.Append("\x5\x174\xBB\x2\xE23\xE22\x3\x2\x2\x2\xE23\xE24\x3\x2\x2\x2");
		sb.Append("\xE24\xE26\x3\x2\x2\x2\xE25\xE27\x5\x17A\xBE\x2\xE26\xE25\x3");
		sb.Append("\x2\x2\x2\xE26\xE27\x3\x2\x2\x2\xE27\xE29\x3\x2\x2\x2\xE28\xE2A");
		sb.Append("\x5\x17E\xC0\x2\xE29\xE28\x3\x2\x2\x2\xE29\xE2A\x3\x2\x2\x2");
		sb.Append("\xE2A\xE2B\x3\x2\x2\x2\xE2B\xE2D\x5\x18A\xC6\x2\xE2C\xE2E\a");
		sb.Append("}\x2\x2\xE2D\xE2C\x3\x2\x2\x2\xE2D\xE2E\x3\x2\x2\x2\xE2E\x303");
		sb.Append("\x3\x2\x2\x2\xE2F\xE30\a[\x2\x2\xE30\xE32\x5\b\x5\x2\xE31\xE33");
		sb.Append("\x5\x174\xBB\x2\xE32\xE31\x3\x2\x2\x2\xE32\xE33\x3\x2\x2\x2");
		sb.Append("\xE33\xE35\x3\x2\x2\x2\xE34\xE36\x5\x214\x10B\x2\xE35\xE34\x3");
		sb.Append("\x2\x2\x2\xE35\xE36\x3\x2\x2\x2\xE36\xE38\x3\x2\x2\x2\xE37\xE39");
		sb.Append("\x5\x17E\xC0\x2\xE38\xE37\x3\x2\x2\x2\xE38\xE39\x3\x2\x2\x2");
		sb.Append("\xE39\xE3A\x3\x2\x2\x2\xE3A\xE3C\x5\x216\x10C\x2\xE3B\xE3D\a");
		sb.Append("}\x2\x2\xE3C\xE3B\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2\x2\xE3D\x305");
		sb.Append("\x3\x2\x2\x2\xE3E\xE3F\a\x38\x2\x2\xE3F\xE41\x5\b\x5\x2\xE40");
		sb.Append("\xE42\x5\x230\x119\x2\xE41\xE40\x3\x2\x2\x2\xE41\xE42\x3\x2");
		sb.Append("\x2\x2\xE42\xE44\x3\x2\x2\x2\xE43\xE45\x5\x236\x11C\x2\xE44");
		sb.Append("\xE43\x3\x2\x2\x2\xE44\xE45\x3\x2\x2\x2\xE45\xE47\x3\x2\x2\x2");
		sb.Append("\xE46\xE48\x5\x17E\xC0\x2\xE47\xE46\x3\x2\x2\x2\xE47\xE48\x3");
		sb.Append("\x2\x2\x2\xE48\xE49\x3\x2\x2\x2\xE49\xE4B\x5\x238\x11D\x2\xE4A");
		sb.Append("\xE4C\a}\x2\x2\xE4B\xE4A\x3\x2\x2\x2\xE4B\xE4C\x3\x2\x2\x2\xE4C");
		sb.Append("\x307\x3\x2\x2\x2\xE4D\xE4E\a%\x2\x2\xE4E\xE50\x5\b\x5\x2\xE4F");
		sb.Append("\xE51\x5\x24A\x126\x2\xE50\xE4F\x3\x2\x2\x2\xE50\xE51\x3\x2");
		sb.Append("\x2\x2\xE51\xE52\x3\x2\x2\x2\xE52\xE54\x5\x24C\x127\x2\xE53");
		sb.Append("\xE55\a}\x2\x2\xE54\xE53\x3\x2\x2\x2\xE54\xE55\x3\x2\x2\x2\xE55");
		sb.Append("\x309\x3\x2\x2\x2\xE56\xE57\a\x1F\x2\x2\xE57\xE58\x5\x1AA\xD6");
		sb.Append("\x2\xE58\xE5A\x5\b\x5\x2\xE59\xE5B\x5\x230\x119\x2\xE5A\xE59");
		sb.Append("\x3\x2\x2\x2\xE5A\xE5B\x3\x2\x2\x2\xE5B\xE5C\x3\x2\x2\x2\xE5C");
		sb.Append("\xE5E\ax\x2\x2\xE5D\xE5F\x5\x1B0\xD9\x2\xE5E\xE5D\x3\x2\x2\x2");
		sb.Append("\xE5E\xE5F\x3\x2\x2\x2\xE5F\xE60\x3\x2\x2\x2\xE60\xE62\ay\x2");
		sb.Append("\x2\xE61\xE63\x5\x17E\xC0\x2\xE62\xE61\x3\x2\x2\x2\xE62\xE63");
		sb.Append("\x3\x2\x2\x2\xE63\xE64\x3\x2\x2\x2\xE64\xE65\a}\x2\x2\xE65\x30B");
		sb.Append("\x3\x2\x2\x2\xE66\xE67\a\'\x2\x2\xE67\xE70\x5\xE\b\x2\xE68\xE69");
		sb.Append("\x5\x19C\xCF\x2\xE69\xE6A\a}\x2\x2\xE6A\xE71\x3\x2\x2\x2\xE6B");
		sb.Append("\xE6C\x5\x1AC\xD7\x2\xE6C\xE6D\at\x2\x2\xE6D\xE6E\x5\x1D2\xEA");
		sb.Append("\x2\xE6E\xE6F\au\x2\x2\xE6F\xE71\x3\x2\x2\x2\xE70\xE68\x3\x2");
		sb.Append("\x2\x2\xE70\xE6B\x3\x2\x2\x2\xE71\x30D\x3\x2\x2\x2\xE72\xE73");
		sb.Append("\x5\x19C\xCF\x2\xE73\xE74\a}\x2\x2\xE74\x30F\x3\x2\x2\x2\xE75");
		sb.Append("\xE76\x5\x1AC\xD7\x2\xE76\xE77\at\x2\x2\xE77\xE78\x5\x1C2\xE2");
		sb.Append("\x2\xE78\xE79\au\x2\x2\xE79\x311\x3\x2\x2\x2\xE7A\xE7B\a\x1B");
		sb.Append("\x2\x2\xE7B\xE7C\x5\xE\b\x2\xE7C\xE7D\x5\x198\xCD\x2\xE7D\xE7E");
		sb.Append("\a}\x2\x2\xE7E\x313\x3\x2\x2\x2\xE7F\xE80\a]\x2\x2\xE80\xE81");
		sb.Append("\av\x2\x2\xE81\xE82\x5\x1B0\xD9\x2\xE82\xE83\aw\x2\x2\xE83\xE84");
		sb.Append("\at\x2\x2\xE84\xE85\x5\x1C2\xE2\x2\xE85\xE86\au\x2\x2\xE86\x315");
		sb.Append("\x3\x2\x2\x2\xE87\xE88\a\x87\x2\x2\xE88\xE89\x5\b\x5\x2\xE89");
		sb.Append("\xE8A\ax\x2\x2\xE8A\xE8B\ay\x2\x2\xE8B\xE8C\x5\x20A\x106\x2");
		sb.Append("\xE8C\x317\x3\x2\x2\x2\xE8D\xE8E\x5\b\x5\x2\xE8E\xE90\ax\x2");
		sb.Append("\x2\xE8F\xE91\x5\x1B0\xD9\x2\xE90\xE8F\x3\x2\x2\x2\xE90\xE91");
		sb.Append("\x3\x2\x2\x2\xE91\xE92\x3\x2\x2\x2\xE92\xE94\ay\x2\x2\xE93\xE95");
		sb.Append("\x5\x1FE\x100\x2\xE94\xE93\x3\x2\x2\x2\xE94\xE95\x3\x2\x2\x2");
		sb.Append("\xE95\xE96\x3\x2\x2\x2\xE96\xE97\x5\x20C\x107\x2\xE97\x319\x3");
		sb.Append("\x2\x2\x2\xE98\xE9A\x5\x31C\x18F\x2\xE99\xE9B\x5\x174\xBB\x2");
		sb.Append("\xE9A\xE99\x3\x2\x2\x2\xE9A\xE9B\x3\x2\x2\x2\xE9B\xE9C\x3\x2");
		sb.Append("\x2\x2\xE9C\xE9E\ax\x2\x2\xE9D\xE9F\x5\x1B0\xD9\x2\xE9E\xE9D");
		sb.Append("\x3\x2\x2\x2\xE9E\xE9F\x3\x2\x2\x2\xE9F\xEA0\x3\x2\x2\x2\xEA0");
		sb.Append("\xEA2\ay\x2\x2\xEA1\xEA3\x5\x17E\xC0\x2\xEA2\xEA1\x3\x2\x2\x2");
		sb.Append("\xEA2\xEA3\x3\x2\x2\x2\xEA3\xEA4\x3\x2\x2\x2\xEA4\xEA5\x5\x1AE");
		sb.Append("\xD8\x2\xEA5\x31B\x3\x2\x2\x2\xEA6\xEA7\x5\x31E\x190\x2\xEA7");
		sb.Append("\x31D\x3\x2\x2\x2\xEA8\xEAE\x5\b\x5\x2\xEA9\xEAA\x5\b\x5\x2");
		sb.Append("\xEAA\xEAB\a\x8C\x2\x2\xEAB\xEAC\x5\b\x5\x2\xEAC\xEAE\x3\x2");
		sb.Append("\x2\x2\xEAD\xEA8\x3\x2\x2\x2\xEAD\xEA9\x3\x2\x2\x2\xEAE\xEB5");
		sb.Append("\x3\x2\x2\x2\xEAF\xEB0\x5\f\a\x2\xEB0\xEB1\az\x2\x2\xEB1\xEB2");
		sb.Append("\x5\b\x5\x2\xEB2\xEB4\x3\x2\x2\x2\xEB3\xEAF\x3\x2\x2\x2\xEB4");
		sb.Append("\xEB7\x3\x2\x2\x2\xEB5\xEB3\x3\x2\x2\x2\xEB5\xEB6\x3\x2\x2\x2");
		sb.Append("\xEB6\x31F\x3\x2\x2\x2\xEB7\xEB5\x3\x2\x2\x2\xEB8\xEB9\a\x45");
		sb.Append("\x2\x2\xEB9\xEBA\x5\x1F0\xF9\x2\xEBA\xEBB\ax\x2\x2\xEBB\xEBC");
		sb.Append("\x5\xE\b\x2\xEBC\xEC1\x5\b\x5\x2\xEBD\xEBE\a{\x2\x2\xEBE\xEBF");
		sb.Append("\x5\xE\b\x2\xEBF\xEC0\x5\b\x5\x2\xEC0\xEC2\x3\x2\x2\x2\xEC1");
		sb.Append("\xEBD\x3\x2\x2\x2\xEC1\xEC2\x3\x2\x2\x2\xEC2\xEC3\x3\x2\x2\x2");
		sb.Append("\xEC3\xEC4\ay\x2\x2\xEC4\xEC5\x5\x1F4\xFB\x2\xEC5\x321\x3\x2");
		sb.Append("\x2\x2\xEC6\xEC8\x5\b\x5\x2\xEC7\xEC9\x5\x174\xBB\x2\xEC8\xEC7");
		sb.Append("\x3\x2\x2\x2\xEC8\xEC9\x3\x2\x2\x2\xEC9\xECA\x3\x2\x2\x2\xECA");
		sb.Append("\xECC\ax\x2\x2\xECB\xECD\x5\x1B0\xD9\x2\xECC\xECB\x3\x2\x2\x2");
		sb.Append("\xECC\xECD\x3\x2\x2\x2\xECD\xECE\x3\x2\x2\x2\xECE\xED0\ay\x2");
		sb.Append("\x2\xECF\xED1\x5\x17E\xC0\x2\xED0\xECF\x3\x2\x2\x2\xED0\xED1");
		sb.Append("\x3\x2\x2\x2\xED1\xED2\x3\x2\x2\x2\xED2\xED3\a}\x2\x2\xED3\x323");
		sb.Append("\x3\x2\x2\x2\xED4\xED5\x5\b\x5\x2\xED5\xED6\at\x2\x2\xED6\xED7");
		sb.Append("\x5\x242\x122\x2\xED7\xED8\au\x2\x2\xED8\x325\x3\x2\x2\x2\xED9");
		sb.Append("\xEDA\a\'\x2\x2\xEDA\xEDB\x5\xE\b\x2\xEDB\xEDC\x5\b\x5\x2\xEDC");
		sb.Append("\xEDD\a}\x2\x2\xEDD\x327\x3\x2\x2\x2\xEDE\xEDF\a]\x2\x2\xEDF");
		sb.Append("\xEE0\av\x2\x2\xEE0\xEE1\x5\x1B0\xD9\x2\xEE1\xEE2\aw\x2\x2\xEE2");
		sb.Append("\xEE3\at\x2\x2\xEE3\xEE4\x5\x242\x122\x2\xEE4\xEE5\au\x2\x2");
		sb.Append("\xEE5\x329\x3\x2\x2\x2\xEE6\xEE7\az\x2\x2\xEE7\xEE8\x5\b\x5");
		sb.Append("\x2\xEE8\xEE9\x5\f\a\x2\xEE9\x32B\x3\x2\x2\x2\xEEA\xEEC\ax\x2");
		sb.Append("\x2\xEEB\xEED\x5\x30\x19\x2\xEEC\xEEB\x3\x2\x2\x2\xEEC\xEED");
		sb.Append("\x3\x2\x2\x2\xEED\xEEE\x3\x2\x2\x2\xEEE\xEF1\ay\x2\x2\xEEF\xEF1");
		sb.Append("\x5:\x1E\x2\xEF0\xEEA\x3\x2\x2\x2\xEF0\xEEF\x3\x2\x2\x2\xEF1");
		sb.Append("\x32D\x3\x2\x2\x2\xEF2\xEF4\ax\x2\x2\xEF3\xEF5\x5\x30\x19\x2");
		sb.Append("\xEF4\xEF3\x3\x2\x2\x2\xEF4\xEF5\x3\x2\x2\x2\xEF5\xEF6\x3\x2");
		sb.Append("\x2\x2\xEF6\xEF8\ay\x2\x2\xEF7\xEF9\x5N(\x2\xEF8\xEF7\x3\x2");
		sb.Append("\x2\x2\xEF8\xEF9\x3\x2\x2\x2\xEF9\x32F\x3\x2\x2\x2\x19D\x33D");
		sb.Append("\x345\x34A\x350\x352\x359\x35D\x362\x36E\x370\x377\x37D\x383");
		sb.Append("\x38C\x392\x39A\x3A0\x3A6\x3AA\x3B0\x3BF\x3CD\x3D1\x3DD\x3E3");
		sb.Append("\x3EC\x3F1\x3F6\x408\x40B\x410\x416\x41E\x434\x443\x449\x44D");
		sb.Append("\x450\x454\x45B\x45F\x466\x46F\x474\x47D\x485\x490\x493\x498");
		sb.Append("\x4A8\x4AC\x4B3\x4BB\x4C7\x4CB\x4D0\x4D2\x4D7\x4DB\x4E0\x4E8");
		sb.Append("\x507\x55B\x56F\x571\x579\x57B\x584\x586\x596\x598\x5A2\x5AC");
		sb.Append("\x5B5\x5B7\x5BF\x5C7\x5CF\x5D7\x5DF\x5E5\x5ED\x5F5\x604\x608");
		sb.Append("\x611\x615\x61E\x622\x629\x630\x637\x63E\x642\x648\x650\x65C");
		sb.Append("\x668\x676\x682\x68C\x691\x695\x699\x6B6\x6BA\x6BF\x6C8\x6CC");
		sb.Append("\x6DA\x6DE\x6E5\x6F3\x6FF\x705\x70A\x717\x71B\x724\x72E\x736");
		sb.Append("\x740\x749\x74F\x762\x766\x76A\x771\x77C\x78D\x7A1\x7A5\x7AB");
		sb.Append("\x7B2\x7B5\x7B9\x7BC\x7C2\x7C9\x7E8\x7F3\x7F6\x7F9\x7FC\x801");
		sb.Append("\x805\x80D\x814\x819\x81C\x81F\x826\x830\x834\x843\x847\x84A");
		sb.Append("\x84D\x854\x85C\x85F\x862\x867\x86A\x86D\x871\x877\x883\x88A");
		sb.Append("\x88F\x894\x89F\x8A7\x8AE\x8BA\x8BE\x8C0\x8C5\x8CC\x8D5\x8DC");
		sb.Append("\x8DF\x8E2\x8EB\x8EE\x8F3\x904\x915\x921\x928\x934\x93C\x940");
		sb.Append("\x946\x949\x94C\x951\x955\x959\x95E\x96C\x970\x976\x97C\x97E");
		sb.Append("\x985\x989\x98C\x991\x994\x99C\x9A3\x9A6\x9B1\x9BF\x9C2\x9C5");
		sb.Append("\x9CA\x9CF\x9D1\x9D4\x9D7\x9DD\x9E0\x9EC\x9F0\x9F3\x9F6\xA02");
		sb.Append("\xA08\xA17\xA1A\xA24\xA27\xA2D\xA33\xA36\xA41\xA4F\xA55\xA5D");
		sb.Append("\xA67\xA6E\xA73\xA9A\xAB2\xAC4\xAC8\xACB\xACE\xAD6\xADE\xAE3");
		sb.Append("\xAE7\xAED\xAF4\xAF7\xAFB\xAFE\xB0A\xB10\xB14\xB17\xB1A\xB1D");
		sb.Append("\xB22\xB25\xB28\xB2C\xB32\xB3B\xB42\xB4A\xB4E\xB51\xB59\xB5F");
		sb.Append("\xB65\xB6B\xB6D\xB73\xB77\xB7F\xB87\xB8B\xB92\xB96\xB99\xB9C");
		sb.Append("\xBA1\xBA4\xBA7\xBAB\xBB1\xBBA\xBC1\xBC4\xBC9\xBCC\xBD1\xBDB");
		sb.Append("\xBE2\xBE5\xBE8\xBED\xBF1\xBF5\xC06\xC0B\xC0F\xC13\xC1C\xC1F");
		sb.Append("\xC22\xC27\xC2B\xC2F\xC34\xC37\xC40\xC45\xC4A\xC4F\xC54\xC56");
		sb.Append("\xC59\xC5C\xC64\xC67\xC73\xC76\xC7B\xC7F\xC89\xC8D\xC92\xC9B");
		sb.Append("\xC9F\xCA4\xCA7\xCAA\xCB0\xCB4\xCB8\xCC0\xCC9\xCD0\xCD6\xCDF");
		sb.Append("\xCE6\xCEA\xCEE\xCF7\xCFE\xD03\xD09\xD12\xD1C\xD3C\xD3F\xD42");
		sb.Append("\xD46\xD4F\xD66\xD6A\xD74\xD76\xD7E\xD80\xD87\xD8F\xDA8\xDB2");
		sb.Append("\xDB7\xDBA\xDC4\xDCD\xE1A\xE23\xE26\xE29\xE2D\xE32\xE35\xE38");
		sb.Append("\xE3C\xE41\xE44\xE47\xE4B\xE50\xE54\xE5A\xE5E\xE62\xE70\xE90");
		sb.Append("\xE94\xE9A\xE9E\xEA2\xEAD\xEB5\xEC1\xEC8\xECC\xED0\xEEC\xEF0");
		sb.Append("\xEF4\xEF8");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
